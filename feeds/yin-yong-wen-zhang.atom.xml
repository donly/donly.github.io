<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>MAG's Note - 引用文章</title><link href="https://magicalboy.com/" rel="alternate"></link><link href="https://magicalboy.com/feeds/yin-yong-wen-zhang.atom.xml" rel="self"></link><id>https://magicalboy.com/</id><updated>2010-05-04T01:34:00+08:00</updated><subtitle>关注移动应用开发</subtitle><entry><title>写给新入IT的新人们</title><link href="https://magicalboy.com/the-new-it-people.html" rel="alternate"></link><published>2010-05-04T01:34:00+08:00</published><updated>2010-05-04T01:34:00+08:00</updated><author><name>donly</name></author><id>tag:magicalboy.com,2010-05-04:/the-new-it-people.html</id><summary type="html">&lt;p&gt;IT=挨踢，这是IT人的自嘲，进入IT行业是有四五年了，也算得上是一个“老人”了吧，见了不少新人，面试了不少新人，也带了一些新人，多多少少
还是有点发言权的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;关于书本&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;新人们常常会说我看了多少多少的书，看过某某人写的书，仿佛书看了就会做了。其实不然，很多新人在面试的时候夸夸其谈，说啥啥都知道一点，到真正做的时候，啥都不会。归根到底是没有经验，技术这玩意儿经验
非常重要，很多东西如果不是你碰到了，你从书上一辈子都找不到答案。&lt;/p&gt;
&lt;p&gt;我看书的习惯一般都是先把整个书翻翻，了解一下书的基本内容，然后
在实际项目中遇到相应的问题再去翻书，当然这是因为我对技术已经有一定的了解，不需要通读整本书。初学者应该找一些适合自己的书，通读一遍，其中的例子要
认真做，一定要自己去写代码，而不是Copy。我以前在学做网页的时候，别人都用Dreamweaver去做，只有我打开源代码编辑器学习HTML源代码
的编写。&lt;/p&gt;
&lt;p&gt;做完书的例子只能说明你会削木头了，但会削木头离会做柜子还有很远的路要走。还记得达·芬奇画鸡蛋的故事么？不停地重复肯定是
枯燥的，所以你需要自己尝试去做一些实际的东西，比如做一个个人主页 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;IT=挨踢，这是IT人的自嘲，进入IT行业是有四五年了，也算得上是一个“老人”了吧，见了不少新人，面试了不少新人，也带了一些新人，多多少少
还是有点发言权的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;关于书本&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;新人们常常会说我看了多少多少的书，看过某某人写的书，仿佛书看了就会做了。其实不然，很多新人在面试的时候夸夸其谈，说啥啥都知道一点，到真正做的时候，啥都不会。归根到底是没有经验，技术这玩意儿经验
非常重要，很多东西如果不是你碰到了，你从书上一辈子都找不到答案。&lt;/p&gt;
&lt;p&gt;我看书的习惯一般都是先把整个书翻翻，了解一下书的基本内容，然后
在实际项目中遇到相应的问题再去翻书，当然这是因为我对技术已经有一定的了解，不需要通读整本书。初学者应该找一些适合自己的书，通读一遍，其中的例子要
认真做，一定要自己去写代码，而不是Copy。我以前在学做网页的时候，别人都用Dreamweaver去做，只有我打开源代码编辑器学习HTML源代码
的编写。&lt;/p&gt;
&lt;p&gt;做完书的例子只能说明你会削木头了，但会削木头离会做柜子还有很远的路要走。还记得达·芬奇画鸡蛋的故事么？不停地重复肯定是
枯燥的，所以你需要自己尝试去做一些实际的东西，比如做一个个人主页、一个留言本、一个通信地址本......在这些实际的东西中去实现你的创意，去实现
你在书本上所学习的例子，并且将这些例子加入你的思想。&lt;/p&gt;
&lt;p&gt;永远不要认为书本能给你带来多少东西，虽然它们很有用，但它们只是一个Key，
一个引你入门的Key。我买的技术书中，最多的是
VB.Net，但这却是我最烂的一门技术。而我用得比较好的Delphi、Sql
Server、Photoshop、CoreDRAW、CSS、HTML、Javascript、Xslt、Xml，我几乎没有买书，但因为实际的项目需
要，或者是我个人的兴趣爱好。&lt;/p&gt;
&lt;p&gt;当然，我并不是反对你去买书，去读书，我只是想告诉你，你需要有一种平和的心态。但你要记住，书本只是一
个Key。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;关于基础&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;现在很多新人们都是好高骛远，目空一切，基础的东西不想做，
难一点的东西又做不了，真的很令人头疼。其实技术人员，尤其是中国技术人员，你要懂的东西太多太多了。我们拿
Web程序员举例吧，HTML、Javascript、CSS、Photoshop切图，这些都是很基础的东西，但很多人就是不愿意去学，认为这些东西太
低级，甚至有些老程序员也不擅长这些。但我要告诉你，在Web开发中，这些都很重要，尤其是CSS和HTML、Javascript，如果你不是做一个
OA之类办公的Web系统的话，这些在网站用得太多太多了，是一些Web应用的基础。&lt;/p&gt;
&lt;p&gt;虽然我们现在涌现一大批如ASP.Net的优秀开
发环境，可以让你完全不懂HTML也能开发出一套“网站”来，但正如其它程序化的东西一些，它会限制你的灵感与思维，它们都很霸道，所以才会有开源的兴
起。我以前甚至不愿意用ASP.Net内置的GridView，我宁愿自己去构造
Table，这觉得这样我更便于控制。&lt;/p&gt;
&lt;p&gt;很多新人们喜
欢拿新兴的技术说事，比如说AJAX，但实质他根本就不懂AJAX实现的原理，连多线程的原理都不懂，怎么能明白AJAX呢？有些做了一年多
ASP.Net的人，居然还不知道.Net
Framework框架的本质是什么，不知道ASP.Net是如何实现的，也不知道客户端也服务器端是如何交互的。&lt;/p&gt;
&lt;p&gt;在这里，我建议做 Web开发的新人们，HTML、
Javascript，CSS是实现一些Web功能的基础，一定要打好基础，当你会你记事本编辑这些代码的时候，恭喜你，你过关了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;关于语言的选择&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;语言之争都是大公司战斗的结果，套用一句管理上的话来说，把合适的的技术用在合适的地方。我们没有必要
跟风去不停地换新的语言，每种语言都有它的优劣，但在一般的项目中，很难看得出来。如果我们做一个只需要新闻发布功能的小公司网站，你说是Java
和.Net好，还是Asp和PHP好呢？在很多时候，Java与.Net、Asp与PHP是难分高下的，他们之间的差异或许是你一辈子也不需要用到，我们
范得着把自己拉入某一些阵营吗？&lt;/p&gt;
&lt;p&gt;当技术达到一定的水平之后，语言只不过是锦上添花了，武侠小说常无招胜有招就是这个道理。你现在让我换
成Java或者是PHP，我很快就可以做项目，因为我掌握的不是语言，而是对技术深层次的理解，现在Java阵营也好，.Net阵营也好，不管你说它们之
间有多少差别，但他们的本质始终没有变，掌握这些本质，换一种语言就好比换一辆车，只需要一个熟悉的过程和一个磨合期而已。&lt;/p&gt;
&lt;p&gt;最后，我建议新手们选择一种在你实质工作中需要的语言，坦坦实实地学好，不要中途“变节”，这样的成本太高了。.Net也好，Java也罢，只是一辆车而已，学好开
本田就会驾丰田。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;关于学习态度&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;学习嘛，在学习的过程中自然会遇到一些问题，遇到
问题自然会想到求助。古人有云：礼下于人，必有所求，言下之意是有求于人，必要礼下于人。可是现在有些人不仅不礼下于人，反而还趾高气扬，仿佛谁欠着他似
的。我们老家有句俗话叫拜师学艺要吃二十四碗鼻涕，可见在学习过程中要受到多少的委屈。&lt;/p&gt;
&lt;p&gt;吃得苦中苦，方为人上人，做技术尤是如此。我以
前在学ASP的时候，同寝室有一哥们是学VB的，因为ASP也是用VBScript做为默认脚本，所以有很多问题请教他，他当是也是给了我不少的嘲笑，像
“这些简单的问题都还要问”之类的话我倒是听了不少。但到后我们一起学Delphi的时候，我就已经超过他了。&lt;/p&gt;
&lt;p&gt;新人们碰到问题的时候，
第一个想法就是想找人解决，当你去帮他解决的时候，他却去做其它事了，好像这个问题是需要你来解决的，下次出现同样的问题他还得找你。遇到问题最好的办法
是先排查问题，然后到互联网上查找问题的原因，这样你才不会忘记，不要忽略了互联网这个最好的老师。我以前在学ASP的时候，为了一个插入数据的问题，查
了一个星期，但这个问题我永远也忘记不了，再也不会范同样的错误。&lt;/p&gt;
&lt;p&gt;高手们一般都比较忙，虽然我不是高手，但我还是不原意在我写代码正酣
的时候，有人打断我的思路。先把问题记下来，趁机会问问高手，不要让他为你解决问题，你要的是一种解决问题的思路。公司常常有新人问我，这个地方出问题
了，怎么办？我便问他，你上网查了吗？不是我不愿意帮他，而是授人鱼不如授人以渔，我直接告诉他怎么做，那不是在帮他，那是我在害他，我只能是告诉他排错
的方法，解决问题的思路，否则他永远也不知道这个问题是怎么解决的，没有人会珍惜轻易得到的东西的。&lt;/p&gt;
&lt;p&gt;最后，我想给踏入这行的新人们一个
忠告，编程没有捷径可言，如果一定要找出一个捷径，那只有六个字——多看、多问、多写。&lt;/p&gt;
&lt;p&gt;来源：本文来自涂雅投稿，&lt;a class="reference external" href="http://iove.net/733/"&gt;原文网址&lt;/a&gt;，转载请保留此链接，否则视为侵权。&lt;/p&gt;
</content></entry></feed>