<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>MAG's Note</title><link href="https://magicalboy.com/note/" rel="alternate"></link><link href="https://magicalboy.com/note/feeds/all.atom.xml" rel="self"></link><id>https://magicalboy.com/note/</id><updated>2017-10-26T22:30:00+08:00</updated><entry><title>wepy 框架</title><link href="https://magicalboy.com/note/wepy.html" rel="alternate"></link><published>2017-10-26T22:30:00+08:00</published><updated>2017-10-26T22:30:00+08:00</updated><author><name>Don</name></author><id>tag:magicalboy.com,2017-10-26:/note/wepy.html</id><summary type="html">&lt;p&gt;&lt;a class="reference external" href="https://wepyjs.github.io/wepy"&gt;小程序组件化开发框架&lt;/a&gt;&lt;/p&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;WePY项目的创建与使用&lt;/h2&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;环境介绍：macOS Sierra 10.12.6 (16G29)&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;pre class="code shell literal-block"&gt;
$ npm --version
&lt;span class="m"&gt;5&lt;/span&gt;.4.2

$ node -v
v8.8.1
&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;ol class="arabic simple" start="2"&gt;
&lt;li&gt;全局安装或更新WePY命令行工具&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;pre class="code shell literal-block"&gt;
$ npm install wepy-cli -g
/usr/local/bin/wepy -&amp;gt; /usr/local/lib/node_modules/wepy-cli/bin/wepy.js

&amp;gt; fsevents&amp;#64;1.1.2 install /usr/local/lib/node_modules/wepy-cli/node_modules/fsevents
&amp;gt; node install …&lt;/pre&gt;&lt;/blockquote&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;&lt;a class="reference external" href="https://wepyjs.github.io/wepy"&gt;小程序组件化开发框架&lt;/a&gt;&lt;/p&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;WePY项目的创建与使用&lt;/h2&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;环境介绍：macOS Sierra 10.12.6 (16G29)&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;pre class="code shell literal-block"&gt;
$ npm --version
&lt;span class="m"&gt;5&lt;/span&gt;.4.2

$ node -v
v8.8.1
&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;ol class="arabic simple" start="2"&gt;
&lt;li&gt;全局安装或更新WePY命令行工具&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;pre class="code shell literal-block"&gt;
$ npm install wepy-cli -g
/usr/local/bin/wepy -&amp;gt; /usr/local/lib/node_modules/wepy-cli/bin/wepy.js

&amp;gt; fsevents&amp;#64;1.1.2 install /usr/local/lib/node_modules/wepy-cli/node_modules/fsevents
&amp;gt; node install

&lt;span class="o"&gt;[&lt;/span&gt;fsevents&lt;span class="o"&gt;]&lt;/span&gt; Success: &lt;span class="s2"&gt;&amp;quot;/usr/local/lib/node_modules/wepy-cli/node_modules/fsevents/lib/binding/Release/node-v57-darwin-x64/fse.node&amp;quot;&lt;/span&gt; already installed
Pass --update-binary to reinstall or --build-from-source to recompile
+ wepy-cli&amp;#64;1.5.9
added &lt;span class="m"&gt;255&lt;/span&gt; packages in &lt;span class="m"&gt;27&lt;/span&gt;.108s
&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;ol class="arabic simple" start="3"&gt;
&lt;li&gt;在开发目录中生成Demo开发项目&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;pre class="code shell literal-block"&gt;
$ wepy new wxapp2
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;21&lt;/span&gt;:16:49&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;创建&lt;span class="o"&gt;]&lt;/span&gt; 目录：wxapp2
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;21&lt;/span&gt;:16:49&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;写入&lt;span class="o"&gt;]&lt;/span&gt; 配置: package.json
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;21&lt;/span&gt;:16:49&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;拷贝&lt;span class="o"&gt;]&lt;/span&gt; 文件: .editorconfig
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;21&lt;/span&gt;:16:49&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;拷贝&lt;span class="o"&gt;]&lt;/span&gt; 文件: .eslintignore
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;21&lt;/span&gt;:16:49&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;拷贝&lt;span class="o"&gt;]&lt;/span&gt; 文件: .eslintrc.js
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;21&lt;/span&gt;:16:49&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;拷贝&lt;span class="o"&gt;]&lt;/span&gt; 文件: .wepyignore
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;21&lt;/span&gt;:16:49&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;拷贝&lt;span class="o"&gt;]&lt;/span&gt; 文件: src/app.wpy
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;21&lt;/span&gt;:16:49&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;拷贝&lt;span class="o"&gt;]&lt;/span&gt; 文件: src/components/counter.wpy
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;21&lt;/span&gt;:16:49&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;拷贝&lt;span class="o"&gt;]&lt;/span&gt; 文件: src/components/group.wpy
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;21&lt;/span&gt;:16:49&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;拷贝&lt;span class="o"&gt;]&lt;/span&gt; 文件: src/components/groupitem.wpy
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;21&lt;/span&gt;:16:49&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;拷贝&lt;span class="o"&gt;]&lt;/span&gt; 文件: src/components/list.wpy
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;21&lt;/span&gt;:16:49&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;拷贝&lt;span class="o"&gt;]&lt;/span&gt; 文件: src/components/panel.wpy
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;21&lt;/span&gt;:16:49&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;拷贝&lt;span class="o"&gt;]&lt;/span&gt; 文件: src/index.template.html
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;21&lt;/span&gt;:16:49&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;拷贝&lt;span class="o"&gt;]&lt;/span&gt; 文件: src/mixins/test.js
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;21&lt;/span&gt;:16:49&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;拷贝&lt;span class="o"&gt;]&lt;/span&gt; 文件: src/pages/index.wpy
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;21&lt;/span&gt;:16:49&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;拷贝&lt;span class="o"&gt;]&lt;/span&gt; 文件: wepy.config.js
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;21&lt;/span&gt;:16:49&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;执行&lt;span class="o"&gt;]&lt;/span&gt; 执行命令: npm install --save wepy wepy-com-toast wepy-async-function
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;21&lt;/span&gt;:16:49&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;执行&lt;span class="o"&gt;]&lt;/span&gt; 执行命令: npm install --save-dev wepy-compiler-babel babel-plugin-transform-decorators-legacy babel-plugin-syntax-export-extensions babel-plugin-transform-export-extensions babel-plugin-transform-class-properties babel-preset-env wepy-compiler-less cross-env eslint&amp;#64;3.18.0 babel-eslint&amp;#64;7.2.1 eslint-config-standard&amp;#64;7.1.0 eslint-friendly-formatter&amp;#64;2.0.7 eslint-plugin-html&amp;#64;2.0.1 eslint-plugin-promise&amp;#64;3.5.0 eslint-plugin-standard&amp;#64;2.0.1 wepy-eslint
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;21&lt;/span&gt;:16:49&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;信息&lt;span class="o"&gt;]&lt;/span&gt; 可能需要几分钟, 请耐心等待...
npm notice created a lockfile as package-lock.json. You should commit this file.
npm WARN wxapp2&amp;#64;1.2.8 No description
npm WARN wxapp2&amp;#64;1.2.8 No repository field.

+ wepy-async-function&amp;#64;1.4.4
+ wepy&amp;#64;1.6.0
+ wepy-com-toast&amp;#64;1.0.2
added &lt;span class="m"&gt;5&lt;/span&gt; packages in &lt;span class="m"&gt;3&lt;/span&gt;.299s
npm WARN wxapp2&amp;#64;1.2.8 No description
npm WARN wxapp2&amp;#64;1.2.8 No repository field.

+ babel-eslint&amp;#64;7.2.1
+ eslint&amp;#64;3.18.0
+ eslint-friendly-formatter&amp;#64;2.0.7
+ eslint-plugin-promise&amp;#64;3.5.0
+ eslint-plugin-html&amp;#64;2.0.1
+ babel-plugin-transform-decorators-legacy&amp;#64;1.3.4
+ eslint-config-standard&amp;#64;7.1.0
+ eslint-plugin-standard&amp;#64;2.0.1
+ babel-plugin-syntax-export-extensions&amp;#64;6.13.0
+ babel-plugin-transform-class-properties&amp;#64;6.24.1
+ babel-plugin-transform-export-extensions&amp;#64;6.22.0
+ wepy-compiler-babel&amp;#64;1.5.1
+ babel-preset-env&amp;#64;1.6.1
+ wepy-compiler-less&amp;#64;1.3.10
+ cross-env&amp;#64;5.1.0
+ wepy-eslint&amp;#64;1.5.2
added &lt;span class="m"&gt;308&lt;/span&gt; packages in &lt;span class="m"&gt;40&lt;/span&gt;.672s
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;21&lt;/span&gt;:17:34&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;完成&lt;span class="o"&gt;]&lt;/span&gt; 安装依赖完成
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;21&lt;/span&gt;:17:34&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;执行&lt;span class="o"&gt;]&lt;/span&gt; 执行命令: wepy build
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;21&lt;/span&gt;:17:34&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;信息&lt;span class="o"&gt;]&lt;/span&gt; 可能需要几分钟, 请耐心等待...
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;21&lt;/span&gt;:17:35&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;编译&lt;span class="o"&gt;]&lt;/span&gt; 入口: src/app.wpy
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;21&lt;/span&gt;:17:35&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;写入&lt;span class="o"&gt;]&lt;/span&gt; JSON: dist/app.json
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;21&lt;/span&gt;:17:35&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;编译&lt;span class="o"&gt;]&lt;/span&gt; 组件: src/components/counter.wpy
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;21&lt;/span&gt;:17:36&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;编译&lt;span class="o"&gt;]&lt;/span&gt; 组件: src/components/group.wpy
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;21&lt;/span&gt;:17:36&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;编译&lt;span class="o"&gt;]&lt;/span&gt; 组件: src/components/groupitem.wpy
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;21&lt;/span&gt;:17:36&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;编译&lt;span class="o"&gt;]&lt;/span&gt; 组件: src/components/list.wpy
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;21&lt;/span&gt;:17:36&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;编译&lt;span class="o"&gt;]&lt;/span&gt; 组件: src/components/panel.wpy
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;21&lt;/span&gt;:17:36&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;拷贝&lt;span class="o"&gt;]&lt;/span&gt; HTML: src/index.template.html
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;21&lt;/span&gt;:17:36&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;编译&lt;span class="o"&gt;]&lt;/span&gt; 页面: src/pages/index.wpy
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;21&lt;/span&gt;:17:36&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;写入&lt;span class="o"&gt;]&lt;/span&gt; JSON: dist/pages/index.json
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;21&lt;/span&gt;:17:36&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;拷贝&lt;span class="o"&gt;]&lt;/span&gt; 依赖: dist/npm/wepy/lib/wepy.js
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;21&lt;/span&gt;:17:36&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;拷贝&lt;span class="o"&gt;]&lt;/span&gt; 依赖: dist/npm/wepy-async-function/index.js
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;21&lt;/span&gt;:17:36&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;写入&lt;span class="o"&gt;]&lt;/span&gt; JS  : dist/app.js
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;21&lt;/span&gt;:17:36&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;写入&lt;span class="o"&gt;]&lt;/span&gt; JS  : dist/components/counter.js
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;21&lt;/span&gt;:17:36&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;写入&lt;span class="o"&gt;]&lt;/span&gt; JS  : dist/components/group.js
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;21&lt;/span&gt;:17:36&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;写入&lt;span class="o"&gt;]&lt;/span&gt; JS  : dist/components/groupitem.js
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;21&lt;/span&gt;:17:36&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;写入&lt;span class="o"&gt;]&lt;/span&gt; JS  : dist/components/list.js
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;21&lt;/span&gt;:17:36&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;写入&lt;span class="o"&gt;]&lt;/span&gt; JS  : dist/components/panel.js
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;21&lt;/span&gt;:17:36&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;写入&lt;span class="o"&gt;]&lt;/span&gt; JS  : dist/mixins/test.js
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;21&lt;/span&gt;:17:36&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;写入&lt;span class="o"&gt;]&lt;/span&gt; WXML: dist/pages/index.wxml
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;21&lt;/span&gt;:17:36&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;拷贝&lt;span class="o"&gt;]&lt;/span&gt; 依赖: dist/npm/wepy-com-toast/toast.js
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;21&lt;/span&gt;:17:36&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;写入&lt;span class="o"&gt;]&lt;/span&gt; JS  : dist/pages/index.js
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;21&lt;/span&gt;:17:36&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;拷贝&lt;span class="o"&gt;]&lt;/span&gt; 依赖: dist/npm/wepy/lib/app.js
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;21&lt;/span&gt;:17:36&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;拷贝&lt;span class="o"&gt;]&lt;/span&gt; 依赖: dist/npm/wepy/lib/page.js
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;21&lt;/span&gt;:17:36&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;拷贝&lt;span class="o"&gt;]&lt;/span&gt; 依赖: dist/npm/wepy/lib/component.js
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;21&lt;/span&gt;:17:36&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;拷贝&lt;span class="o"&gt;]&lt;/span&gt; 依赖: dist/npm/wepy/lib/event.js
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;21&lt;/span&gt;:17:36&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;拷贝&lt;span class="o"&gt;]&lt;/span&gt; 依赖: dist/npm/wepy/lib/base.js
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;21&lt;/span&gt;:17:36&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;拷贝&lt;span class="o"&gt;]&lt;/span&gt; 依赖: dist/npm/wepy/lib/util.js
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;21&lt;/span&gt;:17:36&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;拷贝&lt;span class="o"&gt;]&lt;/span&gt; 依赖: dist/npm/wepy/lib/mixin.js
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;21&lt;/span&gt;:17:36&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;写入&lt;span class="o"&gt;]&lt;/span&gt; JS  : dist/npm/wepy/lib/wepy.js
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;21&lt;/span&gt;:17:36&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;拷贝&lt;span class="o"&gt;]&lt;/span&gt; 依赖: dist/npm/wepy-async-function/global.js
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;21&lt;/span&gt;:17:36&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;拷贝&lt;span class="o"&gt;]&lt;/span&gt; 依赖: dist/npm/promise-polyfill/promise.js
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;21&lt;/span&gt;:17:36&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;拷贝&lt;span class="o"&gt;]&lt;/span&gt; 依赖: dist/npm/regenerator-runtime/runtime.js
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;21&lt;/span&gt;:17:36&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;写入&lt;span class="o"&gt;]&lt;/span&gt; JS  : dist/npm/wepy-async-function/index.js
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;21&lt;/span&gt;:17:36&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;编译&lt;span class="o"&gt;]&lt;/span&gt; Other: node_modules/wepy-com-toast/toast.wpy
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;21&lt;/span&gt;:17:36&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;拷贝&lt;span class="o"&gt;]&lt;/span&gt; 依赖: dist/npm/wepy/lib/native.js
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;21&lt;/span&gt;:17:36&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;写入&lt;span class="o"&gt;]&lt;/span&gt; JS  : dist/npm/wepy/lib/app.js
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;21&lt;/span&gt;:17:36&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;写入&lt;span class="o"&gt;]&lt;/span&gt; JS  : dist/npm/wepy/lib/page.js
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;21&lt;/span&gt;:17:36&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;写入&lt;span class="o"&gt;]&lt;/span&gt; JS  : dist/npm/wepy/lib/component.js
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;21&lt;/span&gt;:17:36&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;写入&lt;span class="o"&gt;]&lt;/span&gt; JS  : dist/npm/wepy/lib/event.js
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;21&lt;/span&gt;:17:36&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;写入&lt;span class="o"&gt;]&lt;/span&gt; JS  : dist/npm/wepy/lib/base.js
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;21&lt;/span&gt;:17:36&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;写入&lt;span class="o"&gt;]&lt;/span&gt; JS  : dist/npm/wepy/lib/util.js
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;21&lt;/span&gt;:17:36&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;写入&lt;span class="o"&gt;]&lt;/span&gt; JS  : dist/npm/wepy/lib/mixin.js
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;21&lt;/span&gt;:17:36&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;写入&lt;span class="o"&gt;]&lt;/span&gt; JS  : dist/npm/wepy-async-function/global.js
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;21&lt;/span&gt;:17:36&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;写入&lt;span class="o"&gt;]&lt;/span&gt; JS  : dist/npm/promise-polyfill/promise.js
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;21&lt;/span&gt;:17:36&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;写入&lt;span class="o"&gt;]&lt;/span&gt; JS  : dist/npm/regenerator-runtime/runtime.js
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;21&lt;/span&gt;:17:36&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;写入&lt;span class="o"&gt;]&lt;/span&gt; WXML: dist/npm/wepy-com-toast/toast.wxml
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;21&lt;/span&gt;:17:36&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;写入&lt;span class="o"&gt;]&lt;/span&gt; JS  : dist/npm/wepy-com-toast/toast.js
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;21&lt;/span&gt;:17:36&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;写入&lt;span class="o"&gt;]&lt;/span&gt; WXSS: dist/app.wxss
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;21&lt;/span&gt;:17:36&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;写入&lt;span class="o"&gt;]&lt;/span&gt; JS  : dist/npm/wepy/lib/native.js
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;21&lt;/span&gt;:17:36&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;写入&lt;span class="o"&gt;]&lt;/span&gt; WXSS: dist/components/counter.wxss
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;21&lt;/span&gt;:17:36&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;写入&lt;span class="o"&gt;]&lt;/span&gt; WXSS: dist/components/group.wxss
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;21&lt;/span&gt;:17:36&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;写入&lt;span class="o"&gt;]&lt;/span&gt; WXSS: dist/components/groupitem.wxss
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;21&lt;/span&gt;:17:36&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;写入&lt;span class="o"&gt;]&lt;/span&gt; WXSS: dist/components/list.wxss
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;21&lt;/span&gt;:17:36&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;写入&lt;span class="o"&gt;]&lt;/span&gt; WXSS: dist/components/panel.wxss
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;21&lt;/span&gt;:17:36&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;写入&lt;span class="o"&gt;]&lt;/span&gt; WXSS: dist/pages/index.wxss
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;21&lt;/span&gt;:17:36&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;写入&lt;span class="o"&gt;]&lt;/span&gt; WXSS: dist/npm/wepy-com-toast/toast.wxss
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;21&lt;/span&gt;:17:37&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;完成&lt;span class="o"&gt;]&lt;/span&gt; 代码编译完成
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;21&lt;/span&gt;:17:37&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;完成&lt;span class="o"&gt;]&lt;/span&gt; 项目初始化完成, 可以开始使用小程序。
&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;ol class="arabic simple" start="4"&gt;
&lt;li&gt;切换至项目目录&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;pre class="code shell literal-block"&gt;
$ &lt;span class="nb"&gt;cd&lt;/span&gt; wxapp2
&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;ol class="arabic simple" start="5"&gt;
&lt;li&gt;开启实时编译&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;pre class="code shell literal-block"&gt;
$ wepy build --watch
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;23&lt;/span&gt;:01:22&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;编译&lt;span class="o"&gt;]&lt;/span&gt; 入口: src/app.wpy
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;23&lt;/span&gt;:01:22&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;写入&lt;span class="o"&gt;]&lt;/span&gt; JSON: dist/app.json
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;23&lt;/span&gt;:01:23&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;拷贝&lt;span class="o"&gt;]&lt;/span&gt; DS_STORE: src/.DS_Store
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;23&lt;/span&gt;:01:23&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;编译&lt;span class="o"&gt;]&lt;/span&gt; 组件: src/components/counter.wpy
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;23&lt;/span&gt;:01:23&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;编译&lt;span class="o"&gt;]&lt;/span&gt; 组件: src/components/group.wpy
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;23&lt;/span&gt;:01:23&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;编译&lt;span class="o"&gt;]&lt;/span&gt; 组件: src/components/groupitem.wpy
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;23&lt;/span&gt;:01:23&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;编译&lt;span class="o"&gt;]&lt;/span&gt; 组件: src/components/list.wpy
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;23&lt;/span&gt;:01:23&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;编译&lt;span class="o"&gt;]&lt;/span&gt; 组件: src/components/panel.wpy
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;23&lt;/span&gt;:01:23&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;拷贝&lt;span class="o"&gt;]&lt;/span&gt; HTML: src/index.template.html
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;23&lt;/span&gt;:01:23&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;编译&lt;span class="o"&gt;]&lt;/span&gt; 页面: src/pages/index.wpy
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;23&lt;/span&gt;:01:23&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;写入&lt;span class="o"&gt;]&lt;/span&gt; JSON: dist/pages/index.json
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;23&lt;/span&gt;:01:23&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;写入&lt;span class="o"&gt;]&lt;/span&gt; JS  : dist/app.js
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;23&lt;/span&gt;:01:23&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;写入&lt;span class="o"&gt;]&lt;/span&gt; JS  : dist/components/counter.js
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;23&lt;/span&gt;:01:23&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;写入&lt;span class="o"&gt;]&lt;/span&gt; JS  : dist/components/group.js
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;23&lt;/span&gt;:01:23&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;写入&lt;span class="o"&gt;]&lt;/span&gt; JS  : dist/components/groupitem.js
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;23&lt;/span&gt;:01:23&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;写入&lt;span class="o"&gt;]&lt;/span&gt; JS  : dist/components/list.js
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;23&lt;/span&gt;:01:23&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;写入&lt;span class="o"&gt;]&lt;/span&gt; JS  : dist/components/panel.js
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;23&lt;/span&gt;:01:23&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;写入&lt;span class="o"&gt;]&lt;/span&gt; JS  : dist/mixins/test.js
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;23&lt;/span&gt;:01:23&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;写入&lt;span class="o"&gt;]&lt;/span&gt; WXML: dist/pages/index.wxml
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;23&lt;/span&gt;:01:23&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;写入&lt;span class="o"&gt;]&lt;/span&gt; JS  : dist/pages/index.js
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;23&lt;/span&gt;:01:23&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;写入&lt;span class="o"&gt;]&lt;/span&gt; WXSS: dist/app.wxss
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;23&lt;/span&gt;:01:23&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;写入&lt;span class="o"&gt;]&lt;/span&gt; WXSS: dist/components/counter.wxss
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;23&lt;/span&gt;:01:23&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;写入&lt;span class="o"&gt;]&lt;/span&gt; WXSS: dist/components/group.wxss
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;23&lt;/span&gt;:01:23&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;写入&lt;span class="o"&gt;]&lt;/span&gt; WXSS: dist/components/groupitem.wxss
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;23&lt;/span&gt;:01:23&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;写入&lt;span class="o"&gt;]&lt;/span&gt; WXSS: dist/components/list.wxss
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;23&lt;/span&gt;:01:23&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;写入&lt;span class="o"&gt;]&lt;/span&gt; WXSS: dist/components/panel.wxss
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;23&lt;/span&gt;:01:23&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;写入&lt;span class="o"&gt;]&lt;/span&gt; WXSS: dist/pages/index.wxss
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;23&lt;/span&gt;:01:23&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;信息&lt;span class="o"&gt;]&lt;/span&gt; 开始监听文件改动。
&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;ol class="arabic simple" start="6"&gt;
&lt;li&gt;接下来直接参考 &lt;a class="reference external" href="https://wepyjs.github.io/wepy/#/"&gt;https://wepyjs.github.io/wepy/#/&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content><category term="js"></category></entry><entry><title>Java 匿名类</title><link href="https://magicalboy.com/note/java_anonymous_class.html" rel="alternate"></link><published>2017-06-30T19:39:00+08:00</published><updated>2017-06-30T19:39:00+08:00</updated><author><name>Don</name></author><id>tag:magicalboy.com,2017-06-30:/note/java_anonymous_class.html</id><summary type="html">&lt;p&gt;最近在复习 Java，利用 Learn Java App 有一定基础复习一遍还是很快的。&lt;/p&gt;
&lt;img alt="java" src="https://lh3.googleusercontent.com/GG1ijmZNLKV6wfyLBqgr0Y7Lnx2sPD3pInbzRt9HY5RJIFpxYPPfUDAT2JmnqztmfdjaSPMNsp41fA=w1440-h900-no" /&gt;
&lt;p&gt;在复习过程中，觉得比较容易忘记的几点还是有必要做一下笔记的。比如匿名内部类。&lt;/p&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;匿名类&lt;/h2&gt;
&lt;p&gt;没有名字，创建方式：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;父类构造器&lt;/span&gt;&lt;span class="err"&gt;（&lt;/span&gt;&lt;span class="n"&gt;参数列表&lt;/span&gt;&lt;span class="err"&gt;）&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;实现接口&lt;/span&gt;&lt;span class="err"&gt;（）&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt;
 &lt;span class="c1"&gt;//匿名内部类的类体部分&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;举个例子：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;abstract&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Bird&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="nf"&gt;getName&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;setName&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;abstract&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;fly&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Test&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;test&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Bird …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;最近在复习 Java，利用 Learn Java App 有一定基础复习一遍还是很快的。&lt;/p&gt;
&lt;img alt="java" src="https://lh3.googleusercontent.com/GG1ijmZNLKV6wfyLBqgr0Y7Lnx2sPD3pInbzRt9HY5RJIFpxYPPfUDAT2JmnqztmfdjaSPMNsp41fA=w1440-h900-no" /&gt;
&lt;p&gt;在复习过程中，觉得比较容易忘记的几点还是有必要做一下笔记的。比如匿名内部类。&lt;/p&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;匿名类&lt;/h2&gt;
&lt;p&gt;没有名字，创建方式：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;父类构造器&lt;/span&gt;&lt;span class="err"&gt;（&lt;/span&gt;&lt;span class="n"&gt;参数列表&lt;/span&gt;&lt;span class="err"&gt;）&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;实现接口&lt;/span&gt;&lt;span class="err"&gt;（）&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt;
 &lt;span class="c1"&gt;//匿名内部类的类体部分&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;举个例子：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;abstract&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Bird&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="nf"&gt;getName&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;setName&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;abstract&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;fly&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Test&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;test&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Bird&lt;/span&gt; &lt;span class="n"&gt;bird&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;
        &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bird&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getName&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;能够飞 &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;bird&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;fly&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;米&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Test&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Test&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;test&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Bird&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

            &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;fly&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;10000&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="o"&gt;}&lt;/span&gt;

            &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="nf"&gt;getName&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;大雁&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="o"&gt;});&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;------------------&lt;/span&gt;
&lt;span class="n"&gt;Output&lt;/span&gt;&lt;span class="err"&gt;：&lt;/span&gt;
&lt;span class="n"&gt;大雁能够飞&lt;/span&gt; &lt;span class="mi"&gt;10000&lt;/span&gt;&lt;span class="n"&gt;米&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;EOF.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Java"></category></entry><entry><title>iOS 11 Developer beta 2</title><link href="https://magicalboy.com/note/ios-11-beta-2-update.html" rel="alternate"></link><published>2017-06-22T10:30:00+08:00</published><updated>2017-06-22T10:30:00+08:00</updated><author><name>Don</name></author><id>tag:magicalboy.com,2017-06-22:/note/ios-11-beta-2-update.html</id><summary type="html">&lt;p&gt;iOS 11 更新至 beta 2。&lt;/p&gt;
&lt;p&gt;更新后版本号为：&lt;code&gt;11 (15A5304i)&lt;/code&gt;，详细的更新日志见官网：&lt;a class="reference external" href="http://adcdownload.apple.com/Documentation/Beta_Release_Notes_Jun_21_2017/iOS_11_beta_2_Release_Notes.pdf"&gt;iOS 11 beta 2 Release Notes&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;iOS 11 第一个 beta 版本问题还是很多的，而且部分 bug 还严重影响设备的正常使用。&lt;/p&gt;
&lt;p&gt;关于 iOS 11 的新特性请见 &lt;a class="reference external" href="https://developer.apple.com/library/content/releasenotes/General/WhatsNewIniOS/Articles/iOS_11_0.html#//apple_ref/doc/uid/TP40017637-SW1"&gt;What's New in iOS&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;本次更新主要亮点：&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;32 位应用程序将不会运行在 iOS 11 的未来版本上。（26402174）&lt;/li&gt;
&lt;li&gt;iOS 11 不再支持 armv7 或 armv7s（32位）。 如果 iOS 目标的 iOS 部署目标为 …&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;p&gt;iOS 11 更新至 beta 2。&lt;/p&gt;
&lt;p&gt;更新后版本号为：&lt;code&gt;11 (15A5304i)&lt;/code&gt;，详细的更新日志见官网：&lt;a class="reference external" href="http://adcdownload.apple.com/Documentation/Beta_Release_Notes_Jun_21_2017/iOS_11_beta_2_Release_Notes.pdf"&gt;iOS 11 beta 2 Release Notes&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;iOS 11 第一个 beta 版本问题还是很多的，而且部分 bug 还严重影响设备的正常使用。&lt;/p&gt;
&lt;p&gt;关于 iOS 11 的新特性请见 &lt;a class="reference external" href="https://developer.apple.com/library/content/releasenotes/General/WhatsNewIniOS/Articles/iOS_11_0.html#//apple_ref/doc/uid/TP40017637-SW1"&gt;What's New in iOS&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;本次更新主要亮点：&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;32 位应用程序将不会运行在 iOS 11 的未来版本上。（26402174）&lt;/li&gt;
&lt;li&gt;iOS 11 不再支持 armv7 或 armv7s（32位）。 如果 iOS 目标的 iOS 部署目标为 11，则不会为 32 位构建。 默认情况下，针对早于11的iOS部署目标的iOS目标仍将生成32位。（32163517）&lt;/li&gt;
&lt;/ol&gt;
&lt;img alt="install on iPhone 6s plus" class="align-left" src="https://github.com/donly/note/blob/master/images/ios-11-beta-2.PNG?raw=true" style="width: 320px; height: 568px;" /&gt;
</content><category term="apple"></category></entry><entry><title>Vultr 云主机</title><link href="https://magicalboy.com/note/vultr_host.html" rel="alternate"></link><published>2017-06-20T00:00:00+08:00</published><updated>2017-06-20T00:00:00+08:00</updated><author><name>Don</name></author><id>tag:magicalboy.com,2017-06-20:/note/vultr_host.html</id><summary type="html">&lt;img alt="" src="https://www.vultr.com/media/banner_3.png" /&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.vultr.com/?ref=7161763"&gt;DigitalOcean&lt;/a&gt; 云主机，价格最价 &lt;code&gt;2.5 USD&lt;/code&gt; 一个月。&lt;/p&gt;
&lt;p&gt;购买请点上面连接。&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.vultr.com/faq/#downloadspeedtests"&gt;速度测试&lt;/a&gt;，日本 Tokyo ping 在 160 ms 左右。&lt;/p&gt;
&lt;p&gt;主要特点有：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;访问速度快（日本，新加坡），ping 平均 160 ms 左右；&lt;/li&gt;
&lt;li&gt;价格不算贵，最便宜 2.5 USD，可惜已经限量购买了；&lt;/li&gt;
&lt;li&gt;国外主机不需备案；&lt;/li&gt;
&lt;li&gt;操作系统可选比较多，而且比较新，比如有 Ubuntu 17.04, Windows 2012R2 等；&lt;/li&gt;
&lt;li&gt;官方指导文档资料比较丰富，Support tickets 回复迅速，方便解决问题节省时间。&lt;/li&gt;
&lt;/ul&gt;
</summary><content type="html">&lt;img alt="" src="https://www.vultr.com/media/banner_3.png" /&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.vultr.com/?ref=7161763"&gt;DigitalOcean&lt;/a&gt; 云主机，价格最价 &lt;code&gt;2.5 USD&lt;/code&gt; 一个月。&lt;/p&gt;
&lt;p&gt;购买请点上面连接。&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.vultr.com/faq/#downloadspeedtests"&gt;速度测试&lt;/a&gt;，日本 Tokyo ping 在 160 ms 左右。&lt;/p&gt;
&lt;p&gt;主要特点有：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;访问速度快（日本，新加坡），ping 平均 160 ms 左右；&lt;/li&gt;
&lt;li&gt;价格不算贵，最便宜 2.5 USD，可惜已经限量购买了；&lt;/li&gt;
&lt;li&gt;国外主机不需备案；&lt;/li&gt;
&lt;li&gt;操作系统可选比较多，而且比较新，比如有 Ubuntu 17.04, Windows 2012R2 等；&lt;/li&gt;
&lt;li&gt;官方指导文档资料比较丰富，Support tickets 回复迅速，方便解决问题节省时间。&lt;/li&gt;
&lt;/ul&gt;
</content><category term="misc"></category></entry><entry><title>iOS 10.3 正式版发布</title><link href="https://magicalboy.com/note/ios-10-3-release.html" rel="alternate"></link><published>2017-03-28T10:30:00+08:00</published><updated>2017-03-28T10:30:00+08:00</updated><author><name>Don</name></author><id>tag:magicalboy.com,2017-03-28:/note/ios-10-3-release.html</id><summary type="html">&lt;p&gt;今天苹果 iOS 10.3 正式版已经发布。版本号为：&lt;code&gt;10.3 (14E277)&lt;/code&gt;，对应的开发工具 Xcode 8.3 版本号为 8E162。&lt;/p&gt;
&lt;p&gt;详细的更新日志见官网：&lt;a class="reference external" href="https://support.apple.com/zh-cn/HT201222"&gt;https://support.apple.com/zh-cn/HT201222&lt;/a&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;iOS 10.3 推出了包括使用“查找我的 iPhone”定位 AirPods 在内的全新功能，并提供了使用 Siri 进行支付、叫车以及与车载设备配合使用的更多途径。&lt;/p&gt;
&lt;p&gt;查找我的 iPhone&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;查看您 AirPods 的当前位置或最后已知位置&lt;/li&gt;
&lt;li&gt;在一侧或左右 AirPods 上同时播放声音，帮助您找到它们&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Siri&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;支持配合支付应用进行支付和检查账单状态&lt;/li&gt;
&lt;li&gt;支持配合叫车应用预约车辆&lt;/li&gt;
&lt;li&gt;支持配合车载应用检查油量及车锁状态，并可开灯和鸣喇叭&lt;/li&gt;
&lt;li&gt;支持印度超级板球联赛和国际板球理事会的板球运动比分和统计数据 …&lt;/li&gt;&lt;/ul&gt;&lt;/blockquote&gt;</summary><content type="html">&lt;p&gt;今天苹果 iOS 10.3 正式版已经发布。版本号为：&lt;code&gt;10.3 (14E277)&lt;/code&gt;，对应的开发工具 Xcode 8.3 版本号为 8E162。&lt;/p&gt;
&lt;p&gt;详细的更新日志见官网：&lt;a class="reference external" href="https://support.apple.com/zh-cn/HT201222"&gt;https://support.apple.com/zh-cn/HT201222&lt;/a&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;iOS 10.3 推出了包括使用“查找我的 iPhone”定位 AirPods 在内的全新功能，并提供了使用 Siri 进行支付、叫车以及与车载设备配合使用的更多途径。&lt;/p&gt;
&lt;p&gt;查找我的 iPhone&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;查看您 AirPods 的当前位置或最后已知位置&lt;/li&gt;
&lt;li&gt;在一侧或左右 AirPods 上同时播放声音，帮助您找到它们&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Siri&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;支持配合支付应用进行支付和检查账单状态&lt;/li&gt;
&lt;li&gt;支持配合叫车应用预约车辆&lt;/li&gt;
&lt;li&gt;支持配合车载应用检查油量及车锁状态，并可开灯和鸣喇叭&lt;/li&gt;
&lt;li&gt;支持印度超级板球联赛和国际板球理事会的板球运动比分和统计数据&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;CarPlay&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;状态栏增加了快捷键，方便访问上次使用的应用&lt;/li&gt;
&lt;li&gt;在 Apple Music 的“播放中”屏幕上即可访问“接着播放”及在播歌曲的专辑&lt;/li&gt;
&lt;li&gt;Apple Music 可提供每日精选播放列表和全新音乐类别&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其它改进和修复&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;只需租借一次，即可在您所有设备上欣赏 iTunes 电影&lt;/li&gt;
&lt;li&gt;全新“设置”整合了 Apple ID 帐户信息、设置和设备，集中一处供您查看&lt;/li&gt;
&lt;li&gt;在“地图”中显示的当前温度上使用 3D Touch 即可查看逐时天气&lt;/li&gt;
&lt;li&gt;现可支持在“地图”中搜索“停车位置”&lt;/li&gt;
&lt;li&gt;“日历”新增了删除不必要的邀请并报告为垃圾信息的功能&lt;/li&gt;
&lt;li&gt;“家庭”应用现支持使用带开关和按钮的配件来触发场景&lt;/li&gt;
&lt;li&gt;“家庭”应用现支持检查配件电池电量状态&lt;/li&gt;
&lt;li&gt;“播客”现支持使用 3D Touch 和在“今日” Widget 中访问最近更新的节目&lt;/li&gt;
&lt;li&gt;“播客”中的节目或单集现可通过“信息”共享，并提供完整的播放支持&lt;/li&gt;
&lt;li&gt;修复了还原“位置与隐私”后，可能造成“地图”不显示当前位置的问题&lt;/li&gt;
&lt;li&gt;改进了 VoiceOver 针对“电话”、Safari 和“邮件”的稳定性&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;有关 Apple 软件更新的安全性内容，请访问此网站：
&lt;a class="reference external" href="https://support.apple.com/zh-cn/HT201222"&gt;https://support.apple.com/zh-cn/HT201222&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;img alt="install on iPhone 6s" class="align-left" src="https://github.com/donly/note/blob/master/images/ios-10-3-release.PNG?raw=true" style="width: 320px; height: 568px;" /&gt;
&lt;p&gt;END&lt;/p&gt;
</content><category term="apple"></category></entry><entry><title>重置树莓派 Root 密码</title><link href="https://magicalboy.com/note/reset-raspberry-root-password.html" rel="alternate"></link><published>2017-03-23T10:25:00+08:00</published><updated>2017-03-23T10:25:00+08:00</updated><author><name>Don</name></author><id>tag:magicalboy.com,2017-03-23:/note/reset-raspberry-root-password.html</id><summary type="html">&lt;p&gt;自买了 Raspberry 3 之后一直以吃灰为主，比较少用难免会将用户密码忘记，于是有了此篇章。&lt;/p&gt;
&lt;p&gt;如果还有模糊印象，可以通过 &lt;code&gt;passwd pi&lt;/code&gt; 进行尝试。需要注意的是 &lt;code&gt;pi&lt;/code&gt; 用户的初始密码是：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;raspberry
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;找回密码&lt;/h2&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;关机取出内存卡，插到另一台电脑，Windows, Linux 或 macOS 都支持。&lt;/li&gt;
&lt;li&gt;编辑 &lt;code&gt;cmdline.txt&lt;/code&gt; 文件
在 &lt;code&gt;boot&lt;/code&gt; 分区下找到此文件，修改之前的内容为：&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;dwc_otg.lpm_enable&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="nv"&gt;console&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;serial0,115200 &lt;span class="nv"&gt;console&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;tty1 &lt;span class="nv"&gt;root&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/dev/mmcblk0p7 &lt;span class="nv"&gt;rootfstype&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;ext4 &lt;span class="nv"&gt;elevator&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;deadline fsck.repair&lt;span class="o"&gt;=&lt;/span&gt;yes rootwait …&lt;/pre&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;自买了 Raspberry 3 之后一直以吃灰为主，比较少用难免会将用户密码忘记，于是有了此篇章。&lt;/p&gt;
&lt;p&gt;如果还有模糊印象，可以通过 &lt;code&gt;passwd pi&lt;/code&gt; 进行尝试。需要注意的是 &lt;code&gt;pi&lt;/code&gt; 用户的初始密码是：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;raspberry
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;找回密码&lt;/h2&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;关机取出内存卡，插到另一台电脑，Windows, Linux 或 macOS 都支持。&lt;/li&gt;
&lt;li&gt;编辑 &lt;code&gt;cmdline.txt&lt;/code&gt; 文件
在 &lt;code&gt;boot&lt;/code&gt; 分区下找到此文件，修改之前的内容为：&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;dwc_otg.lpm_enable&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="nv"&gt;console&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;serial0,115200 &lt;span class="nv"&gt;console&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;tty1 &lt;span class="nv"&gt;root&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/dev/mmcblk0p7 &lt;span class="nv"&gt;rootfstype&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;ext4 &lt;span class="nv"&gt;elevator&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;deadline fsck.repair&lt;span class="o"&gt;=&lt;/span&gt;yes rootwait
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;将 &lt;code&gt;init=/bin/sh&lt;/code&gt; 追加到内容后面：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;dwc_otg.lpm_enable&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="nv"&gt;console&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;serial0,115200 &lt;span class="nv"&gt;console&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;tty1 &lt;span class="nv"&gt;root&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/dev/mmcblk0p7 &lt;span class="nv"&gt;rootfstype&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;ext4 &lt;span class="nv"&gt;elevator&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;deadline fsck.repair&lt;span class="o"&gt;=&lt;/span&gt;yes rootwait &lt;span class="nv"&gt;init&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/bin/sh
&lt;/pre&gt;&lt;/div&gt;
&lt;/blockquote&gt;
&lt;ol class="arabic" start="3"&gt;
&lt;li&gt;&lt;p class="first"&gt;重置密码&lt;/p&gt;
&lt;ol class="loweralpha"&gt;
&lt;li&gt;&lt;p class="first"&gt;将内存卡取出，重新插到树莓派。注意树莓派必须有键盘鼠标连接。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;当出现一个闪动的光标的时候，输入命令：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mount -rw -o remount /
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;然后输入修改密码命令：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;passwd pi
&lt;/pre&gt;&lt;/div&gt;
&lt;img alt="reset password" class="align-left" src="https://github.com/donly/note/blob/master/images/reaspberry_reset_password.jpg?raw=true" style="width: 320px; height: 240px;" /&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;密码修改成功，然后输入以下命令完成启动：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sync
&lt;span class="nb"&gt;exec&lt;/span&gt; /sbin/init
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;进入系统后可以确认密码修改是否成功，然后关机，关电源：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo halt
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;继续取出内存卡，将步骤 2 的 &lt;code&gt;init=/bin/sh&lt;/code&gt; 删除，重新插回树莓派正常使用。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;参考资料&lt;/h2&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.raspberrypi.org/forums/viewtopic.php?t=20397"&gt;Raspberry Pi • View topic - Reset OS password&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.raspberrypi-spy.co.uk/2014/08/how-to-reset-a-forgotten-raspberry-pi-password/"&gt;How To Reset A Forgotten Raspberry Pi Password&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content><category term="Linux"></category><category term="raspberry"></category></entry><entry><title>iOS 10.3 Beta 7</title><link href="https://magicalboy.com/note/ios-10-3-beta-7-update.html" rel="alternate"></link><published>2017-03-20T10:30:00+08:00</published><updated>2017-03-20T10:30:00+08:00</updated><author><name>Don</name></author><id>tag:magicalboy.com,2017-03-20:/note/ios-10-3-beta-7-update.html</id><summary type="html">&lt;p&gt;今天苹果前几天又发布了 iOS 10.3 Beta 7 更新，距离上个 Beta 版本才 3 天左右。&lt;/p&gt;
&lt;p&gt;更新后版本号为：&lt;code&gt;10.3 (14E5277a)&lt;/code&gt;，详细的更新日志见官网：&lt;a class="reference external" href="http://adcdownload.apple.com/Documentation/Beta_Release_Notes_Mar_16_2017/iOS_10.3_beta_7_Release_Notes.pdf"&gt;iOS Release Notes for iOS 10.3 beta 7&lt;/a&gt;。&lt;/p&gt;
&lt;img alt="install on iPhone 6s" class="align-left" src="https://github.com/donly/note/blob/master/images/ios-10-3-beta-7.PNG?raw=true" style="width: 320px; height: 568px;" /&gt;
&lt;p&gt;iPhone 6s 更新后没有发现有什么明显不同。&lt;/p&gt;
&lt;p&gt;关于 10.3 Beta 补充几点：&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;10.3 Beta 版开机时按住 Home 和 音量加，可进入诊断模式。&lt;/li&gt;
&lt;li&gt;关机时少了中间的加载动画，即菊花。&lt;/li&gt;
&lt;li&gt;增加了对 32 位应用的警告提示：此应用在未来的 iOS 版本下将无法使用 …&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;p&gt;今天苹果前几天又发布了 iOS 10.3 Beta 7 更新，距离上个 Beta 版本才 3 天左右。&lt;/p&gt;
&lt;p&gt;更新后版本号为：&lt;code&gt;10.3 (14E5277a)&lt;/code&gt;，详细的更新日志见官网：&lt;a class="reference external" href="http://adcdownload.apple.com/Documentation/Beta_Release_Notes_Mar_16_2017/iOS_10.3_beta_7_Release_Notes.pdf"&gt;iOS Release Notes for iOS 10.3 beta 7&lt;/a&gt;。&lt;/p&gt;
&lt;img alt="install on iPhone 6s" class="align-left" src="https://github.com/donly/note/blob/master/images/ios-10-3-beta-7.PNG?raw=true" style="width: 320px; height: 568px;" /&gt;
&lt;p&gt;iPhone 6s 更新后没有发现有什么明显不同。&lt;/p&gt;
&lt;p&gt;关于 10.3 Beta 补充几点：&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;10.3 Beta 版开机时按住 Home 和 音量加，可进入诊断模式。&lt;/li&gt;
&lt;li&gt;关机时少了中间的加载动画，即菊花。&lt;/li&gt;
&lt;li&gt;增加了对 32 位应用的警告提示：此应用在未来的 iOS 版本下将无法使用。应用开发者需要更新此应用以改进兼容性。&lt;/li&gt;
&lt;/ol&gt;
</content><category term="apple"></category></entry><entry><title>2017年3月 Android 安全补丁推送</title><link href="https://magicalboy.com/note/android-march-2017-upgrade.html" rel="alternate"></link><published>2017-03-17T10:30:00+08:00</published><updated>2017-03-17T10:30:00+08:00</updated><author><name>Don</name></author><id>tag:magicalboy.com,2017-03-17:/note/android-march-2017-upgrade.html</id><summary type="html">&lt;p&gt;Nexus 6 终于有推送更新了，结果不是 7.1，而是安全补丁。&lt;/p&gt;
&lt;p&gt;对此我有两个疑问：&lt;/p&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p class="first"&gt;为什么我的 Nexus 6 一直等不到 7.1 的 OTA 更新推送呢？&lt;/p&gt;
&lt;p&gt;根据 &lt;a class="reference external" href="https://android-developers.googleblog.com/2016/12/welcoming-android-711-nougat.html"&gt;Welcoming Android 7.1.1 Nougat | Android Developers Blog&lt;/a&gt;，Android 7.1.1 is an incremental release that builds on the features already available on Pixel and Pixel XL devices.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;为什么更新完补丁后，点击系统更新会出现 …&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;p&gt;Nexus 6 终于有推送更新了，结果不是 7.1，而是安全补丁。&lt;/p&gt;
&lt;p&gt;对此我有两个疑问：&lt;/p&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p class="first"&gt;为什么我的 Nexus 6 一直等不到 7.1 的 OTA 更新推送呢？&lt;/p&gt;
&lt;p&gt;根据 &lt;a class="reference external" href="https://android-developers.googleblog.com/2016/12/welcoming-android-711-nougat.html"&gt;Welcoming Android 7.1.1 Nougat | Android Developers Blog&lt;/a&gt;，Android 7.1.1 is an incremental release that builds on the features already available on Pixel and Pixel XL devices.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;为什么更新完补丁后，点击系统更新会出现 FC？&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;img alt="install on Nexus 6" class="align-left" src="https://github.com/donly/note/blob/master/images/android_20170317-082545.png?raw=true" style="width: 320px; height: 568px;" /&gt;
&lt;p&gt;难道要重新刷机了吗，现在的系统虽然没有 Root，但也用不了 Android Pay，因为 bootloader 被解锁过。&lt;/p&gt;
&lt;p&gt;生命果然在于折腾。&lt;/p&gt;
</content><category term="Android"></category></entry><entry><title>域名备案通知</title><link href="https://magicalboy.com/note/domain_filing.html" rel="alternate"></link><published>2017-03-17T09:30:00+08:00</published><updated>2017-03-17T09:30:00+08:00</updated><author><name>Don</name></author><id>tag:magicalboy.com,2017-03-17:/note/domain_filing.html</id><summary type="html">&lt;p&gt;一大早就收到这样一条信息：&lt;/p&gt;
&lt;blockquote&gt;
【阿里云】尊敬的****：按照工信部2017年全面域名实名认证的要求，目前阿里云已接到相关注册局通知，为保障您的网站及邮箱能够正常访问，请您务必尽快完成域名实名认证。同时提醒您：1、截止2017年5月31日，未完成实名认证的.com/.net域名将被注册局暂停解析；2、截止2017年5月15日，未完成实名认证的.top/.xyz/.vip /.club/.shop/.wang/.ren域名将被注册局暂停解析。另外，相关注册局将在4月1日左右对历史域名的认证情况进行二次审核。更多实名认证资讯请查看官网公告&lt;/blockquote&gt;
&lt;p&gt;看来只有将域名转出保平安了，且行且珍惜。&lt;/p&gt;
</summary><content type="html">&lt;p&gt;一大早就收到这样一条信息：&lt;/p&gt;
&lt;blockquote&gt;
【阿里云】尊敬的****：按照工信部2017年全面域名实名认证的要求，目前阿里云已接到相关注册局通知，为保障您的网站及邮箱能够正常访问，请您务必尽快完成域名实名认证。同时提醒您：1、截止2017年5月31日，未完成实名认证的.com/.net域名将被注册局暂停解析；2、截止2017年5月15日，未完成实名认证的.top/.xyz/.vip /.club/.shop/.wang/.ren域名将被注册局暂停解析。另外，相关注册局将在4月1日左右对历史域名的认证情况进行二次审核。更多实名认证资讯请查看官网公告&lt;/blockquote&gt;
&lt;p&gt;看来只有将域名转出保平安了，且行且珍惜。&lt;/p&gt;
</content></entry><entry><title>iOS 10.3 Beta6</title><link href="https://magicalboy.com/note/ios-10-3-beta-install.html" rel="alternate"></link><published>2017-03-14T09:30:00+08:00</published><updated>2017-03-14T09:30:00+08:00</updated><author><name>Don</name></author><id>tag:magicalboy.com,2017-03-14:/note/ios-10-3-beta-install.html</id><summary type="html">&lt;p&gt;今天苹果公司发布了 iOS 10.3 Beta6 更新。更新后版本号为：&lt;code&gt;10.3 (14E5273a)&lt;/code&gt;，更新如下：&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;相对于上一个版本 Beta5，比较重要一点更新就是没有通过 MFi 认证的 Lightning 会提示：&lt;code&gt;此 iPhone 不支持此配件&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;对系统底层进行了优化，当用户完成升级后，iOS 设备的文件系统也更新至了全新的苹果文件系统 &lt;code&gt;APFS&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;苹果还计划在 iOS 10.3 中对 App Store 进行一些功能调整，允许开发者直接回复应用的评价，这点早已在 Google Play 实现。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;详细的更新日志见官网：&lt;a class="reference external" href="http://adcdownload.apple.com/Documentation/Beta_Release_Notes_Mar_13_2017/iOS_10.3_beta_6_Release_Notes.pdf"&gt;iOS Release Notes for iOS 10.3 beta 6&lt;/a&gt;。&lt;/p&gt;
&lt;div class="section" id="beta-ios"&gt;
&lt;h2&gt;安装 …&lt;/h2&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;今天苹果公司发布了 iOS 10.3 Beta6 更新。更新后版本号为：&lt;code&gt;10.3 (14E5273a)&lt;/code&gt;，更新如下：&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;相对于上一个版本 Beta5，比较重要一点更新就是没有通过 MFi 认证的 Lightning 会提示：&lt;code&gt;此 iPhone 不支持此配件&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;对系统底层进行了优化，当用户完成升级后，iOS 设备的文件系统也更新至了全新的苹果文件系统 &lt;code&gt;APFS&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;苹果还计划在 iOS 10.3 中对 App Store 进行一些功能调整，允许开发者直接回复应用的评价，这点早已在 Google Play 实现。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;详细的更新日志见官网：&lt;a class="reference external" href="http://adcdownload.apple.com/Documentation/Beta_Release_Notes_Mar_13_2017/iOS_10.3_beta_6_Release_Notes.pdf"&gt;iOS Release Notes for iOS 10.3 beta 6&lt;/a&gt;。&lt;/p&gt;
&lt;div class="section" id="beta-ios"&gt;
&lt;h2&gt;安装 Beta 版 iOS&lt;/h2&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;需要 iOS 开发者账号，登陆打开 &lt;a class="reference external" href="https://developer.apple.com/download/"&gt;https://developer.apple.com/download/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;下载 &lt;code&gt;iOS_10_beta_Configuration_Profile.mobileconfig&lt;/code&gt; 并发送到需要安装 Beta 版系统的 iOS 设备上，或者想办法让手机访问。&lt;/li&gt;
&lt;li&gt;在 iOS 设备上安装此描述文件。&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;img alt="install on iPhone 6s" class="align-left" src="https://github.com/donly/note/blob/master/images/ios-10-3-beta-install-01.PNG?raw=true" style="width: 320px; height: 568px;" /&gt;
&lt;/blockquote&gt;
&lt;ol class="arabic simple" start="4"&gt;
&lt;li&gt;接着就可以通过系统设置-通用-软件更新来进行 OTA 升级安装了。&lt;/li&gt;
&lt;li&gt;如果想恢复到之前的系统，必须下载恢复固件，使用 iTunes 来还原。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;最重要一点：&lt;strong&gt;更新之前请先做好备份，数据无价！&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
</content><category term="apple"></category></entry><entry><title>Fastlane 插件开发</title><link href="https://magicalboy.com/note/fastlane_plugin.html" rel="alternate"></link><published>2016-12-21T09:39:00+08:00</published><updated>2016-12-21T09:39:00+08:00</updated><author><name>Don</name></author><id>tag:magicalboy.com,2016-12-21:/note/fastlane_plugin.html</id><summary type="html">&lt;p&gt;&lt;strong&gt;能用计算机自动处理的事情，为什么还要手动重复劳动。&lt;/strong&gt;&lt;/p&gt;
&lt;img alt="fastlane" src="https://docs.fastlane.tools/img/fastlane_text.png" /&gt;
&lt;p&gt;&lt;a class="reference external" href="https://fastlane.tools/"&gt;Fastlane&lt;/a&gt; 是一个优秀的 CI 工具，移动开发少不了它。&lt;/p&gt;
&lt;blockquote&gt;
The easiest way to automate building and releasing your iOS and Android apps&lt;/blockquote&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;创建插件&lt;/h2&gt;
&lt;p&gt;详细步骤：&lt;a class="reference external" href="https://docs.fastlane.tools/plugins/create-plugin/"&gt;https://docs.fastlane.tools/plugins/create-plugin/&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;开发&amp;amp;调试&lt;/h2&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;添加到项目 &lt;code&gt;Pluginfile&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Autogenerated by fastlane&lt;/span&gt;
&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;span class="c1"&gt;# Ensure this file is checked in to source control!&lt;/span&gt;

&lt;span class="c1"&gt;#gem &amp;#39;fastlane-plugin-ftp&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;gem&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;fastlane-plugin-ftp&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:path&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;~/Documents …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;&lt;strong&gt;能用计算机自动处理的事情，为什么还要手动重复劳动。&lt;/strong&gt;&lt;/p&gt;
&lt;img alt="fastlane" src="https://docs.fastlane.tools/img/fastlane_text.png" /&gt;
&lt;p&gt;&lt;a class="reference external" href="https://fastlane.tools/"&gt;Fastlane&lt;/a&gt; 是一个优秀的 CI 工具，移动开发少不了它。&lt;/p&gt;
&lt;blockquote&gt;
The easiest way to automate building and releasing your iOS and Android apps&lt;/blockquote&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;创建插件&lt;/h2&gt;
&lt;p&gt;详细步骤：&lt;a class="reference external" href="https://docs.fastlane.tools/plugins/create-plugin/"&gt;https://docs.fastlane.tools/plugins/create-plugin/&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;开发&amp;amp;调试&lt;/h2&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;添加到项目 &lt;code&gt;Pluginfile&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Autogenerated by fastlane&lt;/span&gt;
&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;span class="c1"&gt;# Ensure this file is checked in to source control!&lt;/span&gt;

&lt;span class="c1"&gt;#gem &amp;#39;fastlane-plugin-ftp&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;gem&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;fastlane-plugin-ftp&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:path&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;~/Documents/Workspace/Project/fastlane-ftp-plugin&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ol class="arabic simple" start="2"&gt;
&lt;li&gt;以开发模式安装插件：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ bundle install --with development
&lt;/pre&gt;&lt;/div&gt;
&lt;ol class="arabic simple" start="3"&gt;
&lt;li&gt;添加到项目 &lt;code&gt;Fastfile&lt;/code&gt; 的 Action 中&lt;/li&gt;
&lt;li&gt;使用详细输出模式运行：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;bundle &lt;span class="nb"&gt;exec&lt;/span&gt; fastlane &lt;span class="o"&gt;[&lt;/span&gt;action&lt;span class="o"&gt;]&lt;/span&gt; --verbose
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
</content><category term="iOS"></category><category term="Android"></category></entry><entry><title>Ruby 快速入门</title><link href="https://magicalboy.com/note/ruby-quickstart.html" rel="alternate"></link><published>2016-12-21T09:39:00+08:00</published><updated>2016-12-21T09:39:00+08:00</updated><author><name>Don</name></author><id>tag:magicalboy.com,2016-12-21:/note/ruby-quickstart.html</id><summary type="html">&lt;div class="contents topic" id="id1"&gt;
&lt;p class="topic-title first"&gt;目录&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id2" id="id16"&gt;Ruby&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id4" id="id17"&gt;交互&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#puts" id="id18"&gt;puts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id5" id="id19"&gt;计算器功能&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#modules" id="id20"&gt;Modules&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id6" id="id21"&gt;函数&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id7" id="id22"&gt;在字符串中预留位置&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id8" id="id23"&gt;类&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id9" id="id24"&gt;面向对象&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id10" id="id25"&gt;访问属性&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id11" id="id26"&gt;注释&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id12" id="id27"&gt;更强大的类&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id13" id="id28"&gt;循环，迭代&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id14" id="id29"&gt;代码块&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id15" id="id30"&gt;让脚本跑起来&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;这是一个快速入门笔记，来自官网的 &lt;a class="reference external" href="https://www.ruby-lang.org/zh_cn/documentation/quickstart/"&gt;Ruby in Twenty Minutes&lt;/a&gt;。&lt;/p&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id16"&gt;Ruby&lt;/a&gt;&lt;/h2&gt;
&lt;blockquote&gt;
A dynamic, open source programming language with a focus on simplicity and productivity. It has an elegant syntax that is natural to read and easy to …&lt;/blockquote&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="contents topic" id="id1"&gt;
&lt;p class="topic-title first"&gt;目录&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id2" id="id16"&gt;Ruby&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id4" id="id17"&gt;交互&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#puts" id="id18"&gt;puts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id5" id="id19"&gt;计算器功能&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#modules" id="id20"&gt;Modules&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id6" id="id21"&gt;函数&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id7" id="id22"&gt;在字符串中预留位置&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id8" id="id23"&gt;类&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id9" id="id24"&gt;面向对象&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id10" id="id25"&gt;访问属性&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id11" id="id26"&gt;注释&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id12" id="id27"&gt;更强大的类&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id13" id="id28"&gt;循环，迭代&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id14" id="id29"&gt;代码块&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id15" id="id30"&gt;让脚本跑起来&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;这是一个快速入门笔记，来自官网的 &lt;a class="reference external" href="https://www.ruby-lang.org/zh_cn/documentation/quickstart/"&gt;Ruby in Twenty Minutes&lt;/a&gt;。&lt;/p&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id16"&gt;Ruby&lt;/a&gt;&lt;/h2&gt;
&lt;blockquote&gt;
A dynamic, open source programming language with a focus on simplicity and productivity. It has an elegant syntax that is natural to read and easy to write.&lt;/blockquote&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.ruby-lang.org"&gt;Ruby&lt;/a&gt; 是一种开源的面向对象程序设计的服务器端脚本语言，在20 世纪90 年代中期由日本的松本行弘（まつもとゆきひろ/Yukihiro Matsumoto）设计并开发。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id17"&gt;交互&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;跟 Python 一样有交互界面，在终端使用 &lt;code&gt;irb&lt;/code&gt; 打开。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ irb
irb&lt;span class="o"&gt;(&lt;/span&gt;main&lt;span class="o"&gt;)&lt;/span&gt;:001:0&amp;gt; &lt;span class="s2"&gt;&amp;quot;Hello World&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;=&lt;/span&gt;&amp;gt; &lt;span class="s2"&gt;&amp;quot;Hello World&amp;quot;&lt;/span&gt;
irb&lt;span class="o"&gt;(&lt;/span&gt;main&lt;span class="o"&gt;)&lt;/span&gt;:002:0&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="puts"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id18"&gt;puts&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;puts&lt;/code&gt; 是一个基本的命令，用于打印字符串，返回结果为 &lt;code&gt;nil&lt;/code&gt;。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;irb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="mo"&gt;002&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Hello World&amp;quot;&lt;/span&gt;
&lt;span class="no"&gt;Hello&lt;/span&gt; &lt;span class="no"&gt;World&lt;/span&gt;
&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kp"&gt;nil&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id5"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id19"&gt;计算器功能&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;IRB 就是一个基础计算器&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;irb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="mo"&gt;003&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;
&lt;span class="n"&gt;irb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="mo"&gt;004&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;
&lt;span class="n"&gt;irb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="mo"&gt;005&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="no"&gt;Math&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sqrt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="modules"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id20"&gt;Modules&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;上面的 Math 是一个内置的数学 module。Modules 主要有两个角色，这里扮演的角度是是将功能相似的方法分组到同一名字下。&lt;/p&gt;
&lt;p&gt;接着是点运算符，用来告诉一个接收者它所要接受的信息。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;irb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="mo"&gt;006&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;
&lt;span class="n"&gt;irb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="mo"&gt;007&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;
&lt;span class="n"&gt;irb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="mo"&gt;00&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="no"&gt;Math&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sqrt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id6"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id21"&gt;函数&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;定义函数的关键字是 &lt;cite&gt;def&lt;/cite&gt; 函数体以 &lt;cite&gt;end&lt;/cite&gt; 结束。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;irb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="mo"&gt;00&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;h&lt;/span&gt;
&lt;span class="n"&gt;irb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="mo"&gt;010&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Hello World!&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;irb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="mo"&gt;011&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kp"&gt;nil&lt;/span&gt;
&lt;span class="n"&gt;irb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="mo"&gt;012&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt;
&lt;span class="no"&gt;Hello&lt;/span&gt; &lt;span class="no"&gt;World&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;
&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kp"&gt;nil&lt;/span&gt;
&lt;span class="n"&gt;irb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="mo"&gt;013&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="no"&gt;Hello&lt;/span&gt; &lt;span class="no"&gt;World&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;
&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kp"&gt;nil&lt;/span&gt;
&lt;span class="n"&gt;irb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="mo"&gt;014&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;函数的周期简短而又频繁，定义一次，使用多次。函数调用的参数是可选的，如果没有参数，调用时括号可省略。&lt;/p&gt;
&lt;p&gt;让函数接收参数：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;irb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="mo"&gt;014&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;h&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;irb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="mo"&gt;015&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Hello &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="nb"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;!&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;irb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="mo"&gt;016&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kp"&gt;nil&lt;/span&gt;
&lt;span class="n"&gt;irb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="mo"&gt;017&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Don&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="no"&gt;Hello&lt;/span&gt; &lt;span class="no"&gt;Don&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;
&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kp"&gt;nil&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id7"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id22"&gt;在字符串中预留位置&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;#{name}&lt;/code&gt;，Ruby 中的在字符串中插入信息，有点类似 Swift 中的语法：print(&amp;quot;(name)&amp;quot;)。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;irb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="mo"&gt;01&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;h&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;World&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;irb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="mo"&gt;01&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Hello &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="nb"&gt;name&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;capitalize&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;!&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;irb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="mo"&gt;020&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kp"&gt;nil&lt;/span&gt;
&lt;span class="n"&gt;irb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="mo"&gt;021&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt;
&lt;span class="no"&gt;Hello&lt;/span&gt; &lt;span class="no"&gt;World&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;
&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kp"&gt;nil&lt;/span&gt;
&lt;span class="n"&gt;irb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="mo"&gt;022&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;chris&amp;quot;&lt;/span&gt;
&lt;span class="no"&gt;Hello&lt;/span&gt; &lt;span class="no"&gt;Chris&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;
&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kp"&gt;nil&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可以看到有参数的时候，函数的括号也是可以省略的。而且还可以定义函数的默认参数。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id8"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id23"&gt;类&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;使用 &lt;cite&gt;class&lt;/cite&gt; 关键字定义一个新的类。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;irb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="mo"&gt;023&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Greeter&lt;/span&gt;
&lt;span class="n"&gt;irb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="mo"&gt;024&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;   &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;World&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;irb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="mo"&gt;025&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;     &lt;span class="vi"&gt;@name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;name&lt;/span&gt;
&lt;span class="n"&gt;irb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="mo"&gt;026&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;   &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="n"&gt;irb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="mo"&gt;027&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;   &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;say_hi&lt;/span&gt;
&lt;span class="n"&gt;irb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="mo"&gt;02&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;     &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Hi &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="vi"&gt;@name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;!&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;irb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="mo"&gt;02&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;   &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="n"&gt;irb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="mo"&gt;030&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;   &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;say_bye&lt;/span&gt;
&lt;span class="n"&gt;irb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="mo"&gt;031&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;     &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Bye &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="vi"&gt;@name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;, come back soon.&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;irb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="mo"&gt;032&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;   &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="n"&gt;irb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="mo"&gt;033&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kp"&gt;nil&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;需要注意的是，这里的 &lt;code&gt;&amp;#64;name&lt;/code&gt; 表示实例变量。&lt;/p&gt;
&lt;p&gt;既然定义了类，我们需要创建一个对象来使用它：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;irb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="mo"&gt;034&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Greeter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Pat&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="c1"&gt;#&amp;lt;Greeter:0x007fc113857a60 @name=&amp;quot;Pat&amp;quot;&amp;gt;&lt;/span&gt;
&lt;span class="n"&gt;irb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="mo"&gt;035&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;say_hi&lt;/span&gt;
&lt;span class="no"&gt;Hi&lt;/span&gt; &lt;span class="no"&gt;Pat&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;
&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kp"&gt;nil&lt;/span&gt;
&lt;span class="n"&gt;irb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="mo"&gt;036&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;say_bye&lt;/span&gt;
&lt;span class="no"&gt;Bye&lt;/span&gt; &lt;span class="no"&gt;Pat&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;come&lt;/span&gt; &lt;span class="n"&gt;back&lt;/span&gt; &lt;span class="n"&gt;soon&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kp"&gt;nil&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;创建了对象 g 后，名字属性有了值 Pat，能不能通过对象直接访问呢？&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;irb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="mo"&gt;037&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vi"&gt;@name&lt;/span&gt;
&lt;span class="ss"&gt;SyntaxError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;irb&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="mi"&gt;37&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;syntax&lt;/span&gt; &lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;unexpected&lt;/span&gt; &lt;span class="n"&gt;tIVAR&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;expecting&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;(&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;from&lt;/span&gt; &lt;span class="sr"&gt;/usr/&lt;/span&gt;&lt;span class="n"&gt;bin&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="ss"&gt;irb&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="ss"&gt;:in&lt;/span&gt; &lt;span class="sb"&gt;`&amp;lt;main&amp;gt;&amp;#39;&lt;/span&gt;
&lt;span class="sb"&gt;irb(main):038:0&amp;gt; g.name&lt;/span&gt;
&lt;span class="sb"&gt;NoMethodError: undefined method `&lt;/span&gt;&lt;span class="nb"&gt;name&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39; for #&amp;lt;Greeter:0x007fc113857a60 @name=&amp;quot;Pat&amp;quot;&amp;gt;&lt;/span&gt;
&lt;span class="s1"&gt;from (irb):38&lt;/span&gt;
&lt;span class="s1"&gt;from /usr/bin/irb:12:in `&amp;lt;main&amp;gt;&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;很明显是不行的！&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id9"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id24"&gt;面向对象&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;实例变量是被隐藏起来的，符合面向对象的设计，将内部属性保护起来。&lt;/p&gt;
&lt;p&gt;但也并非完全隐藏起来，可以通过检查对象看到：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;irb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="mo"&gt;03&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="no"&gt;Greeter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;instance_methods&lt;/span&gt;
&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:say_hi&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:say_bye&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:nil?&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:===&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;=~&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;!~&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:eql?&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:hash&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:&amp;lt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:class&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:singleton_class&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:clone&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:dup&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:taint&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:tainted?&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:untaint&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:untrust&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:untrusted?&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:trust&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:freeze&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:frozen?&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:to_s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:inspect&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:methods&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:singleton_methods&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:protected_methods&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:private_methods&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:public_methods&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:instance_variables&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:instance_variable_get&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:instance_variable_set&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:instance_variable_defined?&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:remove_instance_variable&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:instance_of?&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:kind_of?&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:is_a?&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:tap&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:send&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:public_send&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:respond_to?&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:extend&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:display&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:method&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:public_method&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:define_singleton_method&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:object_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:to_enum&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:enum_for&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:==&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:equal?&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:instance_eval&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:instance_exec&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:__send__&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:__id__&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我们定义的只有两个，这里列出的是 Greeter 对象所有的函数，即包括了它所继承的类的函数。&lt;/p&gt;
&lt;p&gt;可以通过 false 参数，列出不包括父类的函数。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;irb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="mo"&gt;040&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="no"&gt;Greeter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;instance_methods&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kp"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:say_hi&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:say_bye&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;接着使用父类的 &lt;cite&gt;respond_to&lt;/cite&gt; 方法来测试 Greeter 对象 g 会对哪些函数作出回应：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;irb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="mo"&gt;041&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;respond_to?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kp"&gt;false&lt;/span&gt;
&lt;span class="n"&gt;irb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="mo"&gt;042&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;respond_to?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;say_hi&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kp"&gt;true&lt;/span&gt;
&lt;span class="n"&gt;irb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="mo"&gt;043&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;respond_to?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;to_s&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kp"&gt;true&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可见 &lt;cite&gt;name&lt;/cite&gt; 还是隐藏的。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id10"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id25"&gt;访问属性&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;使用 &lt;code&gt;attr_accessor&lt;/code&gt; 让属性变成可访问。实际会自动生成两个新函数，一个用于读取，一个用于赋值。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;irb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="mo"&gt;05&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Greeter&lt;/span&gt;
&lt;span class="n"&gt;irb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="mo"&gt;05&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;   &lt;span class="kp"&gt;attr_accessor&lt;/span&gt; &lt;span class="ss"&gt;:name&lt;/span&gt;
&lt;span class="n"&gt;irb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="mo"&gt;060&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kp"&gt;nil&lt;/span&gt;
&lt;span class="n"&gt;irb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="mo"&gt;061&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Greeter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Andy&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="c1"&gt;#&amp;lt;Greeter:0x007fc116acf100 @name=&amp;quot;Andy&amp;quot;&amp;gt;&lt;/span&gt;
&lt;span class="n"&gt;irb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="mo"&gt;062&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;respond_to?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kp"&gt;true&lt;/span&gt;
&lt;span class="n"&gt;irb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="mo"&gt;063&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;respond_to?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;name=&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kp"&gt;true&lt;/span&gt;
&lt;span class="n"&gt;irb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="mo"&gt;064&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="no"&gt;Greeter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;instance_methods&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kp"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:say_hi&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:say_bye&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:name&lt;/span&gt;&lt;span class="o"&gt;=]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id11"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id26"&gt;注释&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;使用 &lt;code&gt;#&lt;/code&gt; 号注释，当前行的 # 号后面的内容是注释内容。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id12"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id27"&gt;更强大的类&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;这次不再使用互动的 Ruby 解析器 IRB，而是将代码写到文件里。&lt;/p&gt;
&lt;p&gt;输入 &lt;cite&gt;exit&lt;/cite&gt; 或 Control-D 退出 IRB。&lt;/p&gt;
&lt;p&gt;然后新那家一个文件 &lt;code&gt;MegaGreeter.rb&lt;/code&gt;，输入以下内容：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/ur/bin/env ruby&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MegaGreeter&lt;/span&gt;
  &lt;span class="kp"&gt;attr_accessor&lt;/span&gt; &lt;span class="ss"&gt;:names&lt;/span&gt;

  &lt;span class="c1"&gt;# Create the object&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;World&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="vi"&gt;@names&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;names&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="c1"&gt;# Say hi to everybody&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;say_hi&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vi"&gt;@names&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nil?&lt;/span&gt;
      &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;...&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;elsif&lt;/span&gt; &lt;span class="vi"&gt;@names&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;respond_to?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;each&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="c1"&gt;# @names is a list of some kind, iterate!&lt;/span&gt;
      &lt;span class="vi"&gt;@names&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;each&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nb"&gt;name&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
        &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Hello &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="nb"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;!&amp;quot;&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
      &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Hello &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="vi"&gt;@names&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;!&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="c1"&gt;# Say bye to everybody&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;say_bye&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vi"&gt;@names&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nil?&lt;/span&gt;
      &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;...&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;elsif&lt;/span&gt; &lt;span class="vi"&gt;@names&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;respond_to?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;join&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="c1"&gt;# Join the list elements with commas&lt;/span&gt;
      &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Goodbye &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="vi"&gt;@names&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;, &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;. Come back soon!&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
      &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Goodbye &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="vi"&gt;@names&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;. Come back soon!&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;__FILE__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="vg"&gt;$0&lt;/span&gt;
  &lt;span class="n"&gt;mg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;MegaGreeter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;
  &lt;span class="n"&gt;mg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;say_hi&lt;/span&gt;
  &lt;span class="n"&gt;mg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;say_bye&lt;/span&gt;

  &lt;span class="c1"&gt;# Change name to be &amp;quot;Zeke&amp;quot;&lt;/span&gt;
  &lt;span class="n"&gt;mg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;names&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Zeke&amp;quot;&lt;/span&gt;
  &lt;span class="n"&gt;mg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;say_hi&lt;/span&gt;
  &lt;span class="n"&gt;mg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;say_bye&lt;/span&gt;

  &lt;span class="c1"&gt;# Change the name to an array of names&lt;/span&gt;
  &lt;span class="n"&gt;mg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;names&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Albert&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Brenda&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Charles&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Dave&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Engelbert&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
  &lt;span class="n"&gt;mg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;say_hi&lt;/span&gt;
  &lt;span class="n"&gt;mg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;say_bye&lt;/span&gt;

  &lt;span class="c1"&gt;# Change to nil&lt;/span&gt;
  &lt;span class="n"&gt;mg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;names&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;nil&lt;/span&gt;
  &lt;span class="n"&gt;mg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;say_hi&lt;/span&gt;
  &lt;span class="n"&gt;mg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;say_bye&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;使用命令 &lt;code&gt;ruby MegaGreeter.rb&lt;/code&gt; 运行：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ruby MegaGreeter.rb
...
...
Hello Zeke!
Goodbye Zeke. Come back soon!
Hello Albert!
Hello Brenda!
Hello Charles!
Hello Dave!
Hello Engelbert!
Goodbye Albert, Brenda, Charles, Dave, Engelbert. Come back soon!
...
...
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id13"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id28"&gt;循环，迭代&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;先判断 &amp;#64;names 对象能否回应 &lt;code&gt;each&lt;/code&gt; 函数，如果可以被迭代，使用 &lt;code&gt;do&lt;/code&gt; 后面的代码块进行迭代处理。&lt;/p&gt;
&lt;p&gt;代码块定义在两个 &lt;code&gt;|&lt;/code&gt; 符号之间。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id14"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id29"&gt;代码块&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;“如果它走起来像鸭子，叫起来像鸭子， 那它一定是鸭子”。&lt;/p&gt;
&lt;blockquote&gt;
这种思想的好处就是不限制函数所支持的参数类别。 如果有人写了一个新的类，只要它像其他列表类一样回应 &lt;code&gt;join&lt;/code&gt; 这个函数， 那它就可以被相应的其他函数所使用。&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class="section" id="id15"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id30"&gt;让脚本跑起来&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;调用这个类的小技术在于:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;__FILE__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="vg"&gt;$0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;__FILE__&lt;/code&gt; 是一个魔法值，它存有现在运行的脚本文件的名字。&lt;/p&gt;
&lt;p&gt;$0 是启动脚本的名字。&lt;/p&gt;
&lt;p&gt;这句代码的意思是 “如果这是启动脚本的话…”。这允许代码作为库调用的时候不运行启动代码，而在作为执行脚本的时候调用启动代码。&lt;/p&gt;
&lt;p&gt;EOF.&lt;/p&gt;
&lt;/div&gt;
</content><category term="ruby"></category></entry><entry><title>超级玛丽酷跑</title><link href="https://magicalboy.com/note/super_mario_run.html" rel="alternate"></link><published>2016-12-16T00:00:00+08:00</published><updated>2016-12-16T00:00:00+08:00</updated><author><name>Don</name></author><id>tag:magicalboy.com,2016-12-16:/note/super_mario_run.html</id><summary type="html">&lt;img alt="Super Mario" src="https://supermariorun.com/img/index/sec02_img06.png" /&gt;
&lt;p&gt;超级玛丽最早印象是一款经典的 NES 游戏，儿时就开始玩啦。今天任天堂终于发布了 iOS 版本，叫超级玛丽酷跑。&lt;/p&gt;
&lt;blockquote&gt;
『超級瑪利歐酷跑』是一款瑪利歐為救出被庫巴抓走的碧姬公主，以及讓遭到庫巴侵略的蘑菇王國恢復原狀而在全世界奔走的遊戲。&lt;/blockquote&gt;
&lt;p&gt;具体介绍请点击官网：&lt;a class="reference external" href="https://supermariorun.com/zh-tw/about.html"&gt;SUPER MARIO RUN&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;主要特点有：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;游戏支持 iOS 8 以及以上平台，大小 173 MB 左右。游戏开始后才下载关卡资源（On Demand Resources 特性）。&lt;/li&gt;
&lt;li&gt;游戏下载免费，有而且只有一个内购消费，价格 9.9 USD。&lt;/li&gt;
&lt;li&gt;游戏访问速度快，手机 4G 可玩。&lt;/li&gt;
&lt;li&gt;可以连接任天堂的账号同步游戏资料。&lt;/li&gt;
&lt;li&gt;拉力模式可以同朋友或全球玩家比赛。&lt;/li&gt;
&lt;li&gt;支持全年龄段。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;不好的地方：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;目前仅支持 iOS 平台，Android 平台将在 2017 年发布 …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;img alt="Super Mario" src="https://supermariorun.com/img/index/sec02_img06.png" /&gt;
&lt;p&gt;超级玛丽最早印象是一款经典的 NES 游戏，儿时就开始玩啦。今天任天堂终于发布了 iOS 版本，叫超级玛丽酷跑。&lt;/p&gt;
&lt;blockquote&gt;
『超級瑪利歐酷跑』是一款瑪利歐為救出被庫巴抓走的碧姬公主，以及讓遭到庫巴侵略的蘑菇王國恢復原狀而在全世界奔走的遊戲。&lt;/blockquote&gt;
&lt;p&gt;具体介绍请点击官网：&lt;a class="reference external" href="https://supermariorun.com/zh-tw/about.html"&gt;SUPER MARIO RUN&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;主要特点有：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;游戏支持 iOS 8 以及以上平台，大小 173 MB 左右。游戏开始后才下载关卡资源（On Demand Resources 特性）。&lt;/li&gt;
&lt;li&gt;游戏下载免费，有而且只有一个内购消费，价格 9.9 USD。&lt;/li&gt;
&lt;li&gt;游戏访问速度快，手机 4G 可玩。&lt;/li&gt;
&lt;li&gt;可以连接任天堂的账号同步游戏资料。&lt;/li&gt;
&lt;li&gt;拉力模式可以同朋友或全球玩家比赛。&lt;/li&gt;
&lt;li&gt;支持全年龄段。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;不好的地方：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;目前仅支持 iOS 平台，Android 平台将在 2017 年发布（网易新闻）。&lt;/li&gt;
&lt;li&gt;建造模式比较简单，并非养成类。&lt;/li&gt;
&lt;li&gt;無法在離線的狀態下進行遊戲。&lt;/li&gt;
&lt;li&gt;国区不能上架。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;想加我游戏好友有以下两种方式：&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Player ID: &lt;code&gt;2287-9077-0275&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;邀请连接：&lt;a class="reference external" href="http://url.cn/42YSKwb"&gt;http://url.cn/42YSKwb&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;EOF.&lt;/p&gt;
</content><category term="misc"></category></entry><entry><title>iOS 10.2 更新</title><link href="https://magicalboy.com/note/ios-10-2-update.html" rel="alternate"></link><published>2016-12-15T09:30:00+08:00</published><updated>2016-12-15T09:30:00+08:00</updated><author><name>Don</name></author><id>tag:magicalboy.com,2016-12-15:/note/ios-10-2-update.html</id><summary type="html">&lt;p&gt;今天苹果公司发布了 iOS 10.2 更新。更新后版本号为：10.2 (14C92)，上一个版本是 10.1.1 (14B100)。&lt;/p&gt;
&lt;p&gt;详细的更新日志：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;iOS 10.2 加入了多项新功能，其中包括“电视”应用（仅限美国），这款全新的聚合应用使用户可在一处观看多个视频应用内的电视节目和影片。经过重新设计的表情符号更加精美、细致，新增了 100 多个表情符号，包括表情、食物、动物、运动和职业等各类型。本更新还包括稳定性提升和错误修复。&lt;/p&gt;
&lt;p&gt;电视&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;使用“接着播放”来查看当前正在观看的影片和节目，并从暂停播放的位置继续观看&lt;/li&gt;
&lt;li&gt;在“立即观看”中获取新影片和电视节目的推荐&lt;/li&gt;
&lt;li&gt;在“商店”中发现新的应用和 iTunes 最新发布的内容&lt;/li&gt;
&lt;li&gt;访问“资料库”中的 …&lt;/li&gt;&lt;/ul&gt;&lt;/blockquote&gt;</summary><content type="html">&lt;p&gt;今天苹果公司发布了 iOS 10.2 更新。更新后版本号为：10.2 (14C92)，上一个版本是 10.1.1 (14B100)。&lt;/p&gt;
&lt;p&gt;详细的更新日志：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;iOS 10.2 加入了多项新功能，其中包括“电视”应用（仅限美国），这款全新的聚合应用使用户可在一处观看多个视频应用内的电视节目和影片。经过重新设计的表情符号更加精美、细致，新增了 100 多个表情符号，包括表情、食物、动物、运动和职业等各类型。本更新还包括稳定性提升和错误修复。&lt;/p&gt;
&lt;p&gt;电视&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;使用“接着播放”来查看当前正在观看的影片和节目，并从暂停播放的位置继续观看&lt;/li&gt;
&lt;li&gt;在“立即观看”中获取新影片和电视节目的推荐&lt;/li&gt;
&lt;li&gt;在“商店”中发现新的应用和 iTunes 最新发布的内容&lt;/li&gt;
&lt;li&gt;访问“资料库”中的 iTunes 已购项目和租借项目&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;表情符号&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;经过重新设计的表情符号更加精美、细致&lt;/li&gt;
&lt;li&gt;新增了 100 多个表情符号，包括表情、食物、动物、运动和职业等各类型&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;照片&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;提高了 Live Photo 的防抖动功能并带来了更快的帧速率&lt;/li&gt;
&lt;li&gt;提高了在“人物”相簿中，对同一人物的类似照片进行分组的准确性&lt;/li&gt;
&lt;li&gt;修复了“回忆”可能基于屏幕快照、白板或回执的照片生成回忆的问题&lt;/li&gt;
&lt;li&gt;修复了 iPhone 7 Plus 上从“相机胶卷”切回后，摄像头仍然放大对焦的问题&lt;/li&gt;
&lt;li&gt;对 RAW 数码相机的更多支持&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;信息&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;在“信息”中新增了爱心和欢庆全屏幕效果&lt;/li&gt;
&lt;li&gt;修复了“信息”中键盘有时无法显示的问题&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;音乐&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;向上轻扫“播放中”屏幕可更加轻松地访问“随机播放”、“重复播放”和“接着播放”&lt;/li&gt;
&lt;li&gt;在“音乐资料库”中选取如何排序播放列表、专辑和歌曲&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;News&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;存储供稍后阅读的报道现会在新的“已存储”部分中显示&lt;/li&gt;
&lt;li&gt;订阅频道的最佳付费报道现将在“为你推荐”的专属版块中显示&lt;/li&gt;
&lt;li&gt;现在前往下一篇报道更加简单，只需在阅读时向左轻扫或轻点“下一则报道”&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;邮件&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;修复了在“邮件”中将邮件移到文件夹后，“移动”表单仍然显示的问题&lt;/li&gt;
&lt;li&gt;解决了在“邮件”中长按无法激活拷贝和粘贴的问题&lt;/li&gt;
&lt;li&gt;修复了删除“邮件”会话后，可能选择错误邮件的问题&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;辅助功能&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;VoiceOver 支持 BraillePen14&lt;/li&gt;
&lt;li&gt;修复了使用 VoiceOver 时，盲文表格可能意外切换的问题&lt;/li&gt;
&lt;li&gt;修复了 VoiceOver 用户有时无法使用 Siri 优化语音的问题&lt;/li&gt;
&lt;li&gt;修复了 VoiceOver 用户无法对列表中项目进行重新排列的问题&lt;/li&gt;
&lt;li&gt;修复了“切换控制”有时无法删除语音留言的问题&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其他功能改进和错误修复&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;增加了对 HomeKit 配件的通知支持，其中包括窗帘传感器、人体传感器、动作传感器、门窗传感器、烟雾传感器、一氧化碳传感器和漏水传感器&lt;/li&gt;
&lt;li&gt;增加了 HomeKit 配件有软件更新时的通知支持&lt;/li&gt;
&lt;li&gt;提高了蓝牙的性能以及与第三方配件的连接性&lt;/li&gt;
&lt;li&gt;修复了可能导致 FaceTime 通话参与者无法对焦的问题&lt;/li&gt;
&lt;li&gt;修复了可能导致 FaceTime 通话以错误的宽高比和方向显示的问题&lt;/li&gt;
&lt;li&gt;修复了部分 Visual Voicemail 无法完成播放的问题&lt;/li&gt;
&lt;li&gt;修复了 Safari 阅读器打开文章时可能显示空白页面的问题&lt;/li&gt;
&lt;li&gt;修复了将“阅读列表”中的项目标记为已读后，可能导致 Safari 意外退出的问题&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;有关 Apple 软件更新安全性内容的信息，请访问此网站：
&lt;a class="reference external" href="https://support.apple.com/zh-cn/HT201222"&gt;https://support.apple.com/zh-cn/HT201222&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;英文版更新日志&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;iOS 10.2 introduces new features including the TV app (US Only), a new and unified experience for accessing your TV shows and movies across multiple video apps. Emoji have been beautifully redesigned to reveal even more detail and over 100 new emoji have been added including new faces, food, animals, sports, and professions. This update also includes stability improvements and bug fixes.&lt;/p&gt;
&lt;p&gt;TV&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Use Up Next to see the movies and shows you’re currently watching and pick up where you left off&lt;/li&gt;
&lt;li&gt;Get recommendations for new movies and TV shows in Watch Now&lt;/li&gt;
&lt;li&gt;Discover new apps and the latest iTunes releases in the Store&lt;/li&gt;
&lt;li&gt;Access the Library for your iTunes purchases and rentals&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Emoji&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Beautifully redesigned emoji that reveal even more detail&lt;/li&gt;
&lt;li&gt;Over 100 new emoji including new faces, food, animals, sports, and professions&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Photos&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Improves stabilization and delivers faster frame rate for Live Photos&lt;/li&gt;
&lt;li&gt;Improves accuracy of groupings of similar photos of the same person in the People album&lt;/li&gt;
&lt;li&gt;Fixes an issue where Memories might generate a memory from photos of screenshots, whiteboards or receipts&lt;/li&gt;
&lt;li&gt;Fixes an issue where the camera would stay zoomed in after switching back from the Camera Roll on iPhone 7 Plus&lt;/li&gt;
&lt;li&gt;Additional support for RAW digital cameras&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Messages&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Adds new love and celebration full screen effects in Messages&lt;/li&gt;
&lt;li&gt;Fixes an issue that sometimes prevented the keyboard from displaying in Messages&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Music&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Swipe up the Now Playing screen to more easily access Shuffle, Repeat and Up Next&lt;/li&gt;
&lt;li&gt;Choose how to sort Playlists, Albums, and Songs in Library&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;News&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Stories you’ve saved for later now appear the new Saved section&lt;/li&gt;
&lt;li&gt;The best paid stories from channels you subscribe to will now appear in a dedicated section in For You&lt;/li&gt;
&lt;li&gt;It’s now easier than ever to get to the next story, just swipe left or tap Next Story while reading&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Mail&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Fixes an issue that caused the Move sheet to persist after filing a Mail message&lt;/li&gt;
&lt;li&gt;Addresses an issue with long press activating copy and paste in Mail&lt;/li&gt;
&lt;li&gt;Fixes an issue in which the wrong message would be selected after deleting a Mail conversation&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Accessibility&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Adds BraillePen14 support to VoiceOver&lt;/li&gt;
&lt;li&gt;Fixes an issue where the braille table could switch unexpectedly with VoiceOver&lt;/li&gt;
&lt;li&gt;Fixes an issue where sometimes Siri enhanced voices were unavailable to VoiceOver&lt;/li&gt;
&lt;li&gt;Fixes an issue where VoiceOver users could not re-order items in lists&lt;/li&gt;
&lt;li&gt;Fixes an issue where Switch Control was sometimes unable to delete Voicemails&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Other improvements and fixes&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Adds notification support for HomeKit accessories including window coverings, occupancy, motion, door/window, smoke, carbon monoxide, and water leak sensors&lt;/li&gt;
&lt;li&gt;Adds notification support for HomeKit accessories when software updates are available to HomeKit accessories&lt;/li&gt;
&lt;li&gt;Improves Bluetooth performance and connectivity with 3rd party accessories&lt;/li&gt;
&lt;li&gt;Fixes an issue that could cause FaceTime participants to appear out of focus&lt;/li&gt;
&lt;li&gt;Fixes an issue that could cause FaceTime calls to appear with incorrect aspect ratio and orientation&lt;/li&gt;
&lt;li&gt;Fixes an issue that prevented some Visual Voicemail from completing playback&lt;/li&gt;
&lt;li&gt;Fixes a Safari Reader issue that could cause articles to open as empty pages&lt;/li&gt;
&lt;li&gt;Fixes an issue that could cause Safari to quit unexpectedly after marking an item as read in Reading List&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For information on the security content of Apple software updates, please visit this website:
&lt;a class="reference external" href="https://support.apple.com/HT201222"&gt;https://support.apple.com/HT201222&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
</content><category term="apple"></category></entry><entry><title>Digital Ocean 云主机</title><link href="https://magicalboy.com/note/digital_ocean_host.html" rel="alternate"></link><published>2016-12-13T00:00:00+08:00</published><updated>2016-12-13T00:00:00+08:00</updated><author><name>Don</name></author><id>tag:magicalboy.com,2016-12-13:/note/digital_ocean_host.html</id><summary type="html">&lt;p&gt;&lt;a class="reference external" href="https://www.digitalocean.com/"&gt;DigitalOcean&lt;/a&gt; 云主机，价格最价 &lt;code&gt;5USD&lt;/code&gt; 一个月。&lt;/p&gt;
&lt;p&gt;推荐购买连接：&lt;a class="reference external" href="https://m.do.co/c/05c0b260aaab"&gt;https://m.do.co/c/05c0b260aaab&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;这是 DigitalOcean 的官方教程：&lt;a class="reference external" href="https://www.digitalocean.com/community/tutorials/how-to-install-wordpress-with-lemp-on-ubuntu-16-04"&gt;How To Install WordPress with LEMP on Ubuntu 16.04&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;主要特点有：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;访问速度快（新加坡），ping 平均 160 ms 左右；&lt;/li&gt;
&lt;li&gt;价格不算贵，比国内的阿里云 ECS 便宜；&lt;/li&gt;
&lt;li&gt;国外主机不需备案；&lt;/li&gt;
&lt;li&gt;操作系统可选比较多，而且比较新，比如有 Ubuntu 16.04；&lt;/li&gt;
&lt;li&gt;官方指导文档资料比较丰富，Support tickets 回复迅速，方便解决问题节省时间。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;不好的地方 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a class="reference external" href="https://www.digitalocean.com/"&gt;DigitalOcean&lt;/a&gt; 云主机，价格最价 &lt;code&gt;5USD&lt;/code&gt; 一个月。&lt;/p&gt;
&lt;p&gt;推荐购买连接：&lt;a class="reference external" href="https://m.do.co/c/05c0b260aaab"&gt;https://m.do.co/c/05c0b260aaab&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;这是 DigitalOcean 的官方教程：&lt;a class="reference external" href="https://www.digitalocean.com/community/tutorials/how-to-install-wordpress-with-lemp-on-ubuntu-16-04"&gt;How To Install WordPress with LEMP on Ubuntu 16.04&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;主要特点有：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;访问速度快（新加坡），ping 平均 160 ms 左右；&lt;/li&gt;
&lt;li&gt;价格不算贵，比国内的阿里云 ECS 便宜；&lt;/li&gt;
&lt;li&gt;国外主机不需备案；&lt;/li&gt;
&lt;li&gt;操作系统可选比较多，而且比较新，比如有 Ubuntu 16.04；&lt;/li&gt;
&lt;li&gt;官方指导文档资料比较丰富，Support tickets 回复迅速，方便解决问题节省时间。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;不好的地方：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;只支持 Linux 主机&lt;/li&gt;
&lt;li&gt;需要绑定信用卡才能使用&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;注册的时候需要绑定信用卡，但不会马上扣费，点击我的 &lt;a class="reference external" href="https://m.do.co/c/05c0b260aaab"&gt;推荐购买链接&lt;/a&gt; 会有 &lt;code&gt;10USD&lt;/code&gt; 优惠。&lt;/p&gt;
</content><category term="misc"></category></entry><entry><title>Swift 中的 Lazy 初始化</title><link href="https://magicalboy.com/note/lazy_load_with_swift.html" rel="alternate"></link><published>2016-10-29T00:00:00+08:00</published><updated>2016-10-29T00:00:00+08:00</updated><author><name>Don</name></author><id>tag:magicalboy.com,2016-10-29:/note/lazy_load_with_swift.html</id><summary type="html">&lt;p&gt;Lazy 初始化技术早在 Objective C 时代经常被使用，是一种用来延时创建一些比较消耗资源的对象的技术。&lt;/p&gt;
&lt;p&gt;这种技术在 iOS 开发里面很有用，确保只有在需要使用某些资源的时候才开始分配内存。&lt;/p&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;老的方式&lt;/h2&gt;
&lt;p&gt;这是在 Objective C 里面的写法：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;@property&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;nonatomic&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;strong&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="bp"&gt;NSMutableArray&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;players&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;NSMutableArray&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;players&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;_players&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;_players&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="bp"&gt;NSMutableArray&lt;/span&gt; &lt;span class="n"&gt;alloc&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;_players&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="swift"&gt;
&lt;h2&gt;Swift 新方式&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;lazy&lt;/span&gt; &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;players&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;]()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;非常简单，就一句话！&lt;/p&gt;
&lt;p&gt;需要注意的是，声明 &lt;code&gt;lazy&lt;/code&gt; 变量必须用 &lt;code&gt;var&lt;/code&gt; 关键字，不能使用 &lt;code&gt;let&lt;/code&gt;。因为常量对象初始化完成的时候必须有一个初始值。&lt;/p&gt;
&lt;p&gt;使用 &lt;code&gt;Closure&lt;/code&gt; 定义 …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Lazy 初始化技术早在 Objective C 时代经常被使用，是一种用来延时创建一些比较消耗资源的对象的技术。&lt;/p&gt;
&lt;p&gt;这种技术在 iOS 开发里面很有用，确保只有在需要使用某些资源的时候才开始分配内存。&lt;/p&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;老的方式&lt;/h2&gt;
&lt;p&gt;这是在 Objective C 里面的写法：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;@property&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;nonatomic&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;strong&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="bp"&gt;NSMutableArray&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;players&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;NSMutableArray&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;players&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;_players&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;_players&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="bp"&gt;NSMutableArray&lt;/span&gt; &lt;span class="n"&gt;alloc&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;_players&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="swift"&gt;
&lt;h2&gt;Swift 新方式&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;lazy&lt;/span&gt; &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;players&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;]()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;非常简单，就一句话！&lt;/p&gt;
&lt;p&gt;需要注意的是，声明 &lt;code&gt;lazy&lt;/code&gt; 变量必须用 &lt;code&gt;var&lt;/code&gt; 关键字，不能使用 &lt;code&gt;let&lt;/code&gt;。因为常量对象初始化完成的时候必须有一个初始值。&lt;/p&gt;
&lt;p&gt;使用 &lt;code&gt;Closure&lt;/code&gt; 定义 lazy 属性：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;lazy&lt;/span&gt; &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;players&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;temporaryPlayers&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;]()&lt;/span&gt;
    &lt;span class="n"&gt;temporaryPlayers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;John Doe&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;temporaryPlayers&lt;/span&gt;
&lt;span class="p"&gt;}()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;使用实例方法：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;lazy&lt;/span&gt; &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;players&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;initialPlayers&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;initialPlayers&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;players&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;John Doe&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;players&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;或类方法：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TestClass&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kr"&gt;lazy&lt;/span&gt; &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;players&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;TestClass&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;initialPlayers&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;func&lt;/span&gt; &lt;span class="n"&gt;initialPlayers&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;players&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;John Doe&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;players&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;很明显，一般情况下使用 Closure 方式创建是最简单的，能够一目了然。&lt;/p&gt;
&lt;p&gt;本文翻译并修改自 &lt;a class="reference external" href="http://mikebuss.com/2014/06/22/lazy-initialization-swift/"&gt;Lazy Initialization with Swift&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</content><category term="iOS"></category><category term="Swift"></category></entry><entry><title>微鲸电视，智能电视</title><link href="https://magicalboy.com/note/whaley_android_tv.html" rel="alternate"></link><published>2016-10-28T00:00:00+08:00</published><updated>2016-10-28T00:00:00+08:00</updated><author><name>Don</name></author><id>tag:magicalboy.com,2016-10-28:/note/whaley_android_tv.html</id><summary type="html">&lt;p&gt;这是一台四月份在 &lt;a class="reference external" href="https://item.jd.com/2268749.html"&gt;京东商场&lt;/a&gt; 买的一台平板电视，关于微鲸这个新品牌请自行搜索。&lt;/p&gt;
&lt;p&gt;这台电视主要特点有：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;4K 分辨率&lt;/li&gt;
&lt;li&gt;价格不算贵，不到 1500 CNY&lt;/li&gt;
&lt;li&gt;LG 屏幕，尺寸 43 寸，适合出租屋，将来有自己房子之时也可以作为卧室电视使用&lt;/li&gt;
&lt;li&gt;普通 Android 定制系统，京东销售渠道非 YunOS&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;缺点有：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;开机启动速度慢&lt;/li&gt;
&lt;li&gt;资源不够丰富（GITV 牌照）&lt;/li&gt;
&lt;li&gt;Android 5.0 不够新，建议更新到 6.0 ，有完整意义的权限管理&lt;/li&gt;
&lt;li&gt;系统不可靠，有与 YunOS 合作的版本&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;安装失败，未知原因&lt;/h2&gt;
&lt;p&gt;这是最近更新的一个版本在安装 APK 时报的一个错误，当时问了客服，客服没有任何回应。后来自己打开 ADB 使用命令与手动结合安装解决 …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;这是一台四月份在 &lt;a class="reference external" href="https://item.jd.com/2268749.html"&gt;京东商场&lt;/a&gt; 买的一台平板电视，关于微鲸这个新品牌请自行搜索。&lt;/p&gt;
&lt;p&gt;这台电视主要特点有：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;4K 分辨率&lt;/li&gt;
&lt;li&gt;价格不算贵，不到 1500 CNY&lt;/li&gt;
&lt;li&gt;LG 屏幕，尺寸 43 寸，适合出租屋，将来有自己房子之时也可以作为卧室电视使用&lt;/li&gt;
&lt;li&gt;普通 Android 定制系统，京东销售渠道非 YunOS&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;缺点有：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;开机启动速度慢&lt;/li&gt;
&lt;li&gt;资源不够丰富（GITV 牌照）&lt;/li&gt;
&lt;li&gt;Android 5.0 不够新，建议更新到 6.0 ，有完整意义的权限管理&lt;/li&gt;
&lt;li&gt;系统不可靠，有与 YunOS 合作的版本&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;安装失败，未知原因&lt;/h2&gt;
&lt;p&gt;这是最近更新的一个版本在安装 APK 时报的一个错误，当时问了客服，客服没有任何回应。后来自己打开 ADB 使用命令与手动结合安装解决。&lt;/p&gt;
&lt;p&gt;由于这是一个定制的操作系统，这里使用 &lt;a class="reference external" href="https://play.google.com/store/apps/details?id=com.magicalboy.artchecker"&gt;ARTChecker&lt;/a&gt; 和 &lt;a class="reference external" href="https://play.google.com/store/apps/details?id=com.magicalboy.dptest"&gt;DPInfo&lt;/a&gt; 两件套查看结果（仅参考）。&lt;/p&gt;
&lt;img alt="Whaley Android" class="align-left" src="images/whaley_android_spec.png" /&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h2&gt;黑屏问题&lt;/h2&gt;
&lt;p&gt;可能是第一批次产品良品率问题，运气不好刚好遇上，没用几天就黑屏了。&lt;/p&gt;
&lt;img alt="Whaley Half of Black Screen" class="align-left" src="images/whaley_half_of_black_screen.jpg" /&gt;
&lt;p&gt;后来通过售后服务，由厂家安装人员上门检测，拿到检测报告后京东直接上门换新，并收走有问题的商品。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id5"&gt;
&lt;h2&gt;总结&lt;/h2&gt;
&lt;p&gt;虽然国内的 OTT 平台有 &lt;a class="reference external" href="http://www.digitaling.com/articles/11970.html"&gt;广电181号文件&lt;/a&gt; 限制，如果将一个开放的 Android 系统做得太封闭未见是一件好事。&lt;/p&gt;
&lt;p&gt;目前国产电视已经大部分是互联网电视，集成 Android 系统并内置内容服务。&lt;/p&gt;
&lt;p&gt;因受阿里云 YunOS 的问题影响极大，个人更倾向于非 Android 系统的电视。&lt;/p&gt;
&lt;p&gt;电视的主要参数不应该为了让 Android 系统运行更快，解码能力更强而使用更强 CPU 和 GPU，而应该注重屏幕本身，提高显示质量。以及提升开机速度和响应速度。&lt;/p&gt;
&lt;p&gt;最近的量子显示技术和 LED 屏显示技术我还是比较感兴趣的，等技术成熟和价格降下来以后买一台享受一下。不多说了，搬砖赚钱提高生活质量 :D&lt;/p&gt;
&lt;/div&gt;
</content><category term="Android"></category></entry><entry><title>摩托罗拉(Motorola) MT620</title><link href="https://magicalboy.com/note/motorola_mt620.html" rel="alternate"></link><published>2016-10-20T12:20:00+08:00</published><updated>2016-10-20T12:20:00+08:00</updated><author><name>Don</name></author><id>tag:magicalboy.com,2016-10-20:/note/motorola_mt620.html</id><summary type="html">&lt;p&gt;今天在收拾东西的时候发现一部旧 Android 手机，Motorola MT620。&lt;/p&gt;
&lt;p&gt;这是一台老手机，2012 年购买于亚马逊：&lt;a class="reference external" href="https://www.amazon.cn/gp/product/B005HM1R62"&gt;摩托罗拉(Motorola)MT620 3G智能手机(简洁白 移动定制)&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;购买价格是 470.00，在当时来说已经是令人心动了，虽然今天 299 元即可买到八核，4G 大屏手机。&lt;/p&gt;
&lt;p&gt;主要亮点是：QWERTY 全功能键盘，全触屏，支持手写输入，摩托罗拉品牌且价格实惠。&lt;/p&gt;
&lt;p&gt;所以买了一台给老爸使用，现在他在用 iPhone 5。:D&lt;/p&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;运行系统&lt;/h2&gt;
&lt;img alt="OPhone" class="align-left" src="images/OPhone_20161020110900.png" /&gt;
&lt;p&gt;采用以 Android 2.3.7 为基础的 &lt;a class="reference external" href="https://zh.wikipedia.org/wiki/OPhone#.E6.91.A9.E6.89.98.E7.BE.85.E6.8B.89MT620"&gt;OPhone&lt;/a&gt; 2.6 最新智能操作系统。&lt;/p&gt;
&lt;p&gt;虽说这是一台移动定制手机，但与别的中国版 Android 系统不同的是，里面没有移动自家应用程序 …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;今天在收拾东西的时候发现一部旧 Android 手机，Motorola MT620。&lt;/p&gt;
&lt;p&gt;这是一台老手机，2012 年购买于亚马逊：&lt;a class="reference external" href="https://www.amazon.cn/gp/product/B005HM1R62"&gt;摩托罗拉(Motorola)MT620 3G智能手机(简洁白 移动定制)&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;购买价格是 470.00，在当时来说已经是令人心动了，虽然今天 299 元即可买到八核，4G 大屏手机。&lt;/p&gt;
&lt;p&gt;主要亮点是：QWERTY 全功能键盘，全触屏，支持手写输入，摩托罗拉品牌且价格实惠。&lt;/p&gt;
&lt;p&gt;所以买了一台给老爸使用，现在他在用 iPhone 5。:D&lt;/p&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;运行系统&lt;/h2&gt;
&lt;img alt="OPhone" class="align-left" src="images/OPhone_20161020110900.png" /&gt;
&lt;p&gt;采用以 Android 2.3.7 为基础的 &lt;a class="reference external" href="https://zh.wikipedia.org/wiki/OPhone#.E6.91.A9.E6.89.98.E7.BE.85.E6.8B.89MT620"&gt;OPhone&lt;/a&gt; 2.6 最新智能操作系统。&lt;/p&gt;
&lt;p&gt;虽说这是一台移动定制手机，但与别的中国版 Android 系统不同的是，里面没有移动自家应用程序（除了开机动画和声音），更意外的是自带了 Google Play 商店和 GTalk 应用。&lt;/p&gt;
&lt;p&gt;这一点和维基百科上面说的不一致，不但有自带 Google 服务，而且没有中国移动的全家桶应用。&lt;/p&gt;
&lt;p&gt;根据上图显示，OPhone 主要由 &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Borqs"&gt;Borqs&lt;/a&gt; 开发，中国移动只是定制了开机动画，以及手机外观加了一个 G3 标志。&lt;/p&gt;
&lt;p&gt;后来本人手贱点了升级，导致 Google 服务消失，但一样没有中移动应用。幸运的是还可以手动刷回去。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="recovery"&gt;
&lt;h2&gt;Recovery 模式&lt;/h2&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;首先在关机状态下按住键盘 ALT 键，然后按开机键；&lt;/li&gt;
&lt;li&gt;等出现移动 Logo 放开开机键，继续按着 ALT 不放，等屏幕出现一个盒子即可；&lt;/li&gt;
&lt;li&gt;音量加减控制上下，空格键是选择。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;刷机方法：选择 “apply update from sdcard” 进入后找到 “SUPK_31I_MA_Fly.supk” 文件按空格键。
需要注意的是，刷机包需要先解压缩。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="mt620"&gt;
&lt;h2&gt;MT620 相册&lt;/h2&gt;
&lt;p&gt;MT620 有自带截图功能，方法是：按住菜单键（触摸按钮最左边一个）不放，接着按音量加键。&lt;/p&gt;
&lt;p&gt;使用截图功能创建的相册：
&lt;a class="reference external" href="https://goo.gl/photos/YhCsm3ADp3HSZua59"&gt;https://goo.gl/photos/YhCsm3ADp3HSZua59&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</content><category term="Android"></category><category term="Motorola"></category></entry><entry><title>使用 Let's Encrypt SSL</title><link href="https://magicalboy.com/note/use-lets-encrypt-ssl.html" rel="alternate"></link><published>2016-09-13T16:30:00+08:00</published><updated>2016-09-13T16:30:00+08:00</updated><author><name>Don</name></author><id>tag:magicalboy.com,2016-09-13:/note/use-lets-encrypt-ssl.html</id><summary type="html">&lt;p&gt;本站的 SSL 由 &lt;a class="reference external" href="https://letsencrypt.org"&gt;Let's Encrypt&lt;/a&gt; 提供。不再使用 StartSSL。&lt;/p&gt;
&lt;p&gt;需要注意的是，Let's Encrypt 的免费证书有效期为三个月，注意过期之前更新或使用自动脚本更新。&lt;/p&gt;
&lt;p&gt;附：&lt;a class="reference external" href="https://www.digicert.com/help/?host=magicalboy.com"&gt;SSL Certificate Checker&lt;/a&gt;&lt;/p&gt;
</summary><content type="html">&lt;p&gt;本站的 SSL 由 &lt;a class="reference external" href="https://letsencrypt.org"&gt;Let's Encrypt&lt;/a&gt; 提供。不再使用 StartSSL。&lt;/p&gt;
&lt;p&gt;需要注意的是，Let's Encrypt 的免费证书有效期为三个月，注意过期之前更新或使用自动脚本更新。&lt;/p&gt;
&lt;p&gt;附：&lt;a class="reference external" href="https://www.digicert.com/help/?host=magicalboy.com"&gt;SSL Certificate Checker&lt;/a&gt;&lt;/p&gt;
</content><category term="web"></category><category term="ssl"></category></entry><entry><title>苹果发布会视频下载</title><link href="https://magicalboy.com/note/apple-event-download.html" rel="alternate"></link><published>2016-09-08T16:30:00+08:00</published><updated>2016-09-08T16:30:00+08:00</updated><author><name>Don</name></author><id>tag:magicalboy.com,2016-09-08:/note/apple-event-download.html</id><summary type="html">&lt;p&gt;苹果的发布会通常在中国北京时间凌晨一点。如果因为睡觉错过了想回顾，除了在官网在线回看，还可以在 Youtube 或其他网站上观看。&lt;/p&gt;
&lt;p&gt;如果想下载完整版回来收藏，可以使用 VLC 或 ffmpeg 工具。&lt;/p&gt;
&lt;p&gt;比如，使用 ffmpeg 下载苹果九月发布会命令：&lt;/p&gt;
&lt;pre class="code shell literal-block"&gt;
$ ffmpeg -i &lt;span class="s2"&gt;&amp;quot;http://p.events-delivery.apple.com.edgesuite.net/1609lijbsdfvoihbadfvohbsdfvljhb/vod/8500/8500_vod.m3u8&amp;quot;&lt;/span&gt; -c copy apple.ts
&lt;/pre&gt;
&lt;p&gt;提示：1080p 的 m3u8 流地址可以复制视频地址分析得到。&lt;/p&gt;
</summary><content type="html">&lt;p&gt;苹果的发布会通常在中国北京时间凌晨一点。如果因为睡觉错过了想回顾，除了在官网在线回看，还可以在 Youtube 或其他网站上观看。&lt;/p&gt;
&lt;p&gt;如果想下载完整版回来收藏，可以使用 VLC 或 ffmpeg 工具。&lt;/p&gt;
&lt;p&gt;比如，使用 ffmpeg 下载苹果九月发布会命令：&lt;/p&gt;
&lt;pre class="code shell literal-block"&gt;
$ ffmpeg -i &lt;span class="s2"&gt;&amp;quot;http://p.events-delivery.apple.com.edgesuite.net/1609lijbsdfvoihbadfvohbsdfvljhb/vod/8500/8500_vod.m3u8&amp;quot;&lt;/span&gt; -c copy apple.ts
&lt;/pre&gt;
&lt;p&gt;提示：1080p 的 m3u8 流地址可以复制视频地址分析得到。&lt;/p&gt;
</content><category term="apple"></category></entry><entry><title>iOS 固件信息 API</title><link href="https://magicalboy.com/note/ios-firmware-api.html" rel="alternate"></link><published>2016-08-31T11:30:00+08:00</published><updated>2016-08-31T11:30:00+08:00</updated><author><name>Don</name></author><id>tag:magicalboy.com,2016-08-31:/note/ios-firmware-api.html</id><summary type="html">&lt;p&gt;收藏几个有意思的第三方 API，主要获取固件信息，实时的 Apple TSS 服务状态：&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://api.ineal.me/tss/docs"&gt;Real time status of every iOS firmware currently being signed by Apple's TSS server.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://api.ios.icj.me/docs/"&gt;IPSW Downloads&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</summary><content type="html">&lt;p&gt;收藏几个有意思的第三方 API，主要获取固件信息，实时的 Apple TSS 服务状态：&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://api.ineal.me/tss/docs"&gt;Real time status of every iOS firmware currently being signed by Apple's TSS server.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://api.ios.icj.me/docs/"&gt;IPSW Downloads&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</content><category term="iOS"></category><category term="crack"></category></entry><entry><title>苹果九月发布会</title><link href="https://magicalboy.com/note/apple-event-2016-september.html" rel="alternate"></link><published>2016-08-31T00:30:00+08:00</published><updated>2016-08-31T00:30:00+08:00</updated><author><name>Don</name></author><id>tag:magicalboy.com,2016-08-31:/note/apple-event-2016-september.html</id><summary type="html">&lt;img alt="Apple Event" src="images/hero_image_large.jpg" /&gt;
&lt;p&gt;中国北京时间为8日凌晨1点。&lt;/p&gt;
&lt;p&gt;可以在线看直播，有即时字幕，流畅度提升越来越明显。&lt;/p&gt;
&lt;blockquote&gt;
Requirements: Live streaming uses Apple’s HTTP Live Streaming (HLS) technology. HLS requires an iPhone, iPad, or iPod touch with Safari on iOS 7.0 or later, a Mac with Safari 6.0.5 or later on OS X v10.8.5 or later, or a …&lt;/blockquote&gt;</summary><content type="html">&lt;img alt="Apple Event" src="images/hero_image_large.jpg" /&gt;
&lt;p&gt;中国北京时间为8日凌晨1点。&lt;/p&gt;
&lt;p&gt;可以在线看直播，有即时字幕，流畅度提升越来越明显。&lt;/p&gt;
&lt;blockquote&gt;
Requirements: Live streaming uses Apple’s HTTP Live Streaming (HLS) technology. HLS requires an iPhone, iPad, or iPod touch with Safari on iOS 7.0 or later, a Mac with Safari 6.0.5 or later on OS X v10.8.5 or later, or a PC with Microsoft Edge on Windows 10. Streaming via Apple TV requires an Apple TV (2nd or 3rd generation) with software 6.2 or later or an Apple TV (4th generation).&lt;/blockquote&gt;
</content><category term="apple"></category></entry><entry><title>xctool 使用</title><link href="https://magicalboy.com/note/xctool-usage.html" rel="alternate"></link><published>2016-07-06T10:30:00+08:00</published><updated>2016-07-06T10:30:00+08:00</updated><author><name>Don</name></author><id>tag:magicalboy.com,2016-07-06:/note/xctool-usage.html</id><summary type="html">&lt;p&gt;xctool 可以理解为 xcodebuild 的增强版，特别有利于可持续集成。xctool 由 Facebook 开发维护，项目地址 &lt;a class="reference external" href="https://github.com/facebook/xctool"&gt;https://github.com/facebook/xctool&lt;/a&gt;。&lt;/p&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;安装 xctool&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ brew install &lt;span class="nv"&gt;xctool&lt;/span&gt;
&lt;span class="o"&gt;==&lt;/span&gt;&amp;gt; Downloading https://homebrew.bintray.com/bottles/xctool-0.2.7.el_capitan.bottle.tar.gz
&lt;span class="c1"&gt;######################################################################## 100.0%&lt;/span&gt;
&lt;span class="o"&gt;==&lt;/span&gt;&amp;gt; Pouring xctool-0.2.7.el_capitan.bottle.tar.gz
🍺  /usr/local/Cellar/xctool/0.2.7 …&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;xctool 可以理解为 xcodebuild 的增强版，特别有利于可持续集成。xctool 由 Facebook 开发维护，项目地址 &lt;a class="reference external" href="https://github.com/facebook/xctool"&gt;https://github.com/facebook/xctool&lt;/a&gt;。&lt;/p&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;安装 xctool&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ brew install &lt;span class="nv"&gt;xctool&lt;/span&gt;
&lt;span class="o"&gt;==&lt;/span&gt;&amp;gt; Downloading https://homebrew.bintray.com/bottles/xctool-0.2.7.el_capitan.bottle.tar.gz
&lt;span class="c1"&gt;######################################################################## 100.0%&lt;/span&gt;
&lt;span class="o"&gt;==&lt;/span&gt;&amp;gt; Pouring xctool-0.2.7.el_capitan.bottle.tar.gz
🍺  /usr/local/Cellar/xctool/0.2.7: &lt;span class="m"&gt;20&lt;/span&gt; files, &lt;span class="m"&gt;2&lt;/span&gt;.2M
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;如果安装的不是最新版本，则升级&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ brew update
Updated Homebrew from c3096f39 to dde20cd8.
&lt;span class="o"&gt;==&lt;/span&gt;&amp;gt; Migrating Homebrew to v0.9.9
...
&lt;span class="o"&gt;=&lt;/span&gt;&amp;gt; Cleaning up /Library/Caches/Homebrew...
...
Removing: /Library/Caches/Homebrew/xctool-0.2.7.el_capitan.bottle.tar.gz... &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;650&lt;/span&gt;.4K&lt;span class="o"&gt;)&lt;/span&gt;

$ brew upgrade &lt;span class="nv"&gt;xctool&lt;/span&gt;
&lt;span class="o"&gt;==&lt;/span&gt;&amp;gt; Upgrading &lt;span class="m"&gt;1&lt;/span&gt; outdated package, with result:
xctool &lt;span class="m"&gt;0&lt;/span&gt;.2.9
&lt;span class="o"&gt;==&lt;/span&gt;&amp;gt; Upgrading &lt;span class="nv"&gt;xctool&lt;/span&gt;
&lt;span class="o"&gt;==&lt;/span&gt;&amp;gt; Downloading https://homebrew.bintray.com/bottles/xctool-0.2.9.el_capitan.bottle.tar.gz
&lt;span class="c1"&gt;######################################################################## 100.0%&lt;/span&gt;
&lt;span class="o"&gt;==&lt;/span&gt;&amp;gt; Pouring xctool-0.2.9.el_capitan.bottle.tar.gz
🍺  /usr/local/Cellar/xctool/0.2.9: &lt;span class="m"&gt;21&lt;/span&gt; files, &lt;span class="m"&gt;2&lt;/span&gt;.9M
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;使用&lt;/h2&gt;
&lt;p&gt;xctool 的命令和参考选项大部分基于 xcodebuild，大多数情况下两者可以互换使用，但 xctool 会有更漂亮的输出。更多请查看帮助命令 &lt;cite&gt;$xctool -help&lt;/cite&gt;。&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Test，对指定的 scheme 进行编译和运行测试&lt;/li&gt;
&lt;li&gt;Building Tests，只编译测试，不运行&lt;/li&gt;
&lt;li&gt;Running Tests，不需要再编译，直接运行测试&lt;/li&gt;
&lt;li&gt;Parallelizing Test Runs，并行地进行单元测试&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可见 xctool 比较侧重于测试，对于编译可能不会对未来的 Xcode 版本更新。编译项目建议使用 xcodebuild, xcpretty 或 xcbuild。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="faq"&gt;
&lt;h2&gt;FAQ&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;DVTAssertions: ASSERTION FAILURE：
原因是安装了旧版本，可见安装前 update 一下是个必须的好习惯。&lt;/li&gt;
&lt;li&gt;依然报错：NSInternalInconsistencyException', reason: 'Platform 'iphoneos' is not yet supported.
解决：&lt;a class="reference external" href="https://github.com/facebook/xctool/issues/692"&gt;https://github.com/facebook/xctool/issues/692&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Travis CI: Code Sign error:&lt;ul&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/travis-ci/travis-ci/issues/3047"&gt;https://github.com/travis-ci/travis-ci/issues/3047&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/travis-ci/travis-ci/issues/3986"&gt;https://github.com/travis-ci/travis-ci/issues/3986&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="iOS"></category><category term="CI"></category></entry><entry><title>启用 OS X Web 服务器</title><link href="https://magicalboy.com/note/enable-osx-webserver.html" rel="alternate"></link><published>2016-06-01T14:12:00+08:00</published><updated>2016-06-01T14:12:00+08:00</updated><author><name>Don</name></author><id>tag:magicalboy.com,2016-06-01:/note/enable-osx-webserver.html</id><summary type="html">&lt;p&gt;OS X 有内置 &lt;code&gt;Apache&lt;/code&gt; 服务器应用，早期版本可以在网络共享中打开，目前的 OS Ｘ 版本已经取消。&lt;/p&gt;
&lt;p&gt;本文 OS X 版本是 &lt;em&gt;OS X El Capitan 10.11.5&lt;/em&gt;，Apache 版本：&lt;/p&gt;
&lt;pre class="code shell literal-block"&gt;
$ apachectl -v
Server version: Apache/2.4.18 &lt;span class="o"&gt;(&lt;/span&gt;Unix&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;div class="section" id="apache"&gt;
&lt;h2&gt;Apache 使用&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;即使在未配置之前也可以打开 Apache 服务：&lt;/p&gt;
&lt;pre class="code shell literal-block"&gt;
$ sudo apachectl start
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;然后输入本机地址进行测试：&lt;a class="reference external" href="http://localhost/"&gt;http://localhost/&lt;/a&gt; 或 &lt;a class="reference external" href="http://127.0.0.1"&gt;http://127.0.0.1&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;测试完毕后 …&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;OS X 有内置 &lt;code&gt;Apache&lt;/code&gt; 服务器应用，早期版本可以在网络共享中打开，目前的 OS Ｘ 版本已经取消。&lt;/p&gt;
&lt;p&gt;本文 OS X 版本是 &lt;em&gt;OS X El Capitan 10.11.5&lt;/em&gt;，Apache 版本：&lt;/p&gt;
&lt;pre class="code shell literal-block"&gt;
$ apachectl -v
Server version: Apache/2.4.18 &lt;span class="o"&gt;(&lt;/span&gt;Unix&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;div class="section" id="apache"&gt;
&lt;h2&gt;Apache 使用&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;即使在未配置之前也可以打开 Apache 服务：&lt;/p&gt;
&lt;pre class="code shell literal-block"&gt;
$ sudo apachectl start
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;然后输入本机地址进行测试：&lt;a class="reference external" href="http://localhost/"&gt;http://localhost/&lt;/a&gt; 或 &lt;a class="reference external" href="http://127.0.0.1"&gt;http://127.0.0.1&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;测试完毕后，停止服务：&lt;/p&gt;
&lt;pre class="code shell literal-block"&gt;
$ sudo apachectl stop
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;如果更改了配置，刚使用以下命令重启：&lt;/p&gt;
&lt;pre class="code shell literal-block"&gt;
$ sudo apachectl -k restart
&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;Apache 配置&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;编辑 Apache 的配置文件，路径：&lt;em&gt;/etc/apache2/httpd.conf&lt;/em&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;修改 &lt;em&gt;Document Root&lt;/em&gt;。&lt;/p&gt;
&lt;p&gt;默认的 &lt;em&gt;Document Root&lt;/em&gt; 是 &lt;em&gt;/Library/WebServer/Documents&lt;/em&gt;，这个路径下面就是默认的 &lt;em&gt;It works!&lt;/em&gt; 页面文件。&lt;/p&gt;
&lt;p&gt;一般需要修改为用户目录下的 &lt;em&gt;Sites&lt;/em&gt; 目录：&lt;em&gt;DocumentRoot &amp;quot;/Users/[username]/Sites&amp;quot;&lt;/em&gt;。注意这里的路径必须写完整的路径，用户目录不能使用 &lt;em&gt;~&lt;/em&gt; 代替。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;然后修改站点目录：&lt;/p&gt;
&lt;pre class="code shell literal-block"&gt;
&amp;lt;Directory &lt;span class="s2"&gt;&amp;quot;Users/[username]/Sites&amp;quot;&lt;/span&gt;&amp;gt;
    Options FollowSymLinks Multiviews
    MultiviewsMatch Any
    AllowOverride All
    Require all granted
&amp;lt;/Directory&amp;gt;
&lt;/pre&gt;
&lt;p&gt;需要注意的是，&lt;em&gt;AllowOverride&lt;/em&gt; 值改为 &lt;em&gt;All&lt;/em&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;修改用户和用户组：&lt;/p&gt;
&lt;pre class="code shell literal-block"&gt;
User yaokan
Group staff
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;创建站点目录&lt;/p&gt;
&lt;p&gt;在 Home 根目录下创建 &lt;em&gt;Sites&lt;/em&gt; 目录，然后创建一个测试页面 &lt;em&gt;index.html&lt;/em&gt;：&lt;/p&gt;
&lt;pre class="code shell literal-block"&gt;
$ mkdir ~/Sites
$ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Hello World!&amp;quot;&lt;/span&gt; &amp;gt; ~/Sites/index.html
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;重启服务器&lt;/p&gt;
&lt;pre class="code shell literal-block"&gt;
sudo apachectl restart
&lt;/pre&gt;
&lt;p&gt;打开网址 &lt;a class="reference external" href="http://localhost"&gt;http://localhost&lt;/a&gt; 即可看到刚刚所创建的 &lt;em&gt;Hello World&lt;/em&gt; 页面。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="web"></category></entry><entry><title>在树莓派上安装 AMP</title><link href="https://magicalboy.com/note/install-amp-on-raspberry-pi.html" rel="alternate"></link><published>2016-05-31T14:22:00+08:00</published><updated>2016-05-31T14:22:00+08:00</updated><author><name>Don</name></author><id>tag:magicalboy.com,2016-05-31:/note/install-amp-on-raspberry-pi.html</id><summary type="html">&lt;p&gt;AMP 是 Linux 网站最常见的组合，即 Apache，MySQL 和 PHP。&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Apache 是一个非常流行的 Web 服务器软件&lt;/li&gt;
&lt;li&gt;MySQL 是一个关系型数据库管理系统&lt;/li&gt;
&lt;li&gt;PHP 是一种通用开源脚本语言，主要适用于 Web 开发领域&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="apache"&gt;
&lt;h2&gt;安装 Apache&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Apache 可以用下面的命令来安装：&lt;em&gt;sudo apt-get install apache2&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Raspbian Jessie 版本的默认站点路径是 &lt;em&gt;/var/www/html&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;配置文件路径为 &lt;em&gt;/etc/apache2/&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;修改监听端口号 &lt;em&gt;sudo vi /etc/apache2/ports.conf&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;重启服务 &lt;em&gt;sudo service apache2 restart&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;修改权限 …&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;AMP 是 Linux 网站最常见的组合，即 Apache，MySQL 和 PHP。&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Apache 是一个非常流行的 Web 服务器软件&lt;/li&gt;
&lt;li&gt;MySQL 是一个关系型数据库管理系统&lt;/li&gt;
&lt;li&gt;PHP 是一种通用开源脚本语言，主要适用于 Web 开发领域&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="apache"&gt;
&lt;h2&gt;安装 Apache&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Apache 可以用下面的命令来安装：&lt;em&gt;sudo apt-get install apache2&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Raspbian Jessie 版本的默认站点路径是 &lt;em&gt;/var/www/html&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;配置文件路径为 &lt;em&gt;/etc/apache2/&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;修改监听端口号 &lt;em&gt;sudo vi /etc/apache2/ports.conf&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;重启服务 &lt;em&gt;sudo service apache2 restart&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;修改权限 &lt;em&gt;sudo chown pi: index.html&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="php"&gt;
&lt;h2&gt;安装 PHP&lt;/h2&gt;
&lt;p&gt;安装 PHP 及其 Apache Module：&lt;/p&gt;
&lt;pre class="code shell literal-block"&gt;
sudo apt-get install php5 libapache2-mod-php5 -y
&lt;/pre&gt;
&lt;p&gt;测试页：index.php&lt;/p&gt;
&lt;pre class="code php literal-block"&gt;
&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt; &lt;span class="nb"&gt;phpinfo&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="cp"&gt;?&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;配置文件：&lt;em&gt;/etc/php5/cli/php.ini&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="mysql"&gt;
&lt;h2&gt;安装 MySQL&lt;/h2&gt;
&lt;pre class="code shell literal-block"&gt;
sudo apt-get install mysql-server php5-mysql
&lt;/pre&gt;
&lt;p&gt;安装过程中会让你输入 MySQL root 用户的密码。&lt;/p&gt;
&lt;/div&gt;
</content><category term="Linux"></category></entry><entry><title>iTunes 可视化插件</title><link href="https://magicalboy.com/note/itunes-visualizer-plugin.html" rel="alternate"></link><published>2016-05-30T15:51:00+08:00</published><updated>2016-05-30T15:51:00+08:00</updated><author><name>Don</name></author><id>tag:magicalboy.com,2016-05-30:/note/itunes-visualizer-plugin.html</id><summary type="html">&lt;p&gt;听到一些好的音乐时，尤其是节奏感强烈的，总是想看看可视化效果。&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://apptree.net/ledsa.htm"&gt;LED Spectrum Analyzer plug-in for iTunes&lt;/a&gt; 是一个很不错的 iTunes 可视化插件，免费开源。&lt;/p&gt;
&lt;p&gt;本人一直在使用这个 LED 频谱分析议插件，虽有两年多没更新，但仍然支持目前最新 iTunes 12.4。另外需要注意的是，此插件仅支持 OS X 平台。&lt;/p&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;安装&lt;/h2&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;下载：&lt;a class="reference external" href="http://apptree.net/apps/LEDSA3.0.zip"&gt;Version 3.0.7&lt;/a&gt; 并解压。&lt;/li&gt;
&lt;li&gt;打开 Finder，按下 &lt;em&gt;Shift + cmd + G&lt;/em&gt; 并输入 &lt;em&gt;~/Library/iTunes/iTunes Plug-ins&lt;/em&gt; 前往到 iTunes 插件目录。&lt;/li&gt;
&lt;li&gt;复制 &lt;em&gt;LED Spectrum …&lt;/em&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;听到一些好的音乐时，尤其是节奏感强烈的，总是想看看可视化效果。&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://apptree.net/ledsa.htm"&gt;LED Spectrum Analyzer plug-in for iTunes&lt;/a&gt; 是一个很不错的 iTunes 可视化插件，免费开源。&lt;/p&gt;
&lt;p&gt;本人一直在使用这个 LED 频谱分析议插件，虽有两年多没更新，但仍然支持目前最新 iTunes 12.4。另外需要注意的是，此插件仅支持 OS X 平台。&lt;/p&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;安装&lt;/h2&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;下载：&lt;a class="reference external" href="http://apptree.net/apps/LEDSA3.0.zip"&gt;Version 3.0.7&lt;/a&gt; 并解压。&lt;/li&gt;
&lt;li&gt;打开 Finder，按下 &lt;em&gt;Shift + cmd + G&lt;/em&gt; 并输入 &lt;em&gt;~/Library/iTunes/iTunes Plug-ins&lt;/em&gt; 前往到 iTunes 插件目录。&lt;/li&gt;
&lt;li&gt;复制 &lt;em&gt;LED Spectrum Analyser.bundle&lt;/em&gt; 到 iTunes 插件目录。&lt;/li&gt;
&lt;li&gt;重新打开 iTunes，在菜单选择 &lt;em&gt;显示 -&amp;gt; 可视化效果 -&amp;gt; LED Spectrum Analyser 3.0&lt;/em&gt; 激活使用。&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;配置&lt;/h2&gt;
&lt;p&gt;默认的配置没有达到个人想要的效果，所以要配置一下。&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;在可视化界面鼠标右键选择 &lt;em&gt;Visualizer Options..&lt;/em&gt; 打开 &lt;em&gt;LED Spectrum Analyser Options&lt;/em&gt;。&lt;/li&gt;
&lt;li&gt;打开 &lt;em&gt;Layout&lt;/em&gt; 标签视图，&lt;em&gt;Bands&lt;/em&gt; 选择 &lt;em&gt;18&lt;/em&gt;。 &lt;em&gt;Cover Art&lt;/em&gt; 部分全部勾选，启用封面图片和根据封面图片生成的颜色，这个功能挺赞的。&lt;/li&gt;
&lt;li&gt;打开 &lt;em&gt;Advanced&lt;/em&gt; 标签界面，只勾选 &lt;em&gt;Bin Using Peak Values&lt;/em&gt; 以及 &lt;em&gt;Exponential Decay&lt;/em&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;以上配置可以让频谱看起来更灵活，节奏带感，当然也是纯个人爱好。有兴趣的可以去研究其源码。&lt;/p&gt;
&lt;/div&gt;
</content><category term="iTunes"></category></entry><entry><title>自定义 Django Serializer</title><link href="https://magicalboy.com/note/django-serializer_customize.html" rel="alternate"></link><published>2016-05-29T08:41:00+08:00</published><updated>2016-05-29T08:41:00+08:00</updated><author><name>Don</name></author><id>tag:magicalboy.com,2016-05-29:/note/django-serializer_customize.html</id><summary type="html">&lt;p&gt;根据 &lt;a class="reference external" href="https://docs.djangoproject.com/en/1.9/topics/serialization/#serialization-formats-json"&gt;Serializing Django objects | Django documentation | Django&lt;/a&gt;
，使用内置默认的 serializer 格式化的 JSON 如下：&lt;/p&gt;
&lt;pre class="code json literal-block"&gt;
&lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;pk&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;4b678b301dfd8a4e0dad910de3ae245b&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;model&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;sessions.session&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;fields&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;quot;expire_date&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;2013-01-16T08:16:59.844Z&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="err"&gt;...&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;里面带有 &lt;em&gt;pk&lt;/em&gt;, &lt;em&gt;model&lt;/em&gt; 等我们不想要的属性，或者我们想添加一些自定义属性，该如何处理。&lt;/p&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;解决方法&lt;/h2&gt;
&lt;p&gt;Google 了一大圈，没发现有自己想要的方案。其实想法很简单，获取到原始数据进行二次封装处理即可，并不需要继承实现自己的 &lt;em&gt;Serializer&lt;/em&gt;。&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;JSONResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;HttpResponse&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;
    An HttpResponse that renders its content into JSON.
    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__ …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;根据 &lt;a class="reference external" href="https://docs.djangoproject.com/en/1.9/topics/serialization/#serialization-formats-json"&gt;Serializing Django objects | Django documentation | Django&lt;/a&gt;
，使用内置默认的 serializer 格式化的 JSON 如下：&lt;/p&gt;
&lt;pre class="code json literal-block"&gt;
&lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;pk&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;4b678b301dfd8a4e0dad910de3ae245b&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;model&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;sessions.session&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;fields&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;quot;expire_date&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;2013-01-16T08:16:59.844Z&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="err"&gt;...&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;里面带有 &lt;em&gt;pk&lt;/em&gt;, &lt;em&gt;model&lt;/em&gt; 等我们不想要的属性，或者我们想添加一些自定义属性，该如何处理。&lt;/p&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;解决方法&lt;/h2&gt;
&lt;p&gt;Google 了一大圈，没发现有自己想要的方案。其实想法很简单，获取到原始数据进行二次封装处理即可，并不需要继承实现自己的 &lt;em&gt;Serializer&lt;/em&gt;。&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;JSONResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;HttpResponse&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;
    An HttpResponse that renders its content into JSON.
    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fields&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;serializers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;serialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'json'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fields&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;fields&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loads&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'fields'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;instance&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;response_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
        &lt;span class="n"&gt;response_data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'totalPages'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="n"&gt;response_data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'currentPage'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="n"&gt;response_data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'result'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;content&lt;/span&gt;

        &lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'content_type'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'application/json'&lt;/span&gt;
        &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;JSONResponse&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dumps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response_data&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="nb"&gt;list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Restaurant&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;all&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;JSONResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
</content><category term="django"></category></entry><entry><title>安装 phpMyAdmin</title><link href="https://magicalboy.com/note/install-phpmyadmin.html" rel="alternate"></link><published>2016-05-28T10:32:00+08:00</published><updated>2016-05-28T10:32:00+08:00</updated><author><name>Don</name></author><id>tag:magicalboy.com,2016-05-28:/note/install-phpmyadmin.html</id><summary type="html">&lt;p&gt;phpMyAdmin 是管理 MySQL 最方便的 Web 应用，如果经常使用 MySQL ，phpMyAdmin 是必备工具。&lt;/p&gt;
&lt;p&gt;本文主要参考资料：&lt;a class="reference external" href="https://docs.phpmyadmin.net/en/latest/setup.html"&gt;Installation — phpMyAdmin 4.7.0-dev documentation&lt;/a&gt;。&lt;/p&gt;
&lt;div class="section" id="os-x"&gt;
&lt;h2&gt;在 OS X 安装&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;去官网下载 &lt;a class="reference external" href="https://www.phpmyadmin.net/downloads/"&gt;最新的版本&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;解压到 &lt;em&gt;~/Sites/phpmyadmin&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;在 &lt;em&gt;phpMyAdmin&lt;/em&gt; 目录下创建一个可写的 &lt;em&gt;config&lt;/em&gt; 目录&lt;/li&gt;
&lt;li&gt;打开 &lt;em&gt;http://localhost/~[username]/phpMyAdmin/setup&lt;/em&gt;，加载配置，修改并保存&lt;/li&gt;
&lt;li&gt;将 &lt;em&gt;config&lt;/em&gt; 下生成的 &lt;em&gt;config.inc.php&lt;/em&gt; 移到 &lt;em&gt;phpmyadmin&lt;/em&gt; 根目录下&lt;/li&gt;
&lt;li&gt;删除 &lt;em&gt;config …&lt;/em&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;phpMyAdmin 是管理 MySQL 最方便的 Web 应用，如果经常使用 MySQL ，phpMyAdmin 是必备工具。&lt;/p&gt;
&lt;p&gt;本文主要参考资料：&lt;a class="reference external" href="https://docs.phpmyadmin.net/en/latest/setup.html"&gt;Installation — phpMyAdmin 4.7.0-dev documentation&lt;/a&gt;。&lt;/p&gt;
&lt;div class="section" id="os-x"&gt;
&lt;h2&gt;在 OS X 安装&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;去官网下载 &lt;a class="reference external" href="https://www.phpmyadmin.net/downloads/"&gt;最新的版本&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;解压到 &lt;em&gt;~/Sites/phpmyadmin&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;在 &lt;em&gt;phpMyAdmin&lt;/em&gt; 目录下创建一个可写的 &lt;em&gt;config&lt;/em&gt; 目录&lt;/li&gt;
&lt;li&gt;打开 &lt;em&gt;http://localhost/~[username]/phpMyAdmin/setup&lt;/em&gt;，加载配置，修改并保存&lt;/li&gt;
&lt;li&gt;将 &lt;em&gt;config&lt;/em&gt; 下生成的 &lt;em&gt;config.inc.php&lt;/em&gt; 移到 &lt;em&gt;phpmyadmin&lt;/em&gt; 根目录下&lt;/li&gt;
&lt;li&gt;删除 &lt;em&gt;config&lt;/em&gt; 目录&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例子：&lt;/p&gt;
&lt;pre class="code shell literal-block"&gt;
$ &lt;span class="nb"&gt;cd&lt;/span&gt; /Users/&lt;span class="o"&gt;[&lt;/span&gt;username&lt;span class="o"&gt;]&lt;/span&gt;/Sites/phpMyAdmin
$ mkdir config
$ chmod o+rw config
$ cp config.sample.inc.php config.inc.php
$ vi config.inc.php &lt;span class="c1"&gt;# 按官网推荐的配置
&lt;/span&gt;$ mv config.inc.php config
$ chmod o+w config/config.inc.php
$ mv config/config.inc.php .
$ chmod o-rw config.inc.php
$ rm -rf config
&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;2002&lt;/em&gt; 错误， 找不到 &lt;em&gt;mysql.sock&lt;/em&gt; 的解决方法：&lt;/p&gt;
&lt;pre class="code shell literal-block"&gt;
$ sudo mkdir /var/mysql
Password:
$ sudo ln -s /tmp/mysql.sock /var/mysql/mysql.sock
&lt;/pre&gt;
&lt;/div&gt;
</content><category term="php"></category><category term="web"></category></entry><entry><title>破解 Asset Catalog</title><link href="https://magicalboy.com/note/crack-asset-catalog.html" rel="alternate"></link><published>2016-05-24T11:30:00+08:00</published><updated>2016-05-24T11:30:00+08:00</updated><author><name>Don</name></author><id>tag:magicalboy.com,2016-05-24:/note/crack-asset-catalog.html</id><summary type="html">&lt;p&gt;Asset Catalog 是 Xcode 5 引入的一个新的图片管理方式，支持矢量图，这样设计师不需要再切 &amp;#64;2x, &amp;#64;3x 等多套图标，提高效率。&lt;/p&gt;
&lt;p&gt;使用了 Asset Catalog 的 App 在发布的时候，Xcode 会为这些图片资源打包成 &lt;strong&gt;Assets.car&lt;/strong&gt; 这样的文件，而且无法直接打开。&lt;/p&gt;
&lt;div class="section" id="assets-car"&gt;
&lt;h2&gt;提取 Assets.car 图片&lt;/h2&gt;
&lt;p&gt;使用开源的 &lt;a class="reference external" href="https://github.com/steventroughtonsmith/cartool"&gt;cartool&lt;/a&gt; 工具提取 &lt;em&gt;.car&lt;/em&gt; 文件中的资源。&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;clone 源码。&lt;/li&gt;
&lt;li&gt;编译，生成 &lt;em&gt;cartool&lt;/em&gt; 工具。&lt;/li&gt;
&lt;li&gt;使用 &lt;em&gt;cartool&lt;/em&gt; 破解 &lt;em&gt;.car&lt;/em&gt; 文件中的资源&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;pre class="code shell literal-block"&gt;
$ ./cartool &amp;lt;.car 文件的路径&amp;gt; &amp;lt;解压后的文件路径&amp;gt;
&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;这样就可以获取 &lt;em&gt;Assets …&lt;/em&gt;&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Asset Catalog 是 Xcode 5 引入的一个新的图片管理方式，支持矢量图，这样设计师不需要再切 &amp;#64;2x, &amp;#64;3x 等多套图标，提高效率。&lt;/p&gt;
&lt;p&gt;使用了 Asset Catalog 的 App 在发布的时候，Xcode 会为这些图片资源打包成 &lt;strong&gt;Assets.car&lt;/strong&gt; 这样的文件，而且无法直接打开。&lt;/p&gt;
&lt;div class="section" id="assets-car"&gt;
&lt;h2&gt;提取 Assets.car 图片&lt;/h2&gt;
&lt;p&gt;使用开源的 &lt;a class="reference external" href="https://github.com/steventroughtonsmith/cartool"&gt;cartool&lt;/a&gt; 工具提取 &lt;em&gt;.car&lt;/em&gt; 文件中的资源。&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;clone 源码。&lt;/li&gt;
&lt;li&gt;编译，生成 &lt;em&gt;cartool&lt;/em&gt; 工具。&lt;/li&gt;
&lt;li&gt;使用 &lt;em&gt;cartool&lt;/em&gt; 破解 &lt;em&gt;.car&lt;/em&gt; 文件中的资源&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;pre class="code shell literal-block"&gt;
$ ./cartool &amp;lt;.car 文件的路径&amp;gt; &amp;lt;解压后的文件路径&amp;gt;
&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;这样就可以获取 &lt;em&gt;Assets.car&lt;/em&gt; 中的素材了。由于这个工具已经差不多 &lt;strong&gt;3年&lt;/strong&gt; 没有更新，不支持 &lt;em&gt;&amp;#64;3x&lt;/em&gt; 图的导出。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="ios-images-extractor"&gt;
&lt;h2&gt;iOS-Images-Extractor&lt;/h2&gt;
&lt;p&gt;另一个 macOS 工具，&lt;a class="reference external" href="https://github.com/devcxm/iOS-Images-Extractor"&gt;https://github.com/devcxm/iOS-Images-Extractor&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;声明&lt;/h2&gt;
&lt;p&gt;由于素材等资源版权问题，本文仅作为学习目的，请切勿用于商业用途。&lt;/p&gt;
&lt;/div&gt;
</content><category term="iOS"></category><category term="crack"></category></entry><entry><title>树莓派 GPIO 模拟器：GPIOSim</title><link href="https://magicalboy.com/note/raspberry-pi-gpio-sim.html" rel="alternate"></link><published>2016-05-24T10:05:00+08:00</published><updated>2016-05-24T10:05:00+08:00</updated><author><name>Don</name></author><id>tag:magicalboy.com,2016-05-24:/note/raspberry-pi-gpio-sim.html</id><summary type="html">&lt;p&gt;GPIOSim 是一个树莓派 GPIO 模拟器，目前支持 Linux 和 OS X。它能够在 PC 上进行开发调试使用 RPi.GPIO 模块编写的树莓派应用。&lt;/p&gt;
&lt;p&gt;这是一个开源项目：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Github：&lt;a class="reference external" href="https://github.com/bobvann/GPIOSim"&gt;bobvann/GPIOSim: Raspberry Pi GPIO simulator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;博客主页：&lt;a class="reference external" href="http://bobvann.noip.me/gpiosim-raspberry-pi-gpio-simulator-for-linux-os-x/"&gt;GPIOSim: Raspberry Pi GPIO Simulator for Linux / OS X - Bob Vann&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="os-x"&gt;
&lt;h2&gt;在 OS X 上安装使用&lt;/h2&gt;
&lt;p&gt;运行环境：&lt;strong&gt;OS X 10.11.5，Python 3.5&lt;/strong&gt;
运行效果：&lt;/p&gt;
&lt;img alt="run on OS X" src="images/raspberry_pi_gpiosim_run_on_osx.png" /&gt;
&lt;div class="section" id="id1"&gt;
&lt;h3&gt;安装 …&lt;/h3&gt;&lt;/div&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;GPIOSim 是一个树莓派 GPIO 模拟器，目前支持 Linux 和 OS X。它能够在 PC 上进行开发调试使用 RPi.GPIO 模块编写的树莓派应用。&lt;/p&gt;
&lt;p&gt;这是一个开源项目：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Github：&lt;a class="reference external" href="https://github.com/bobvann/GPIOSim"&gt;bobvann/GPIOSim: Raspberry Pi GPIO simulator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;博客主页：&lt;a class="reference external" href="http://bobvann.noip.me/gpiosim-raspberry-pi-gpio-simulator-for-linux-os-x/"&gt;GPIOSim: Raspberry Pi GPIO Simulator for Linux / OS X - Bob Vann&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="os-x"&gt;
&lt;h2&gt;在 OS X 上安装使用&lt;/h2&gt;
&lt;p&gt;运行环境：&lt;strong&gt;OS X 10.11.5，Python 3.5&lt;/strong&gt;
运行效果：&lt;/p&gt;
&lt;img alt="run on OS X" src="images/raspberry_pi_gpiosim_run_on_osx.png" /&gt;
&lt;div class="section" id="id1"&gt;
&lt;h3&gt;安装&lt;/h3&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;安装 Python 3.x，可使用 Homebrew 工具安装。&lt;/li&gt;
&lt;li&gt;安装 Pillow，(Python 2.x 上叫 PIL)：&lt;em&gt;$ pip3.5 install Pillow&lt;/em&gt;。&lt;/li&gt;
&lt;li&gt;安装 configparser&lt;/li&gt;
&lt;li&gt;&lt;em&gt;git clone&lt;/em&gt; 源码并进入目录，执行 &lt;em&gt;$ python3.5 GPIOSim.py&lt;/em&gt;，即可运行 GUI。&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h3&gt;示例&lt;/h3&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="c1"&gt;# -*- coding: utf-8 -*-&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;RPi.GPIO&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;GPIO&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;
&lt;span class="c1"&gt;# BOARD编号方式，基于插座引脚编号&lt;/span&gt;
&lt;span class="c1"&gt;#GPIO.setmode(GPIO.BOARD)&lt;/span&gt;
&lt;span class="c1"&gt;# 输出模式&lt;/span&gt;
&lt;span class="n"&gt;GPIO&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;GPIO&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;OUT&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;GPIO&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;GPIO&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HIGH&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;GPIO&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;GPIO&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LOW&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;#GPIO.cleanup()&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;可以看到上面的代码有两行被注释的代码，因为这是一个小项目，没有模拟实现完整的 RPi.GPIO 模块。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="GPIO"></category><category term="RaspberryPi"></category><category term="Python"></category></entry><entry><title>树莓派 GPIO 入门</title><link href="https://magicalboy.com/note/raspberry-pi-gpio.html" rel="alternate"></link><published>2016-05-23T18:05:00+08:00</published><updated>2016-05-23T18:05:00+08:00</updated><author><name>Don</name></author><id>tag:magicalboy.com,2016-05-23:/note/raspberry-pi-gpio.html</id><summary type="html">&lt;p&gt;GPIO，通用型之输入输出（General Purpose I/O）的简称。树莓派内核中已经编译自带了 GPIO 的驱动，可以直接使用第三方函数库来进行编程。&lt;/p&gt;
&lt;p&gt;比较常用的第三方函数库有：&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Python GPIO&lt;/li&gt;
&lt;li&gt;wiringPi&lt;/li&gt;
&lt;li&gt;BCM2835 C Library&lt;/li&gt;
&lt;li&gt;Shell&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="section" id="model-b-40-pin-gpio"&gt;
&lt;h2&gt;树莓派 3 Model B 的 40 Pin GPIO 编号&lt;/h2&gt;
&lt;img alt="树莓派 3 Model B 的 40 Pin GPIO" src="https://www.element14.com/community/servlet/JiveServlet/previewBody/73950-102-10-339300/pi3_gpio.png" /&gt;
&lt;/div&gt;
&lt;div class="section" id="gpio-led"&gt;
&lt;h2&gt;使用 GPIO 接口控制 LED 闪烁&lt;/h2&gt;
&lt;div class="section" id="id1"&gt;
&lt;h3&gt;硬件清单&lt;/h3&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;树莓派 3 Model B x1。本人机子出自 Element14，GPIO 请参考上图。&lt;/li&gt;
&lt;li&gt;LED 发光二极管 x1。&lt;/li&gt;
&lt;li&gt;母头杜邦线 x2。这些材料在国内很容易买到的。&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h3&gt;原理说明 …&lt;/h3&gt;&lt;/div&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;GPIO，通用型之输入输出（General Purpose I/O）的简称。树莓派内核中已经编译自带了 GPIO 的驱动，可以直接使用第三方函数库来进行编程。&lt;/p&gt;
&lt;p&gt;比较常用的第三方函数库有：&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Python GPIO&lt;/li&gt;
&lt;li&gt;wiringPi&lt;/li&gt;
&lt;li&gt;BCM2835 C Library&lt;/li&gt;
&lt;li&gt;Shell&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="section" id="model-b-40-pin-gpio"&gt;
&lt;h2&gt;树莓派 3 Model B 的 40 Pin GPIO 编号&lt;/h2&gt;
&lt;img alt="树莓派 3 Model B 的 40 Pin GPIO" src="https://www.element14.com/community/servlet/JiveServlet/previewBody/73950-102-10-339300/pi3_gpio.png" /&gt;
&lt;/div&gt;
&lt;div class="section" id="gpio-led"&gt;
&lt;h2&gt;使用 GPIO 接口控制 LED 闪烁&lt;/h2&gt;
&lt;div class="section" id="id1"&gt;
&lt;h3&gt;硬件清单&lt;/h3&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;树莓派 3 Model B x1。本人机子出自 Element14，GPIO 请参考上图。&lt;/li&gt;
&lt;li&gt;LED 发光二极管 x1。&lt;/li&gt;
&lt;li&gt;母头杜邦线 x2。这些材料在国内很容易买到的。&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h3&gt;原理说明&lt;/h3&gt;
&lt;p&gt;LED 发光二极管有一长一短两根针脚。长的针脚接正极（GPIO 有 3.3V 或 5V 的高电平针脚输出），较短的针脚接 GND 形成电位差产生电流流动从而点亮 LED。
本示例没有直接连接正极端，而是连接到一个 GPIO 针脚上。最后通过程序控制 GPIO 口的电位高低状态即可控制LED的亮（GPIO口设置为高电平）或灭（GPIO口设置为低电平）。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h3&gt;硬件连接&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;面包版图&lt;/p&gt;
&lt;img alt="Use Raspberry pi 3 GPIO control LED to blink" src="images/raspberry_pi_3_gpio_led_bb.png" /&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;PCB 连接图：&lt;/p&gt;
&lt;img alt="PCB diag" src="images/raspberry_pi_3_gpio_led_pcb.png" /&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h3&gt;代码示例&lt;/h3&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="ch"&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span class="c1"&gt;# encoding: utf-8&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;RPi.GPIO&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;GPIO&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;

&lt;span class="c1"&gt;# 指定 GPIO 口的选定模式为 GPIO 引脚编号模式（而非主板编号模式）&lt;/span&gt;
&lt;span class="n"&gt;GPIO&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setmode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;GPIO&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;BCM&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# 指定 GPIO15（就是 LED 长针连接的 GPIO 针脚）的模式为输出模式&lt;/span&gt;
&lt;span class="c1"&gt;# 如果上面 GPIO 口的选定模式指定为主板模式的话，这里就应该指定8号而不是15号&lt;/span&gt;
&lt;span class="n"&gt;GPIO&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;GPIO&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;OUT&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# 循环10次&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;GPIO&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;GPIO&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# 最后清理 GPIO 口&lt;/span&gt;
&lt;span class="n"&gt;GPIO&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cleanup&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="GPIO"></category><category term="RaspberryPi"></category></entry><entry><title>bash shell 学习</title><link href="https://magicalboy.com/note/bash-shell.html" rel="alternate"></link><published>2016-05-17T10:25:00+08:00</published><updated>2016-05-17T10:25:00+08:00</updated><author><name>Don</name></author><id>tag:magicalboy.com,2016-05-17:/note/bash-shell.html</id><summary type="html">&lt;p&gt;shell 是程序员经常需要用到的东西，特别是 bash 脚本。如果不知道什么是 shell 和 脚本语言，请参考：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://zh.wikipedia.org/wiki/Unix_shell"&gt;什么是 shell？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://zh.wikipedia.org/wiki/脚本语言"&gt;脚本语言&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;简单来说， shell 是可以接受用户输入命令的程序，比如 Windows 下的命令行。&lt;/p&gt;
&lt;p&gt;而脚本语言可以理解为不需要编译，直接解释运行的语言。&lt;/p&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;换行与注释&lt;/h2&gt;
&lt;p&gt;1. bash 在解析字符的时候，对待“;”跟看见回车是一样的
1. 注释符号为 “#”&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;设计哲学&lt;/h2&gt;
&lt;p&gt;一切皆表达式。&lt;/p&gt;
&lt;p&gt;根据表达式的定义，任何表达式都必须有一个值。而 shell 在执行任何东西（不仅是命令）的时候都会有一个返回值。&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;在 bash 编程中，返回值取值范围：&lt;em&gt;0-255&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;跟 C 语言含义相反， bash 中 0 为真 …&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;shell 是程序员经常需要用到的东西，特别是 bash 脚本。如果不知道什么是 shell 和 脚本语言，请参考：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://zh.wikipedia.org/wiki/Unix_shell"&gt;什么是 shell？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://zh.wikipedia.org/wiki/脚本语言"&gt;脚本语言&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;简单来说， shell 是可以接受用户输入命令的程序，比如 Windows 下的命令行。&lt;/p&gt;
&lt;p&gt;而脚本语言可以理解为不需要编译，直接解释运行的语言。&lt;/p&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;换行与注释&lt;/h2&gt;
&lt;p&gt;1. bash 在解析字符的时候，对待“;”跟看见回车是一样的
1. 注释符号为 “#”&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;设计哲学&lt;/h2&gt;
&lt;p&gt;一切皆表达式。&lt;/p&gt;
&lt;p&gt;根据表达式的定义，任何表达式都必须有一个值。而 shell 在执行任何东西（不仅是命令）的时候都会有一个返回值。&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;在 bash 编程中，返回值取值范围：&lt;em&gt;0-255&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;跟 C 语言含义相反， bash 中 0 为真（true），非 0 为假（false）&lt;/li&gt;
&lt;li&gt;使用关键字 $? 来查看上一个执行命令的返回值&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;实例：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;bananapi@lemaker ~ $ ls
Home
bananapi@lemaker ~ $ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$?&lt;/span&gt;
&lt;span class="m"&gt;0&lt;/span&gt;
bananapi@lemaker ~ $ ls /don
ls: cannot access /don: No such file or directory
bananapi@lemaker ~ $ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$?&lt;/span&gt;
&lt;span class="m"&gt;2&lt;/span&gt;
bananapi@lemaker ~ $ don
-bash: don: &lt;span class="nb"&gt;command&lt;/span&gt; not found
bananapi@lemaker ~ $ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$?&lt;/span&gt;
&lt;span class="m"&gt;127&lt;/span&gt;
bananapi@lemaker ~ $ ls don&lt;span class="p"&gt;|&lt;/span&gt;wc -l
ls: cannot access don: No such file or directory
&lt;span class="m"&gt;0&lt;/span&gt;
bananapi@lemaker ~ $ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$?&lt;/span&gt;
&lt;span class="m"&gt;0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="if"&gt;
&lt;h2&gt;if 分支结构&lt;/h2&gt;
&lt;p&gt;组成一个语言的必要两种语法结构是分支结构和循环结构。作为一个编程语言， bash 也给我们提供了分支结构，其中最常用的就是 &lt;em&gt;if&lt;/em&gt;：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; list&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt; list&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;elif&lt;/span&gt; list&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt; list&lt;span class="p"&gt;;&lt;/span&gt; ... &lt;span class="k"&gt;else&lt;/span&gt; list&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;fi&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;if 语法中后面最常用的命令就是 []&lt;/strong&gt;，也是 bash 新手容易写错的地方：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;#正确的写法&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="nv"&gt;$ret&lt;/span&gt; -eq &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;
＃错读的写法
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;$ret&lt;/span&gt; -eq &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;#实际上 [] 是一个内建命令，等同于 test 命令&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;test&lt;/span&gt; &lt;span class="nv"&gt;$ret&lt;/span&gt; -eq &lt;span class="m"&gt;0&lt;/span&gt;
$ &lt;span class="nb"&gt;type&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt; is a shell &lt;span class="nb"&gt;builtin&lt;/span&gt;
bananapi@lemaker ~ $ &lt;span class="nb"&gt;type&lt;/span&gt; &lt;span class="nb"&gt;test&lt;/span&gt;
&lt;span class="nb"&gt;test&lt;/span&gt; is a shell &lt;span class="nb"&gt;builtin&lt;/span&gt;

&lt;span class="c1"&gt;#所以上面的 if 语句也可以写成：&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;test&lt;/span&gt; &lt;span class="nv"&gt;$ret&lt;/span&gt; -eq &lt;span class="m"&gt;0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="while-until"&gt;
&lt;h2&gt;while until 循环结构&lt;/h2&gt;
&lt;p&gt;语法结构：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;while&lt;/span&gt; list-1&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; list-2&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;done&lt;/span&gt;
&lt;span class="k"&gt;until&lt;/span&gt; list-1&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; list-2&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;done&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;while&lt;/strong&gt; 实例：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;

&lt;span class="c1"&gt;#注意变量声明时＝号左右不能有空格！&lt;/span&gt;
&lt;span class="nv"&gt;count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;

&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="nv"&gt;$count&lt;/span&gt; -le &lt;span class="m"&gt;100&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;do&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$count&lt;/span&gt;
&lt;span class="c1"&gt;#这里的 $[] 里面没有空格分隔，因为它并不是个 shell 命令，而是特殊字符，$[] 可以得到一个算数运算的值&lt;/span&gt;
&lt;span class="nv"&gt;count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;$&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;$count&lt;/span&gt;+1&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;done&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;until&lt;/strong&gt; 实例：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;

&lt;span class="nv"&gt;count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;

&lt;span class="k"&gt;until&lt;/span&gt; ! &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="nv"&gt;$count&lt;/span&gt; -le &lt;span class="m"&gt;100&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$count&lt;/span&gt;
    &lt;span class="c1"&gt;#这个运算只支持整数&lt;/span&gt;
    &lt;span class="nv"&gt;count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;$&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;$count&lt;/span&gt;+1&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;done&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="case"&gt;
&lt;h2&gt;case 分支结构&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;case&lt;/strong&gt; 和 &lt;strong&gt;for&lt;/strong&gt; 它们所判断的不再是“表达式”是否为真，而是去匹配字符串。case 分支的语法结构：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;case&lt;/span&gt; word in &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="o"&gt;[(]&lt;/span&gt; pattern &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; pattern &lt;span class="o"&gt;]&lt;/span&gt; ... &lt;span class="o"&gt;)&lt;/span&gt; list &lt;span class="p"&gt;;;&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt; ... &lt;span class="k"&gt;esac&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;实例：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;

 &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nv"&gt;$1&lt;/span&gt; in
     don&lt;span class="p"&gt;|&lt;/span&gt;jerry&lt;span class="o"&gt;)&lt;/span&gt;
     &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;hello &lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;&lt;span class="s2"&gt;!&amp;quot;&lt;/span&gt;
     &lt;span class="p"&gt;;;&lt;/span&gt;
     *&lt;span class="o"&gt;)&lt;/span&gt;
     &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;get out!&amp;quot;&lt;/span&gt;
     &lt;span class="p"&gt;;;&lt;/span&gt;
&lt;span class="k"&gt;esac&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;程序保存到文件 &lt;strong&gt;case.sh&lt;/strong&gt; ，执行结果：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sh &lt;span class="k"&gt;case&lt;/span&gt;.sh
get out!

$ sh &lt;span class="k"&gt;case&lt;/span&gt;.sh don
hello don!
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="for"&gt;
&lt;h2&gt;for 循环结构&lt;/h2&gt;
&lt;p&gt;暂无&lt;/p&gt;
&lt;/div&gt;
</content><category term="Linux"></category><category term="bash"></category><category term="shell"></category></entry><entry><title>exFAT 文件格式支持</title><link href="https://magicalboy.com/note/raspbian-exfat-support.html" rel="alternate"></link><published>2016-05-16T14:40:00+08:00</published><updated>2016-05-16T14:40:00+08:00</updated><author><name>Don</name></author><id>tag:magicalboy.com,2016-05-16:/note/raspbian-exfat-support.html</id><summary type="html">&lt;p&gt;exFAT (Extended File Allocation Table) 是一种较适合于闪存的文件系统，微软公司开发。&lt;/p&gt;
&lt;p&gt;基本上所有 Windows 系统，以及 OS X 和部分 Linux、Android 操作系统都支持这种文件系统格式。&lt;/p&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;为什么要使用 exFAT&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;支持拷贝文件大于 4 GB&lt;/li&gt;
&lt;li&gt;兼容性好，方便在不同设备上插拔拷贝数据&lt;/li&gt;
&lt;li&gt;部分大容量内存卡购买回来默认使用的就是这种格式&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如何让部分操作系统支持 exFAT？&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="raspberry-pi-raspbian"&gt;
&lt;h2&gt;Raspberry Pi (RASPBIAN)&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install exfat-fuse
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;安装完成后，重新插拔内存卡即可自动加载出来。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="android"&gt;
&lt;h2&gt;Android&lt;/h2&gt;
&lt;p&gt;暂无&lt;/p&gt;
&lt;/div&gt;
</summary><content type="html">&lt;p&gt;exFAT (Extended File Allocation Table) 是一种较适合于闪存的文件系统，微软公司开发。&lt;/p&gt;
&lt;p&gt;基本上所有 Windows 系统，以及 OS X 和部分 Linux、Android 操作系统都支持这种文件系统格式。&lt;/p&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;为什么要使用 exFAT&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;支持拷贝文件大于 4 GB&lt;/li&gt;
&lt;li&gt;兼容性好，方便在不同设备上插拔拷贝数据&lt;/li&gt;
&lt;li&gt;部分大容量内存卡购买回来默认使用的就是这种格式&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如何让部分操作系统支持 exFAT？&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="raspberry-pi-raspbian"&gt;
&lt;h2&gt;Raspberry Pi (RASPBIAN)&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install exfat-fuse
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;安装完成后，重新插拔内存卡即可自动加载出来。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="android"&gt;
&lt;h2&gt;Android&lt;/h2&gt;
&lt;p&gt;暂无&lt;/p&gt;
&lt;/div&gt;
</content><category term="Linux"></category><category term="Raspbian"></category><category term="exFAT"></category></entry><entry><title>Pelican No module named html_parser</title><link href="https://magicalboy.com/note/pelican-no-module-named-html_parser.html" rel="alternate"></link><published>2016-04-22T14:40:00+08:00</published><updated>2016-04-22T14:40:00+08:00</updated><author><name>Don</name></author><id>tag:magicalboy.com,2016-04-22:/note/pelican-no-module-named-html_parser.html</id><summary type="html">&lt;p class="first last"&gt;在 OS X 上解决 No module named html_parser 问题。&lt;/p&gt;
</summary><content type="html">&lt;img alt="pelican logo" src="http://docs.getpelican.com/en/3.2/_static/pelican.png" /&gt;
&lt;p&gt;错误消息：&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;from six.moves.html_parser import HTMLParser&lt;/div&gt;
&lt;div class="line"&gt;...&lt;/div&gt;
&lt;div class="line"&gt;ImportError: No module named html_parser&lt;/div&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;环境&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Pelican版本： &lt;a class="reference external" href="http://docs.getpelican.com/en/3.6.3/index.html"&gt;Pelican 3.6.3&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;OS X 环境：El Capitan 10.11.4，Pyton 2.7.x&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;解决方法&lt;/h2&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;$ pip uninstall pelican&lt;/li&gt;
&lt;li&gt;$ brew install python&lt;/li&gt;
&lt;li&gt;$ which python # should show /usr/local/bin/python&lt;/li&gt;
&lt;li&gt;$ python -V # should show Python 2.7.10&lt;/li&gt;
&lt;li&gt;$ pip install pelican&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;via &lt;a class="reference external" href="http://stackoverflow.com/a/26737768/1457771"&gt;python - Error using pelican-quickstart &amp;quot;No module named html_parser&amp;quot; - Stack Overflow&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</content><category term="pelican"></category></entry><entry><title>Objective C</title><link href="https://magicalboy.com/note/Objective-C.html" rel="alternate"></link><published>2016-01-14T13:55:11+08:00</published><updated>2016-01-14T13:55:11+08:00</updated><author><name>Don</name></author><id>tag:magicalboy.com,2016-01-14:/note/Objective-C.html</id><summary type="html">&lt;div class="contents topic" id="id1"&gt;
&lt;p class="topic-title first"&gt;目录&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id2" id="id17"&gt;介绍&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id3" id="id18"&gt;类&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id4" id="id19"&gt;声明&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id5" id="id20"&gt;实现&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id6" id="id21"&gt;属性&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id7" id="id22"&gt;声明&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id8" id="id23"&gt;方法&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id9" id="id24"&gt;类方法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#block" id="id25"&gt;Block 块&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#protocol" id="id26"&gt;Protocol 协议&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id10" id="id27"&gt;声明&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id11" id="id28"&gt;使用&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#category" id="id29"&gt;Category 分类&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id12" id="id30"&gt;声明&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id13" id="id31"&gt;Objective C 类型&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id14" id="id32"&gt;类型和字面常量&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id15" id="id33"&gt;编译器指令&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id16" id="id34"&gt;其它&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id17"&gt;介绍&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Objective-C 作为 C 程序设计语言的超集，支持与 C 相同的基本语法。您会看到所有熟悉的元素，例如基本类型（&lt;tt class="docutils literal"&gt;int&lt;/tt&gt;、&lt;tt class="docutils literal"&gt;float&lt;/tt&gt; 等）、结构、函数、指针，以及流程控制结构，如 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;if...else&lt;/span&gt;&lt;/tt&gt; 语句和 &lt;tt class="docutils literal"&gt;for&lt;/tt&gt; 语句。还可以直接使用 C 标准库 …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="contents topic" id="id1"&gt;
&lt;p class="topic-title first"&gt;目录&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id2" id="id17"&gt;介绍&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id3" id="id18"&gt;类&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id4" id="id19"&gt;声明&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id5" id="id20"&gt;实现&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id6" id="id21"&gt;属性&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id7" id="id22"&gt;声明&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id8" id="id23"&gt;方法&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id9" id="id24"&gt;类方法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#block" id="id25"&gt;Block 块&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#protocol" id="id26"&gt;Protocol 协议&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id10" id="id27"&gt;声明&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id11" id="id28"&gt;使用&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#category" id="id29"&gt;Category 分类&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id12" id="id30"&gt;声明&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id13" id="id31"&gt;Objective C 类型&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id14" id="id32"&gt;类型和字面常量&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id15" id="id33"&gt;编译器指令&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id16" id="id34"&gt;其它&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id17"&gt;介绍&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Objective-C 作为 C 程序设计语言的超集，支持与 C 相同的基本语法。您会看到所有熟悉的元素，例如基本类型（&lt;tt class="docutils literal"&gt;int&lt;/tt&gt;、&lt;tt class="docutils literal"&gt;float&lt;/tt&gt; 等）、结构、函数、指针，以及流程控制结构，如 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;if...else&lt;/span&gt;&lt;/tt&gt; 语句和 &lt;tt class="docutils literal"&gt;for&lt;/tt&gt; 语句。还可以直接使用 C 标准库，例如 stdlib.h 和 stdio.h。&lt;/p&gt;
&lt;p&gt;Objective-C 为 ANSI C 添加了下述语法和功能：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;定义新的类&lt;/li&gt;
&lt;li&gt;类和实例方法&lt;/li&gt;
&lt;li&gt;方法调用（称为发消息）&lt;/li&gt;
&lt;li&gt;属性声明（以及通过它们自动合成存取方法）&lt;/li&gt;
&lt;li&gt;静态和动态类型化&lt;/li&gt;
&lt;li&gt;块 (block)，已封装的、可在任何时候执行的多段代码&lt;/li&gt;
&lt;li&gt;基本语言的扩展，例如协议和类别&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id18"&gt;类&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;如同其他大多数面向对象语言那样，Objective-C 中的类，支持数据的封装，并定义对这些数据执行的操作。对象是类的运行时实例。它包含自己的实例变量（由其类声明）的内存副本，以及类方法的指针。您可以采用两步法（称为分配和初始化）创建对象。&lt;/p&gt;
&lt;p&gt;Objective-C 中某个类包括两个不同的部分：接口和实现。接口部分包含类声明，并定义该类的公共接口。如同 C 代码那样，您定义头文件和源代码文件，将公共声明与代码的实现细节分开。如果是私有的，将它们放在实现文件中。这些文件的文件扩展名，列在下表中。&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="5%" /&gt;
&lt;col width="95%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;扩展名&lt;/th&gt;
&lt;th class="head"&gt;源类型&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;.h&lt;/td&gt;
&lt;td&gt;头文件。头文件包含类、类型、函数和常量声明。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;.m&lt;/td&gt;
&lt;td&gt;实现文件。可以同时包含 Objective-C 代码和 C 代码。有时也称为源文件。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;.mm&lt;/td&gt;
&lt;td&gt;实现文件。除了包含 Objective-C 代码和 C 代码以外，还可以包含 C++ 代码。仅当您实际引用您的 Objective-C 代码中的 C++ 类或功能时，才使用此扩展名。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class="section" id="id4"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id19"&gt;声明&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;如下图中的语法声明名为 MyClass 的类，它是从基础类（或根类）NSObject 继承而来的。（根类是供其他类直接或间接继承的类。）类声明以编译器指令 &amp;#64;interface 开始，以 &amp;#64;end 指令结束。类名称后面（以冒号分隔），是父类的名称。在 Objective-C 中，一个类只能有一个父类。&lt;/p&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;img alt="类的声明" class="align-center" src="http://developer.apple.com/library/ios/referencelibrary/GettingStarted/RoadMapiOSCh/chapters/WriteObjective-CCode/Art/class_decl_2x.png" style="width: 496px; height: 208px;" /&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;在 &amp;#64;interface 指令和 &amp;#64;end 指令之间，编写属性和方法的声明。这些声明组成了类的公共接口。公共接口相关的自定函数、常量或数据类型的声明放在 &amp;#64;interface ...&amp;#64;end 块之外。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id5"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id20"&gt;实现&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;类实现的语法和声明相似。以 &amp;#64;implementation 编译器指令开始（接着是该类的名称），以 &amp;#64;end 指令结束。中间是方法实现。（函数实现应在 &amp;#64;implementation ...&amp;#64;end 块之外。）一个实现应该总是将导入它的接口文件作为代码的第一行。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#import &amp;quot;MyClass.h&amp;quot;&lt;/span&gt;

&lt;span class="k"&gt;@implementation&lt;/span&gt; &lt;span class="bp"&gt;MyClass&lt;/span&gt;

&lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;initWithString:&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;NSString&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;aName&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// code goes here&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;MyClass&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;myClassWithString:&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;NSString&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;aName&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// code goes here&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;@end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;当您想要在源代码中包括头文件时，请在头文件或源文件的前几行之中，指定一个导入 (#import) 指令，#import 指令类似于 C 的 #include 指令，不过前者确保同一文件只被包括一次。如果您要导入框架的大部分或所有头文件，请导入框架的包罗头文件 (umbrella header file)，它具有与框架相同的名称。导入（假设的）QuartzCore 框架的头文件的语法是：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#import &amp;lt;QuartzCore/QuartzCore.h&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id6"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id21"&gt;属性&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;属性通常是指某些由对象封装或储存的数据。它可以是标志（如名称或颜色），也可以是与一个或多个其他对象的关系。一个对象的类定义一个接口，该接口使其对象的用户能获取并设定所封装属性的值。执行这些操作的方法，称为 &lt;strong&gt;存取方法&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;存取方法有两种类型，命名约定：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;“getter” 存取方法返回属性的值，且名称与属性相同。&lt;/li&gt;
&lt;li&gt;“setter” 存取方法设定属性的新值，且形式为 setPropertyName:，其中属性名称的第一个字母大写。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;正确命名的存取方法是 Cocoa 和 Cocoa Touch 框架的多种技术的关键元素，如 &lt;strong&gt;键－值编码&lt;/strong&gt;  (KVC)，它的机制是，通过对象的名称间接访问对象的属性。&lt;/p&gt;
&lt;div class="section" id="id7"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id22"&gt;声明&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Objective-C 提供属性声明(&amp;#64;property)编译器指令作为一种方便的写法，用于存取方法的声明和实现。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;@property&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;nonatomic&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;copy&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="bp"&gt;NSString&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;userName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;使用属性声明，指定您想要的行为。编译器接着可以根据该声明，创建或合成实际的 getter 和 setter 方法。已声明的属性减少了您必须编写的样板文件代码量，因此使代码更简洁、更少机会出错。&lt;/p&gt;
&lt;p&gt;编译器自动合成所声明的属性。在合成属性时，它创建自己的存取方法，以及“支持”该属性的专有实例变量。实例变量的名称与属性的名称相同，但具有下划线前缀 (_)。只有在对象初始化和取消分配的方法中，您的应用程序应该直接访问实例变量（而不是其属性）。&lt;/p&gt;
&lt;p&gt;注意：在 Xcode4.4 之后不需要 &lt;tt class="docutils literal"&gt;&amp;#64;synthesize property&lt;/tt&gt;，会自动生成 &lt;tt class="docutils literal"&gt;&amp;#64;synthesize property = _property&lt;/tt&gt;。&lt;/p&gt;
&lt;p&gt;如果您想要让实例变量采用不同名称，可以绕过自动合成，并明确地合成属性。在类实现中使用 &amp;#64;synthesize 编译器指令，让编译器产生存取方法，以及进行特殊命名的实例变量。例如：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;@synthesize&lt;/span&gt; &lt;span class="n"&gt;enabled&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;_isEnabled&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;同时，在声明属性时，您可以指定存取方法的自定名称，通常是使 Boolean 属性的 getter 方法遵循约定形式，如下所示：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;@property&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;assign&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;getter&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;isEnabled&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kt"&gt;BOOL&lt;/span&gt; &lt;span class="n"&gt;enabled&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// Assign new value, change name of getter method&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;对于包含对象的变量，Objective-C 既支持动态类型化，也支持静态类型化。&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;静态变量：静态类型化的变量，要在变量类型声明中包括类名称。&lt;/li&gt;
&lt;li&gt;动态变量：动态类型化的变量，则要给对象使用类型 id。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="bp"&gt;MyClass&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;myObject1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="c1"&gt;// Static typing&lt;/span&gt;
&lt;span class="kt"&gt;id&lt;/span&gt;       &lt;span class="n"&gt;myObject2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="c1"&gt;// Dynamic typing&lt;/span&gt;
&lt;span class="bp"&gt;NSString&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;userName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="c1"&gt;// From Your First iOS App (static typing)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;请注意第一个声明中的星号 (*)。在 Objective-C 中，执行对象引用的只能是指针。不能完全理解也不用担心，并非一定要成为指针专家才能开始 Objective-C 编程。码农只需要记住，在静态类型化的对象的声明中，变量的名称前面应放置一个星号。id 类型意味着一个指针。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id8"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id23"&gt;方法&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Objective-C 中有两种类型的方法：实例方法和类方法。&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;实例方法&lt;/strong&gt;，由类的实例来执行。换言之，在调用实例方法之前，必须先创建该类的实例。实例方法是最常见的方法类型。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;类方法&lt;/strong&gt;，可由它所在的类直接执行。它不需要对象的实例作为消息的接收者。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;方法声明包含方法类型标识符、返回类型、一个或多个签名关键词，以及参数类型和名称信息。以下是 insertObject:atIndex: 实例方法的声明。&lt;/p&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;img alt="方法声明语法" class="align-center" src="http://developer.apple.com/library/ios/referencelibrary/GettingStarted/RoadMapiOSCh/chapters/WriteObjective-CCode/Art/method_decl_2x.png" style="width: 492px; height: 252px;" /&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;对于实例方法，声明前面是减号 (-)；对于类方法，对应指示器是加号 (+)。
一个方法的实际名称 (insertObject:atIndex:) 由方法签名关键词组成，之间用冒号字符分隔。冒号字符表明有参数存在。在上述示例中，该方法采用两个参数。如果方法没有参数，则省略第一个签名关键词后面的冒号。&lt;/p&gt;
&lt;p&gt;当您想要调用一个方法时，通过给实现该方法的对象发送一则消息来实现。消息包含方法名称，以及方法所需的参数信息（类型要匹配）。您发送到一个对象的所有消息，都被动态地分派，这样使 Objective-C 类的多态行为更加容易。（多态性是指不同类型的对象响应同一消息的能力。）有时被调用的方法，是由接收消息对象的类之超类来实现。&lt;/p&gt;
&lt;p&gt;要发消息，需要一个消息表达式。&lt;strong&gt;消息表达式&lt;/strong&gt; 使用方括号（[ 和 ]）将消息本身（以及任何所需参数）括起来，同时将接收消息的对象放在最左边方括号右侧。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;myArray&lt;/span&gt; &lt;span class="nl"&gt;insertObject&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;anObject&lt;/span&gt; &lt;span class="nl"&gt;atIndex&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;为避免声明大量局部变量来储存临时结果，Objective-C 让您嵌套消息表达式。每个嵌套表达式的返回值，都用作另一个消息的一个参数或接收对象。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="n"&gt;myAppObject&lt;/span&gt; &lt;span class="n"&gt;theArray&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="nl"&gt;insertObject&lt;/span&gt;&lt;span class="p"&gt;:[&lt;/span&gt;&lt;span class="n"&gt;myAppObject&lt;/span&gt; &lt;span class="n"&gt;objectToInsert&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="nl"&gt;atIndex&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Objective-C (2.0) 还提供用于调用存取方法的点记法语法。&lt;strong&gt;存取方法&lt;/strong&gt; 获取并设定对象的状态，因此对于封装很重要，是所有对象的重要功能。对象隐藏或封装其状态，并显示接口，该接口是访问该状态的所有实例都通用的。使用点记法语法，您可以将上个示例重新编写为如下形式：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;myAppObject&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;theArray&lt;/span&gt; &lt;span class="nl"&gt;insertObject&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;myAppObject&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objectToInsert&lt;/span&gt; &lt;span class="nl"&gt;atIndex&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;使用点记法语法进行赋值：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;myAppObject&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;theArray&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;aNewArray&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// 相当于&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;myAppObject&lt;/span&gt; &lt;span class="nl"&gt;setTheArray&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;aNewArray&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在点记法表达式中，您不能使用对动态类型化的对象（类型为 id 的对象）的引用。&lt;/p&gt;
&lt;p&gt;TODO: 介绍方法属性&lt;/p&gt;
&lt;div class="section" id="id9"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id24"&gt;类方法&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Objective C 的类方法，类似于 C++ 中的静态类方法。&lt;/p&gt;
&lt;p&gt;一般将类方法用作工厂方法创建类的新实例，或，访问与该类关联的一些共享信息。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="bp"&gt;NSMutableArray&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;myArray&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="c1"&gt;// nil is essentially the same as NULL&lt;/span&gt;

&lt;span class="c1"&gt;// Create a new array and assign it to the myArray variable.&lt;/span&gt;
&lt;span class="n"&gt;myArray&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="bp"&gt;NSMutableArray&lt;/span&gt; &lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="block"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id25"&gt;Block 块&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;块是封装工作单元的对象，即可在任何时间执行的代码段。它们在本质上是可移植的匿名函数，可作为方法和函数的参数传入，或可从方法和函数中返回。块本身具有一个已类型化的参数列表，且可能具有推断或声明的返回类型。您还可以将块赋值给变量，然后像调用函数一样调用它。&lt;/p&gt;
&lt;p&gt;插入符号 (^) 是用作块的语法标记。块的参数、返回值和正文（即执行的代码）存在其他类似的语法约定。下图解释了该语法，尤其是在将块赋值给变量时。&lt;/p&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;img alt="Block 声明语法" class="align-center" src="http://developer.apple.com/library/ios/referencelibrary/GettingStarted/RoadMapiOSCh/chapters/WriteObjective-CCode/Art/blocks_2x.png" style="width: 570px; height: 210px;" /&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;您接着可以调用块变量，就像它是一个函数一样：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;myBlock&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// result is 28&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Block 可以在低版本 iOS 中使用，它只需要编译器 Xcode 支持。&lt;/p&gt;
&lt;p&gt;TODO: 深入&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="protocol"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id26"&gt;Protocol 协议&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;协议是一组尚未实现的方法列表，任何的类均可采纳该协议并给出方法的具体实现。&lt;/p&gt;
&lt;p&gt;协议经常应用于委托及事件触发。&lt;/p&gt;
&lt;p&gt;Objective-C中协议的概念与Java中接口的概念并不完全相同。&lt;/p&gt;
&lt;div class="section" id="id10"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id27"&gt;声明&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;类似于接口的声明，但没有父类，并且不能定义实例变量，尽管可以声明属性。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;@protocol&lt;/span&gt; &lt;span class="nc"&gt;MyProtocol&lt;/span&gt;

&lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;myProtocolMethod&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;@end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;另外，Protocol 也可以在声明时继承别的 Protocol。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// 注意此处的 NSObject 是一个 Protocol&lt;/span&gt;
&lt;span class="k"&gt;@protocol&lt;/span&gt; &lt;span class="nc"&gt;MyProtocol&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="bp"&gt;NSObject&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;myProtocolMethod&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;@end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id11"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id28"&gt;使用&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;将该协议的名称放在尖括号 (&amp;lt;...&amp;gt;) 中，并且放在它继承的类的名称后面：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;@interface&lt;/span&gt; &lt;span class="nc"&gt;SomeClass&lt;/span&gt; : &lt;span class="nc"&gt;SomeSuperClass&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;MyProtocol&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="category"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id29"&gt;Category 分类&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;一个分类可以将方法的实现分解进一系列分离的文件。可让扩展类的接口而无需要对类进行实例化。&lt;/p&gt;
&lt;p&gt;Objective-C借用并扩展了Smalltalk实现中的“分类”概念。&lt;/p&gt;
&lt;p&gt;将类别用作一种手段，来对头文件内的相关方法声明进行分组。甚至还可以将不同的类别声明放在不同的头文件中。框架在其所有头文件中使用这些技巧，来达到清晰明确。&lt;/p&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;img alt="系统框架中的类别" src="static/images/category.png" /&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Objective C 中的 Category 仅允许增加方法，不允许增加成员变量。&lt;/p&gt;
&lt;div class="section" id="id12"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id30"&gt;声明&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;声明类别语法，是使用圆括号将类别名称括起来。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;@interface&lt;/span&gt; &lt;span class="bp"&gt;NSArray&lt;/span&gt; &lt;span class="nl"&gt;(NSExtendedArray)&lt;/span&gt;
&lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;NSArray&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;arrayByAddingObject:&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;anObject&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="k"&gt;@end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;类扩展匿名类别，在实现 (.m) 文件中声明专有属性和专有方法。类扩展看起来类似于类别，只是圆括号之间没有文本。在高版本的Xcode自动生成的 UIViewController 子类实现中可以看到：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;@interface&lt;/span&gt; &lt;span class="nc"&gt;MyAppDelegate&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;@property&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;strong&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;MyDataObject&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;@end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在运行时，分类中的方法与类原有的方法并无区别，其代码可以访问包括私有类成员变量在内的所有成员变量。虽然分类可以访问类的私有成员，但通常利用属性的访问方法来访问是一种更好的做法，可以使得分类与原有类更加独立。&lt;/p&gt;
&lt;p&gt;若分类声明了与类中原有方法同名的函数，则分类中的方法会被调用。因此分类不仅可以增加类的方法，也可以代替原有的方法。这个特性可以用于修正原有代码中的错误，更可以从根本上改变程序中原有类的行为。若两个分类中的方法同名，则被调用的方法是不可预测的。&lt;/p&gt;
&lt;p&gt;允许动态的、按需的加载分类；若不需要某一分类提供的功能，可以简单的不编译之。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id13"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id31"&gt;Objective C 类型&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Objective-C 有几个不能用作变量名称的术语，保留用于特殊用途。其中包括已定义的类型以及与这些类型相配的字面常量，和以 &amp;#64; 符号为前缀的编译器指令。&lt;/p&gt;
&lt;div class="section" id="id14"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id32"&gt;类型和字面常量&lt;/a&gt;&lt;/h3&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="7%" /&gt;
&lt;col width="93%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;类型&lt;/th&gt;
&lt;th class="head"&gt;字面常量及描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;id&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;动态对象&lt;/strong&gt; 类型。动态类型化的对象和静态类型化的对象的否定字面常量，都是 nil。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Class&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;动态类&lt;/strong&gt; 类型。其否定字面常量是 Nil。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;SEL&lt;/td&gt;
&lt;td&gt;选择器的数据类型 (typedef)；此数据类型表示运行时的方法签名。其否定字面常量是 NULL。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;BOOL&lt;/td&gt;
&lt;td&gt;Boolean 类型。字面常量值是 YES 和 NO。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;在某些情况下，这些类型和字面常量替换 ANSI C 相应的类型和字面常量。将消息发送到 nil，完全没有影响。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id15"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id33"&gt;编译器指令&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&amp;#64;interface&lt;/li&gt;
&lt;li&gt;&amp;#64;end&lt;/li&gt;
&lt;li&gt;&amp;#64;implementation&lt;/li&gt;
&lt;li&gt;&amp;#64;protocol&lt;/li&gt;
&lt;li&gt;&amp;#64;property&lt;/li&gt;
&lt;li&gt;&amp;#64;synthesize&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id16"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id34"&gt;其它&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;self : 引用当前对象；它等同于 C++ 中的 this。&lt;/li&gt;
&lt;li&gt;super : 引用超类对象；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果您将消息发送到 self，运行时先在当前对象的类中查找方法实现；如果在那里找不到方法，则在其超类中查找（依此类推）。如果您将消息发送到 super，运行时先在超类中查找方法实现。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="Objective-C"></category></entry><entry><title>Android Wear</title><link href="https://magicalboy.com/note/android_wear.html" rel="alternate"></link><published>2016-01-14T13:55:11+08:00</published><updated>2016-01-14T13:55:11+08:00</updated><author><name>Don</name></author><id>tag:magicalboy.com,2016-01-14:/note/android_wear.html</id><summary type="html">&lt;img alt="Android wear for watch" src="images/Android-Wear.jpg" /&gt;
&lt;p&gt;可穿戴智能设备终于要火起来了，大多数拥有者认为自己是科技潮人。可穿戴智能设备充满了潜在市场，目前主要有智能手表，眼镜和可穿戴健身设备。可穿戴设备以后可以发展到鞋子，手套甚至笔等。&lt;/p&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;Android Wear&lt;/h2&gt;
&lt;p&gt;2014年3月19日，Google 发布了可穿戴设备 SDK 的开发者预览版（&lt;a class="reference external" href="https://developer.android.com/wear/index.html"&gt;https://developer.android.com/wear/index.html&lt;/a&gt;），率先打开可穿戴智能设备平台这个大门。所以，我们可以通过更新 SDK 获取 Android Wear 模拟器来尝个新鲜。&lt;/p&gt;
&lt;p&gt;Android Wear 开发平台搭建步骤：&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Sign Up for the Developer Preview：&lt;a class="reference external" href="https://developer.android.com/wear/preview/signup.html"&gt;https://developer.android.com/wear/preview/signup.html&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;img alt="Sign Up for the Developer Preview" src="images/sign_up_google_developer_preview.png" /&gt;
&lt;p&gt;在等待申请请求通过同时，配置项目环境，请留意您申请的 Gmail …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;img alt="Android wear for watch" src="images/Android-Wear.jpg" /&gt;
&lt;p&gt;可穿戴智能设备终于要火起来了，大多数拥有者认为自己是科技潮人。可穿戴智能设备充满了潜在市场，目前主要有智能手表，眼镜和可穿戴健身设备。可穿戴设备以后可以发展到鞋子，手套甚至笔等。&lt;/p&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;Android Wear&lt;/h2&gt;
&lt;p&gt;2014年3月19日，Google 发布了可穿戴设备 SDK 的开发者预览版（&lt;a class="reference external" href="https://developer.android.com/wear/index.html"&gt;https://developer.android.com/wear/index.html&lt;/a&gt;），率先打开可穿戴智能设备平台这个大门。所以，我们可以通过更新 SDK 获取 Android Wear 模拟器来尝个新鲜。&lt;/p&gt;
&lt;p&gt;Android Wear 开发平台搭建步骤：&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Sign Up for the Developer Preview：&lt;a class="reference external" href="https://developer.android.com/wear/preview/signup.html"&gt;https://developer.android.com/wear/preview/signup.html&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;img alt="Sign Up for the Developer Preview" src="images/sign_up_google_developer_preview.png" /&gt;
&lt;p&gt;在等待申请请求通过同时，配置项目环境，请留意您申请的 Gmail 邮箱。&lt;/p&gt;
&lt;ol class="arabic simple" start="2"&gt;
&lt;li&gt;打开 Android SDK Manager 更新 Android SDK Tools 至最新版本（22.6.1)。安装更新后便可以见到 Android 4.4 下有 Android Wear ARM EABI v7a System Image，选择并安装它。&lt;/li&gt;
&lt;/ol&gt;
&lt;img alt="Android Wear ARM EABI v7a System Image" src="images/android_wear_image.png" /&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;ol class="arabic simple" start="3"&gt;
&lt;li&gt;收到注册确认邮件，可选成为 Google Play 商店提供的 Android Wear Preview app 测试者。下载附件 Preview Support library and samples（AndroidWearPreview.zip）。&lt;/li&gt;
&lt;li&gt;升级 ADT（当前最新 &lt;a class="reference external" href="http://dl.google.com/android/ADT-22.6.1.zip"&gt;22.6.1&lt;/a&gt;）。&lt;/li&gt;
&lt;li&gt;打开 Eclipse 为 Wear 创建新的 Android Virtual Device (AVD)。&lt;/li&gt;
&lt;/ol&gt;
&lt;img alt="android_wear_avd" src="images/android_wear_avd.png" /&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;ol class="arabic simple" start="6"&gt;
&lt;li&gt;运行刚刚创建的 Wear AVD，显示的是时间和未连接的手机图标，表示 wear 未与 Android 设备匹配上。&lt;/li&gt;
&lt;/ol&gt;
&lt;img alt="未匹配的 Android Wear" src="images/android_wear_no_pair.png" /&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;img alt="Android Wear 提示信息" src="images/android_wear_round.png" /&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Android Wear 的特色是通知方式和界面都很 Cool。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;参考资料：&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="https://developer.android.com/wear/preview/start.html"&gt;Get Started with the Developer Preview | Android Developers&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</content><category term="Wear"></category><category term="Android"></category></entry><entry><title>Bluetooth</title><link href="https://magicalboy.com/note/bluetooth.html" rel="alternate"></link><published>2016-01-14T13:55:11+08:00</published><updated>2016-01-14T13:55:11+08:00</updated><author><name>Don</name></author><id>tag:magicalboy.com,2016-01-14:/note/bluetooth.html</id><summary type="html">&lt;div class="section" id="ios"&gt;
&lt;h2&gt;iOS&lt;/h2&gt;
&lt;p&gt;Bluetooth access on the ios is very limited. As a matter of fact you can only access it through the GameKit.&lt;/p&gt;
&lt;/div&gt;
</summary><content type="html">&lt;div class="section" id="ios"&gt;
&lt;h2&gt;iOS&lt;/h2&gt;
&lt;p&gt;Bluetooth access on the ios is very limited. As a matter of fact you can only access it through the GameKit.&lt;/p&gt;
&lt;/div&gt;
</content><category term="bluetooth"></category></entry><entry><title>Brew</title><link href="https://magicalboy.com/note/brew.html" rel="alternate"></link><published>2016-01-14T13:55:11+08:00</published><updated>2016-01-14T13:55:11+08:00</updated><author><name>Don</name></author><id>tag:magicalboy.com,2016-01-14:/note/brew.html</id><summary type="html">&lt;div class="section" id="homebrew"&gt;
&lt;h2&gt;Homebrew&lt;/h2&gt;
&lt;p&gt;OS X 或缺的软件包管理器，使用 Ruby 语言实现。官网：&lt;a class="reference external" href="http://brew.sh/index_zh-cn.html"&gt;http://brew.sh/index_zh-cn.html&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;安装日志&lt;/h2&gt;
&lt;p&gt;在 OS X 10.9.2，Xcode 5.1 下安装 Brew 0.9.5 的日志：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ruby -e &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;curl -fsSL https://raw.github.com/mxcl/homebrew/go/install&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;==&lt;/span&gt;&amp;gt; This script will install:
/usr/local/bin/brew
/usr …&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="section" id="homebrew"&gt;
&lt;h2&gt;Homebrew&lt;/h2&gt;
&lt;p&gt;OS X 或缺的软件包管理器，使用 Ruby 语言实现。官网：&lt;a class="reference external" href="http://brew.sh/index_zh-cn.html"&gt;http://brew.sh/index_zh-cn.html&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;安装日志&lt;/h2&gt;
&lt;p&gt;在 OS X 10.9.2，Xcode 5.1 下安装 Brew 0.9.5 的日志：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ruby -e &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;curl -fsSL https://raw.github.com/mxcl/homebrew/go/install&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;==&lt;/span&gt;&amp;gt; This script will install:
/usr/local/bin/brew
/usr/local/Library/...
/usr/local/share/man/man1/brew.1
&lt;span class="o"&gt;==&lt;/span&gt;&amp;gt; The following directories will be made group writable:
/usr/local/.
/usr/local/include
/usr/local/lib
/usr/local/share
/usr/local/share/locale
&lt;span class="o"&gt;==&lt;/span&gt;&amp;gt; The following directories will have their group &lt;span class="nb"&gt;set&lt;/span&gt; to admin:
/usr/local/.
/usr/local/include
/usr/local/lib
/usr/local/share
/usr/local/share/locale

Press RETURN to &lt;span class="k"&gt;continue&lt;/span&gt; or any other key to &lt;span class="nv"&gt;abort&lt;/span&gt;
&lt;span class="o"&gt;==&lt;/span&gt;&amp;gt; /usr/bin/sudo /bin/chmod g+rwx /usr/local/. /usr/local/include /usr/local/lib /usr/local/share /usr/local/share/locale
Password:
&lt;span class="o"&gt;==&lt;/span&gt;&amp;gt; /usr/bin/sudo /usr/bin/chgrp admin /usr/local/. /usr/local/include /usr/local/lib /usr/local/share /usr/local/share/locale
&lt;span class="o"&gt;==&lt;/span&gt;&amp;gt; /usr/bin/sudo /bin/mkdir /Library/Caches/Homebrew
&lt;span class="o"&gt;==&lt;/span&gt;&amp;gt; /usr/bin/sudo /bin/chmod g+rwx /Library/Caches/Homebrew
&lt;span class="o"&gt;==&lt;/span&gt;&amp;gt; Installing the Command Line Tools &lt;span class="o"&gt;(&lt;/span&gt;expect a GUI popup&lt;span class="o"&gt;)&lt;/span&gt;:
&lt;span class="o"&gt;==&lt;/span&gt;&amp;gt; /usr/bin/sudo /usr/bin/xcode-select --install
xcode-select: note: install requested &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nb"&gt;command&lt;/span&gt; line developer tools
Press any key when the installation has completed.
&lt;span class="o"&gt;==&lt;/span&gt;&amp;gt; Downloading and installing Homebrew...
remote: Counting objects: &lt;span class="m"&gt;156977&lt;/span&gt;, &lt;span class="k"&gt;done&lt;/span&gt;.
remote: Compressing objects: &lt;span class="m"&gt;100&lt;/span&gt;% &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;44923&lt;/span&gt;/44923&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="k"&gt;done&lt;/span&gt;.
remote: Total &lt;span class="m"&gt;156977&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;delta &lt;span class="m"&gt;110948&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;, reused &lt;span class="m"&gt;156977&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;delta &lt;span class="m"&gt;110948&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
Receiving objects: &lt;span class="m"&gt;100&lt;/span&gt;% &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;156977&lt;/span&gt;/156977&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;29&lt;/span&gt;.38 MiB &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="m"&gt;368&lt;/span&gt;.00 KiB/s, &lt;span class="k"&gt;done&lt;/span&gt;.
Resolving deltas: &lt;span class="m"&gt;100&lt;/span&gt;% &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;110948&lt;/span&gt;/110948&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="k"&gt;done&lt;/span&gt;.
From https://github.com/Homebrew/homebrew
 * &lt;span class="o"&gt;[&lt;/span&gt;new branch&lt;span class="o"&gt;]&lt;/span&gt;      master     -&amp;gt; origin/master
HEAD is now at 6a3b2d2 brew-unpack: remove obsoleted bottle &lt;span class="nv"&gt;workaround&lt;/span&gt;
&lt;span class="o"&gt;==&lt;/span&gt;&amp;gt; Installation successful!
You should run &lt;span class="sb"&gt;`&lt;/span&gt;brew doctor&lt;span class="err"&gt;&amp;#39;&lt;/span&gt; *before* you install anything.
Now type: brew &lt;span class="nb"&gt;help&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
</content></entry><entry><title>Cocoa Auto Layout</title><link href="https://magicalboy.com/note/cocoa-auto-layout.html" rel="alternate"></link><published>2016-01-14T13:55:11+08:00</published><updated>2016-01-14T13:55:11+08:00</updated><author><name>Don</name></author><id>tag:magicalboy.com,2016-01-14:/note/cocoa-auto-layout.html</id><summary type="html">&lt;p&gt;Auto Layout 是 iOS 6.0 和 Xcode 4.5 的新特性。&lt;/p&gt;
&lt;p&gt;使用 Cocoa Auto Layout 系统为用户界面元素定义布局约束，其中约束（Constraints）表示用户界面控件之间的关系，比如 “这些视图从头至尾排列”。&lt;/p&gt;
&lt;p&gt;Cocoa Auto Layout 让用户来定义界面元素的布局规则。&lt;/p&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;视图之间的约束表示&lt;/h2&gt;
&lt;/div&gt;
</summary><content type="html">&lt;p&gt;Auto Layout 是 iOS 6.0 和 Xcode 4.5 的新特性。&lt;/p&gt;
&lt;p&gt;使用 Cocoa Auto Layout 系统为用户界面元素定义布局约束，其中约束（Constraints）表示用户界面控件之间的关系，比如 “这些视图从头至尾排列”。&lt;/p&gt;
&lt;p&gt;Cocoa Auto Layout 让用户来定义界面元素的布局规则。&lt;/p&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;视图之间的约束表示&lt;/h2&gt;
&lt;/div&gt;
</content><category term="cocoa"></category><category term="iOS"></category><category term="auto layout"></category></entry><entry><title>C++ 学习笔记</title><link href="https://magicalboy.com/note/cpp.html" rel="alternate"></link><published>2016-01-14T13:55:11+08:00</published><updated>2016-01-14T13:55:11+08:00</updated><author><name>Don</name></author><id>tag:magicalboy.com,2016-01-14:/note/cpp.html</id><summary type="html">&lt;div class="contents topic" id="id1"&gt;
&lt;p class="topic-title first"&gt;目录&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id2" id="id13"&gt;概述&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id3" id="id14"&gt;语法&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id4" id="id15"&gt;注释&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id5" id="id16"&gt;编译预处理指令&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#namespace" id="id17"&gt;命名空间 Namespace&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#main" id="id18"&gt;main 函数&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id6" id="id19"&gt;语句&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id7" id="id20"&gt;标识符&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id8" id="id21"&gt;数据类型&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id9" id="id22"&gt;系统指定的数据类型&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id10" id="id23"&gt;变量&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id11" id="id24"&gt;常量&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id12" id="id25"&gt;表达式&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id13"&gt;概述&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;C++是20世纪80年代中期（发行于1983）由AT&amp;amp;T贝尔实验室的 Bjarne Stroustrup 开发的。&lt;/p&gt;
&lt;p&gt;属于面向对象语言，它包含 C 语言全部属性。&lt;/p&gt;
&lt;p&gt;使用很广泛，不得不学。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id14"&gt;语法&lt;/a&gt;&lt;/h2&gt;
&lt;div class="section" id="id4"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id15"&gt;注释&lt;/a&gt;&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// 这是单行注释&lt;/span&gt;
&lt;span class="cm"&gt;/**&lt;/span&gt;
&lt;span class="cm"&gt; * 这是&lt;/span&gt;
&lt;span class="cm"&gt; * 多行的注释&lt;/span&gt;
&lt;span class="cm"&gt; */&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id5"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id16"&gt;编译预处理指令&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;编译器对 source code 编译之前做的事。用 &amp;quot;#&amp;quot; 开头的命令行来表示。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;filename&amp;gt; // 尖括号表示包含的是 C++ 标准库的头文件&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;quot;book …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="contents topic" id="id1"&gt;
&lt;p class="topic-title first"&gt;目录&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id2" id="id13"&gt;概述&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id3" id="id14"&gt;语法&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id4" id="id15"&gt;注释&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id5" id="id16"&gt;编译预处理指令&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#namespace" id="id17"&gt;命名空间 Namespace&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#main" id="id18"&gt;main 函数&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id6" id="id19"&gt;语句&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id7" id="id20"&gt;标识符&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id8" id="id21"&gt;数据类型&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id9" id="id22"&gt;系统指定的数据类型&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id10" id="id23"&gt;变量&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id11" id="id24"&gt;常量&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id12" id="id25"&gt;表达式&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id13"&gt;概述&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;C++是20世纪80年代中期（发行于1983）由AT&amp;amp;T贝尔实验室的 Bjarne Stroustrup 开发的。&lt;/p&gt;
&lt;p&gt;属于面向对象语言，它包含 C 语言全部属性。&lt;/p&gt;
&lt;p&gt;使用很广泛，不得不学。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id14"&gt;语法&lt;/a&gt;&lt;/h2&gt;
&lt;div class="section" id="id4"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id15"&gt;注释&lt;/a&gt;&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// 这是单行注释&lt;/span&gt;
&lt;span class="cm"&gt;/**&lt;/span&gt;
&lt;span class="cm"&gt; * 这是&lt;/span&gt;
&lt;span class="cm"&gt; * 多行的注释&lt;/span&gt;
&lt;span class="cm"&gt; */&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id5"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id16"&gt;编译预处理指令&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;编译器对 source code 编译之前做的事。用 &amp;quot;#&amp;quot; 开头的命令行来表示。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;filename&amp;gt; // 尖括号表示包含的是 C++ 标准库的头文件&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;quot;book.h&amp;quot;   // 包含的是用户自己的头文件&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="namespace"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id17"&gt;命名空间 Namespace&lt;/a&gt;&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;是 C++ 编译系统为各种命名对象（即标识符）所指定的有效范围。std (Standard 的缩写) 表示 C++ 标准库的所有命名对象，使用分号结束。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="main"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id18"&gt;main 函数&lt;/a&gt;&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  &lt;span class="c1"&gt;// 程序执行入口&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;int 返回值给 OS。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id6"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id19"&gt;语句&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;函数体内包括两类语句：
- 声明语句：告诉编译系统本函数使用哪些数据。
- 可执行语句：导致某些动作发生，在翻译成机器语言指令后执行。包括赋值语句，return语句等。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;miles&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;            &lt;span class="c1"&gt;// 声明语句&lt;/span&gt;
&lt;span class="n"&gt;cin&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;miles&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;           &lt;span class="c1"&gt;// 输入语句&lt;/span&gt;
&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;miles&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="c1"&gt;// 输出语句&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id7"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id20"&gt;标识符&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;标识符用来给程序中的各种数据元素和对象命名的。&lt;/p&gt;
&lt;p&gt;保留字，即关键字属于 C++ 的特殊标识符。比如：const, float, include, int, namespace, retrun 等。程序员自定义的标识符，如上例中的 miles。&lt;/p&gt;
&lt;p&gt;标识符语法规则：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;必须以字母或下划线开头。&lt;/li&gt;
&lt;li&gt;标识符中只能包含字母，数字或下划线。（上一条说了不能使用数字开头）&lt;/li&gt;
&lt;li&gt;不能使用 C++ 保留字。&lt;/li&gt;
&lt;li&gt;大小定敏感。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;命名规则：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;最好取有意义的名称，见名知义。&lt;/li&gt;
&lt;li&gt;建议使用 “匈牙利符号” 的命名规则，即非首单词的第一个字母大写。比如：dollarsPerHour.&lt;/li&gt;
&lt;li&gt;不管使用什么命名规则，一定要保持命名规则的一致性。&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id8"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id21"&gt;数据类型&lt;/a&gt;&lt;/h2&gt;
&lt;div class="section" id="id9"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id22"&gt;系统指定的数据类型&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;整型 int&lt;/li&gt;
&lt;li&gt;实型 float&lt;/li&gt;
&lt;li&gt;布尔类型 bool (George Boole）&lt;/li&gt;
&lt;li&gt;字符型 char (1 byte)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;TODO&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id10"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id23"&gt;变量&lt;/a&gt;&lt;/h3&gt;
&lt;/div&gt;
&lt;div class="section" id="id11"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id24"&gt;常量&lt;/a&gt;&lt;/h3&gt;
&lt;/div&gt;
&lt;div class="section" id="id12"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id25"&gt;表达式&lt;/a&gt;&lt;/h3&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="C++"></category></entry><entry><title>Epub 电子书</title><link href="https://magicalboy.com/note/epub.html" rel="alternate"></link><published>2016-01-14T13:55:11+08:00</published><updated>2016-01-14T13:55:11+08:00</updated><author><name>Don</name></author><id>tag:magicalboy.com,2016-01-14:/note/epub.html</id><summary type="html">&lt;div class="section" id="id1"&gt;
&lt;h2&gt;ePub 中文乱码处理&lt;/h2&gt;
&lt;p&gt;修改字体集：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="k"&gt;font-face&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;font-family&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;zw&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="nt"&gt;src&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nd"&gt;url&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;res&lt;/span&gt;&lt;span class="o"&gt;:///&lt;/span&gt;&lt;span class="nt"&gt;opt&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;sony&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;ebook&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;FONT&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;zw&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;ttf&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
    &lt;span class="nt"&gt;url&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;res&lt;/span&gt;&lt;span class="o"&gt;:///&lt;/span&gt;&lt;span class="nt"&gt;Data&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;FONT&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;zw&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;ttf&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
    &lt;span class="nt"&gt;url&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;res&lt;/span&gt;&lt;span class="o"&gt;:///&lt;/span&gt;&lt;span class="nt"&gt;opt&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;sony&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;ebook&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;FONT&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;tt0011m_&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;ttf&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="nt"&gt;url&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;res&lt;/span&gt;&lt;span class="o"&gt;:///&lt;/span&gt;&lt;span class="nt"&gt;fonts&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;ttf&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;zw&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;ttf&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
    &lt;span class="nt"&gt;url&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;res&lt;/span&gt;&lt;span class="o"&gt;:///../../&lt;/span&gt;&lt;span class="nt"&gt;media&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;mmcblk0p1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;fonts&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;zw&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;ttf&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
    &lt;span class="nt"&gt;url&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;res&lt;/span&gt;&lt;span class="o"&gt;:///&lt;/span&gt;&lt;span class="nt"&gt;DK_System&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;system&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;font&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;zw&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;ttf&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
    &lt;span class="nt"&gt;url …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="section" id="id1"&gt;
&lt;h2&gt;ePub 中文乱码处理&lt;/h2&gt;
&lt;p&gt;修改字体集：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="k"&gt;font-face&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;font-family&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;zw&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="nt"&gt;src&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nd"&gt;url&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;res&lt;/span&gt;&lt;span class="o"&gt;:///&lt;/span&gt;&lt;span class="nt"&gt;opt&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;sony&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;ebook&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;FONT&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;zw&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;ttf&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
    &lt;span class="nt"&gt;url&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;res&lt;/span&gt;&lt;span class="o"&gt;:///&lt;/span&gt;&lt;span class="nt"&gt;Data&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;FONT&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;zw&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;ttf&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
    &lt;span class="nt"&gt;url&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;res&lt;/span&gt;&lt;span class="o"&gt;:///&lt;/span&gt;&lt;span class="nt"&gt;opt&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;sony&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;ebook&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;FONT&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;tt0011m_&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;ttf&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="nt"&gt;url&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;res&lt;/span&gt;&lt;span class="o"&gt;:///&lt;/span&gt;&lt;span class="nt"&gt;fonts&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;ttf&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;zw&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;ttf&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
    &lt;span class="nt"&gt;url&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;res&lt;/span&gt;&lt;span class="o"&gt;:///../../&lt;/span&gt;&lt;span class="nt"&gt;media&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;mmcblk0p1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;fonts&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;zw&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;ttf&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
    &lt;span class="nt"&gt;url&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;res&lt;/span&gt;&lt;span class="o"&gt;:///&lt;/span&gt;&lt;span class="nt"&gt;DK_System&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;system&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;font&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;zw&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;ttf&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
    &lt;span class="nt"&gt;url&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;res&lt;/span&gt;&lt;span class="o"&gt;:///&lt;/span&gt;&lt;span class="nt"&gt;abook&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;fonts&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;zw&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;ttf&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
    &lt;span class="nt"&gt;url&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;res&lt;/span&gt;&lt;span class="o"&gt;:///&lt;/span&gt;&lt;span class="nt"&gt;system&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;fonts&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;zw&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;ttf&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
    &lt;span class="nt"&gt;url&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;res&lt;/span&gt;&lt;span class="o"&gt;:///&lt;/span&gt;&lt;span class="nt"&gt;system&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;media&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;sdcard&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;fonts&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;zw&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;ttf&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
    &lt;span class="nt"&gt;url&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;res&lt;/span&gt;&lt;span class="o"&gt;:///&lt;/span&gt;&lt;span class="nt"&gt;sdcard&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;fonts&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;zw&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;ttf&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
    &lt;span class="nt"&gt;url&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;res&lt;/span&gt;&lt;span class="o"&gt;:///&lt;/span&gt;&lt;span class="nt"&gt;system&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;fonts&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;DroidSansFallback&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;ttf&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
    &lt;span class="nt"&gt;url&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;fonts&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;zw&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;ttf&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;以上代码支持SONY、DR800SG、NOOK、翰林V3+等各机型。&lt;/p&gt;
&lt;p&gt;更具体操作，请参考：&lt;a class="reference external" href="http://www.by-smart.com/forum.php?mod=viewthread&amp;amp;tid=2000"&gt;http://www.by-smart.com/forum.php?mod=viewthread&amp;amp;tid=2000&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</content><category term="epub"></category><category term="ebook"></category></entry><entry><title>在 OS X 上给 Android 刷机</title><link href="https://magicalboy.com/note/flash-android-on-mac.html" rel="alternate"></link><published>2016-01-14T13:55:11+08:00</published><updated>2016-01-14T13:55:11+08:00</updated><author><name>Don</name></author><id>tag:magicalboy.com,2016-01-14:/note/flash-android-on-mac.html</id><summary type="html">&lt;p&gt;Google 在其 I/O 大会上发布了最新的 Android M Preview，看得非常激动，尤其是原生的权限管理那块，于是拿起手上的 Nexus 6 动作体验一番。&lt;/p&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;下载&lt;/h2&gt;
&lt;p&gt;可以在 &lt;a class="reference external" href="https://developer.android.com/index.html"&gt;Android 开发者&lt;/a&gt; 下载，如果看不到入口，请检查语言并选择英语。或者直接进入 &lt;a class="reference external" href="https://developer.android.com/preview/download.html"&gt;下载页面&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;如果下载遇到问题，可以考虑从国内网盘找，下载完成后验证一下。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;安装&lt;/h2&gt;
&lt;p&gt;解压之后，配置好 PATH，并按照 &lt;a class="reference external" href="https://developers.google.com/android/nexus/images#instructions"&gt;官网的安装方法&lt;/a&gt;，执行 flash-all 时出现了如下错误：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; ./flash-all.sh
ERROR: could not get pipe properties
target reported max download size of &lt;span class="m"&gt;536870912 …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Google 在其 I/O 大会上发布了最新的 Android M Preview，看得非常激动，尤其是原生的权限管理那块，于是拿起手上的 Nexus 6 动作体验一番。&lt;/p&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;下载&lt;/h2&gt;
&lt;p&gt;可以在 &lt;a class="reference external" href="https://developer.android.com/index.html"&gt;Android 开发者&lt;/a&gt; 下载，如果看不到入口，请检查语言并选择英语。或者直接进入 &lt;a class="reference external" href="https://developer.android.com/preview/download.html"&gt;下载页面&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;如果下载遇到问题，可以考虑从国内网盘找，下载完成后验证一下。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;安装&lt;/h2&gt;
&lt;p&gt;解压之后，配置好 PATH，并按照 &lt;a class="reference external" href="https://developers.google.com/android/nexus/images#instructions"&gt;官网的安装方法&lt;/a&gt;，执行 flash-all 时出现了如下错误：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; ./flash-all.sh
ERROR: could not get pipe properties
target reported max download size of &lt;span class="m"&gt;536870912&lt;/span&gt; bytes
sending &lt;span class="s1"&gt;&amp;#39;bootloader&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;3807&lt;/span&gt; KB&lt;span class="o"&gt;)&lt;/span&gt;...

...

target reported max download size of &lt;span class="m"&gt;536870912&lt;/span&gt; bytes
archive does not contain &lt;span class="s1"&gt;&amp;#39;boot.sig&amp;#39;&lt;/span&gt;
archive does not contain &lt;span class="s1"&gt;&amp;#39;recovery.sig&amp;#39;&lt;/span&gt;
fastboot&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;17343&lt;/span&gt;,0xa08e91d4&lt;span class="o"&gt;)&lt;/span&gt; malloc: *** mach_vm_map&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1981542400&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; failed &lt;span class="o"&gt;(&lt;/span&gt;error &lt;span class="nv"&gt;code&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
*** error: can&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;t allocate region
*** &lt;span class="nb"&gt;set&lt;/span&gt; a breakpoint in malloc_error_break to debug
failed to allocate &lt;span class="m"&gt;1979559444&lt;/span&gt; bytes
error: update package missing system.img
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;根据日志猜测，出现这个问题可能是因为镜像文件太大的原因，于是将 flash-all.sh 脚本里面最后一条 fastboot -w update image-shamu-MPZ44Q.zip 手动安装：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;fastboot flash bootloader bootloader-shamu-moto-apq8084-71.11.img
fastboot reboot-bootloader
fastboot flash radio radio-shamu-D4.01-9625-05.16+FSG-9625-02.94.img
fastboot reboot-bootloader
fastboot flash system system.img
fastboot flash userdata userdata.img
fastboot flash boot boot.img
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;重新启动大约 1 分钟，可以看到新的引导流程，眼前一新：&lt;/p&gt;
&lt;img alt="Android M Preview" src="images/AndroidMP.png" /&gt;
&lt;p&gt;再附一张应用的权限管理：&lt;/p&gt;
&lt;img alt="国内很多APP无法启动" src="images/android_wecat_per.png" /&gt;
&lt;p&gt;EOF&lt;/p&gt;
&lt;/div&gt;
</content><category term="Android"></category></entry><entry><title>WHR-G300N V2 刷机</title><link href="https://magicalboy.com/note/flash-openwrt-from-tftp.html" rel="alternate"></link><published>2016-01-14T13:55:11+08:00</published><updated>2016-01-14T13:55:11+08:00</updated><author><name>Don</name></author><id>tag:magicalboy.com,2016-01-14:/note/flash-openwrt-from-tftp.html</id><summary type="html">&lt;div class="section" id="openwrt"&gt;
&lt;h2&gt;OpenWrt 介绍&lt;/h2&gt;
&lt;blockquote&gt;
&lt;a class="reference external" href="https://zh.wikipedia.org/zh-cn/OpenWrt"&gt;OpenWrt&lt;/a&gt;  是用于嵌入式设备的一个 Linux 发行版本。&lt;/blockquote&gt;
&lt;p&gt;所有最新的固件下载地址：&lt;a class="reference external" href="https://downloads.openwrt.org/chaos_calmer/15.05/"&gt;https://downloads.openwrt.org/chaos_calmer/15.05/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;类似的还有 DD-WRT，比较偏向实用，Web 配置比较强大，但较难定制。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;WHR-G300N V2&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;产品名称： BUFFALO 巴法络 WHR-G300N V2，硬件配置同 Buffalo WHR-G301N。&lt;/li&gt;
&lt;li&gt;购买链接：&lt;a class="reference external" href="http://www.amazon.cn/BUFFALO"&gt;http://www.amazon.cn/BUFFALO&lt;/a&gt;-巴法络-WHR-G300N-V2-WHR-G300N-CH-高速无线路由器/dp/B005PKUNUC&lt;/li&gt;
&lt;li&gt;官网地址：&lt;a class="reference external" href="http://www.buffalotech.com/products/wireless/single-band-routers/airstation-n300-wireless-router"&gt;http://www.buffalotech.com/products/wireless/single-band-routers/airstation-n300-wireless-router&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;OpenWrt Wiki …&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="section" id="openwrt"&gt;
&lt;h2&gt;OpenWrt 介绍&lt;/h2&gt;
&lt;blockquote&gt;
&lt;a class="reference external" href="https://zh.wikipedia.org/zh-cn/OpenWrt"&gt;OpenWrt&lt;/a&gt;  是用于嵌入式设备的一个 Linux 发行版本。&lt;/blockquote&gt;
&lt;p&gt;所有最新的固件下载地址：&lt;a class="reference external" href="https://downloads.openwrt.org/chaos_calmer/15.05/"&gt;https://downloads.openwrt.org/chaos_calmer/15.05/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;类似的还有 DD-WRT，比较偏向实用，Web 配置比较强大，但较难定制。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;WHR-G300N V2&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;产品名称： BUFFALO 巴法络 WHR-G300N V2，硬件配置同 Buffalo WHR-G301N。&lt;/li&gt;
&lt;li&gt;购买链接：&lt;a class="reference external" href="http://www.amazon.cn/BUFFALO"&gt;http://www.amazon.cn/BUFFALO&lt;/a&gt;-巴法络-WHR-G300N-V2-WHR-G300N-CH-高速无线路由器/dp/B005PKUNUC&lt;/li&gt;
&lt;li&gt;官网地址：&lt;a class="reference external" href="http://www.buffalotech.com/products/wireless/single-band-routers/airstation-n300-wireless-router"&gt;http://www.buffalotech.com/products/wireless/single-band-routers/airstation-n300-wireless-router&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;OpenWrt Wiki：&lt;a class="reference external" href="http://wiki.openwrt.org/toh/buffalo/whr-g300nv2"&gt;http://wiki.openwrt.org/toh/buffalo/whr-g300nv2&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;刷机教程参考：&lt;a class="reference external" href="http://www.dd-wrt.com/wiki/index.php/WHR-G300N_V2"&gt;http://www.dd-wrt.com/wiki/index.php/WHR-G300N_V2&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="tftp"&gt;
&lt;h2&gt;砖头复活记：tftp 刷机教程&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;刷机环境：OS X El Capitan&lt;/li&gt;
&lt;li&gt;tftp 固件：&lt;a class="reference external" href="https://downloads.openwrt.org/chaos_calmer/15.05/ar71xx/generic/openwrt-15.05-ar71xx-generic-whr-g301n-squashfs-tftp.bin"&gt;https://downloads.openwrt.org/chaos_calmer/15.05/ar71xx/generic/openwrt-15.05-ar71xx-generic-whr-g301n-squashfs-tftp.bin&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;1. 用网线连接路由器，打开电源，用 ifconfig 查看网络接口，比如 en0；
修改本机 IP：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo ifconfig en0 &lt;span class="m"&gt;192&lt;/span&gt;.168.11.2
&lt;/pre&gt;&lt;/div&gt;
&lt;ol class="arabic simple" start="2"&gt;
&lt;li&gt;配置网络，将 192.168.11.1 跟路由器的 MAC 地址关联起来：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo arp -s &lt;span class="m"&gt;192&lt;/span&gt;.168.11.1 xx:xx:xx:xx:xx:xx
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;MAC 地址见背后标签上的 SSID。&lt;/p&gt;
&lt;ol class="arabic simple" start="3"&gt;
&lt;li&gt;这个时候可以断开路由器电源了，接着 cd 到固件所在目录，执行 tftp：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Set verbose mode on &lt;span class="o"&gt;(&lt;/span&gt;so we know what&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;s going on&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
tftp&amp;gt; verbose
Verbose mode on.
Binary mode on &lt;span class="o"&gt;(&lt;/span&gt;because we are uploading a binary file&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
tftp&amp;gt; binary
mode &lt;span class="nb"&gt;set&lt;/span&gt; to octet
Trace on &lt;span class="o"&gt;(&lt;/span&gt;so we get feedback on our commands&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
tftp&amp;gt; trace
Packet tracing on.
Rexmt &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;to retry the upload on failure every &lt;span class="m"&gt;1&lt;/span&gt; second&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
tftp&amp;gt; rexmt &lt;span class="m"&gt;1&lt;/span&gt;
And timeout to &lt;span class="m"&gt;60&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;repeatedly retry the upload &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="m"&gt;60&lt;/span&gt; seconds before giving up&lt;span class="o"&gt;)&lt;/span&gt;
tftp&amp;gt; timeout &lt;span class="m"&gt;60&lt;/span&gt;
tftp&amp;gt; connect &lt;span class="m"&gt;192&lt;/span&gt;.168.11.1
尽管路由器是关的
tftp&amp;gt; status
查看当前的配置状态
tftp&amp;gt; put tftp.bin
tftp.bin 就是下载回来的 openwrt-tftp版本的固件，已经被重命名。
&lt;/pre&gt;&lt;/div&gt;
&lt;ol class="arabic simple" start="4"&gt;
&lt;li&gt;将路由器的电源接上，同时重复执行以上的 put 指令，直到有以下反应：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;tftp&amp;gt; put tftp.bin
putting tftp.bin to &lt;span class="m"&gt;192&lt;/span&gt;.168.11.1:tftp.bin &lt;span class="o"&gt;[&lt;/span&gt;octet&lt;span class="o"&gt;]&lt;/span&gt;
sent WRQ &amp;lt;&lt;span class="nv"&gt;file&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;tftp.bin, &lt;span class="nv"&gt;mode&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;octet&amp;gt;
sent WRQ &amp;lt;&lt;span class="nv"&gt;file&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;tftp.bin, &lt;span class="nv"&gt;mode&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;octet&amp;gt;
received ACK &amp;lt;&lt;span class="nv"&gt;block&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&amp;gt;
sent DATA &amp;lt;&lt;span class="nv"&gt;block&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;, &lt;span class="m"&gt;512&lt;/span&gt; bytes&amp;gt;
...
sent DATA &amp;lt;&lt;span class="nv"&gt;block&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;6529&lt;/span&gt;, &lt;span class="m"&gt;36&lt;/span&gt; bytes&amp;gt;
received ACK &amp;lt;&lt;span class="nv"&gt;block&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;6529&lt;/span&gt;&amp;gt;
Sent &lt;span class="m"&gt;3342372&lt;/span&gt; bytes in &lt;span class="m"&gt;2&lt;/span&gt;.7 seconds &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;9903324&lt;/span&gt; bits/sec&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;此时上传完毕，可以输入 quit 退出。&lt;/p&gt;
&lt;ol class="arabic simple" start="5"&gt;
&lt;li&gt;路由器红色的灯会有不同的反应，几分钟后会自动重启。此致，成功复活！&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content><category term="Linux"></category><category term="OpenWrt"></category></entry><entry><title>Fragment</title><link href="https://magicalboy.com/note/fragment.html" rel="alternate"></link><published>2016-01-14T13:55:11+08:00</published><updated>2016-01-14T13:55:11+08:00</updated><author><name>Don</name></author><id>tag:magicalboy.com,2016-01-14:/note/fragment.html</id><summary type="html">&lt;div class="contents topic" id="id1"&gt;
&lt;p class="topic-title first"&gt;目录&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id2" id="id3"&gt;Fragment 定义&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#fragment-demo" id="id4"&gt;Fragment Demo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id3"&gt;Fragment 定义&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;为了让界面可以在平板上更好地展示，Android在3.0版本引入了Fragment(碎片)功能，它非常类似于Activity，可以像Activity一样包含布局。Fragment通常是嵌套在Activity中使用的。&lt;/p&gt;
&lt;img alt="Fragments" src="images/fragments.png" /&gt;
&lt;p&gt;可以看出，使用Fragment可以让我们更加充分地利用平板的屏幕空间。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="fragment-demo"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id4"&gt;Fragment Demo&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="http://blog.csdn.net/guolin_blog/article/details/8881711"&gt;http://blog.csdn.net/guolin_blog/article/details/8881711&lt;/a&gt;
&lt;a class="reference external" href="https://developer.android.com/guide/components/fragments.html"&gt;https://developer.android.com/guide/components/fragments.html&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</summary><content type="html">&lt;div class="contents topic" id="id1"&gt;
&lt;p class="topic-title first"&gt;目录&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id2" id="id3"&gt;Fragment 定义&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#fragment-demo" id="id4"&gt;Fragment Demo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id3"&gt;Fragment 定义&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;为了让界面可以在平板上更好地展示，Android在3.0版本引入了Fragment(碎片)功能，它非常类似于Activity，可以像Activity一样包含布局。Fragment通常是嵌套在Activity中使用的。&lt;/p&gt;
&lt;img alt="Fragments" src="images/fragments.png" /&gt;
&lt;p&gt;可以看出，使用Fragment可以让我们更加充分地利用平板的屏幕空间。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="fragment-demo"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id4"&gt;Fragment Demo&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="http://blog.csdn.net/guolin_blog/article/details/8881711"&gt;http://blog.csdn.net/guolin_blog/article/details/8881711&lt;/a&gt;
&lt;a class="reference external" href="https://developer.android.com/guide/components/fragments.html"&gt;https://developer.android.com/guide/components/fragments.html&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</content><category term="Android"></category></entry><entry><title>Geeks vs Nerds</title><link href="https://magicalboy.com/note/geeks-vs-nerds.html" rel="alternate"></link><published>2016-01-14T13:55:11+08:00</published><updated>2016-01-14T13:55:11+08:00</updated><author><name>Don</name></author><id>tag:magicalboy.com,2016-01-14:/note/geeks-vs-nerds.html</id><summary type="html">&lt;a class="reference external image-reference" href="http://www.mastersinit.org/geeks-vs-nerds/"&gt;&lt;img alt="Geeks vs Nerds" src="http://www.mastersinit.org/geeks-vs-nerds/geek-nerd.jpg" /&gt;&lt;/a&gt;
</summary><content type="html">&lt;a class="reference external image-reference" href="http://www.mastersinit.org/geeks-vs-nerds/"&gt;&lt;img alt="Geeks vs Nerds" src="http://www.mastersinit.org/geeks-vs-nerds/geek-nerd.jpg" /&gt;&lt;/a&gt;
</content><category term="geek"></category><category term="nerd"></category></entry><entry><title>Gentoo 2015</title><link href="https://magicalboy.com/note/gentoo.html" rel="alternate"></link><published>2016-01-14T13:55:11+08:00</published><updated>2016-01-14T13:55:11+08:00</updated><author><name>Don</name></author><id>tag:magicalboy.com,2016-01-14:/note/gentoo.html</id><summary type="html">&lt;div class="section" id="gentoo"&gt;
&lt;h2&gt;为什么选择 Gentoo&lt;/h2&gt;
&lt;p&gt;完全免费的 Linux 发行版本，面向开发人员和 Web 职业人员。特别是有 Portage 包管理系统，用 Python 编写。无最新发行版本，每周滚动更新这点和 Arch Linux 相同。&lt;/p&gt;
&lt;p&gt;同时得到某叔的极力推荐，这些都是最终选择 Gentoo 的原因。&lt;/p&gt;
&lt;p&gt;另外附 Gentoo 排名情况：  &lt;a class="reference external" href="http://distrowatch.com/table.php?distribution=gentoo"&gt;DistroWatch&lt;/a&gt; 。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;安装过程&lt;/h2&gt;
&lt;p&gt;整个安装过程主要参考 &lt;a class="reference external" href="https://wiki.gentoo.org/wiki/Handbook:AMD64"&gt;Handbook 手册&lt;/a&gt;，利用业余时间两个晚上搞定。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# uname -a&lt;/span&gt;
Linux don &lt;span class="m"&gt;4&lt;/span&gt;.0.5-gentoo &lt;span class="c1"&gt;#1 SMP Fri Aug 28 21:54:34 2015 x86_64 Intel …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="section" id="gentoo"&gt;
&lt;h2&gt;为什么选择 Gentoo&lt;/h2&gt;
&lt;p&gt;完全免费的 Linux 发行版本，面向开发人员和 Web 职业人员。特别是有 Portage 包管理系统，用 Python 编写。无最新发行版本，每周滚动更新这点和 Arch Linux 相同。&lt;/p&gt;
&lt;p&gt;同时得到某叔的极力推荐，这些都是最终选择 Gentoo 的原因。&lt;/p&gt;
&lt;p&gt;另外附 Gentoo 排名情况：  &lt;a class="reference external" href="http://distrowatch.com/table.php?distribution=gentoo"&gt;DistroWatch&lt;/a&gt; 。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;安装过程&lt;/h2&gt;
&lt;p&gt;整个安装过程主要参考 &lt;a class="reference external" href="https://wiki.gentoo.org/wiki/Handbook:AMD64"&gt;Handbook 手册&lt;/a&gt;，利用业余时间两个晚上搞定。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# uname -a&lt;/span&gt;
Linux don &lt;span class="m"&gt;4&lt;/span&gt;.0.5-gentoo &lt;span class="c1"&gt;#1 SMP Fri Aug 28 21:54:34 2015 x86_64 Intel(R) Core(TM) i5-4590 CPU @ 3.30GHz GenuineIntel GNU/Linux&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;桌面选择&lt;/h2&gt;
&lt;p&gt;首先纠结的是选择。既然如此，回到出发点思考，为什么要安装桌面环境。一是个人 Linux 基础问题。再加上多年不用，没有能力在 Shell 环境搞定 WIFI 和 蓝牙等的驱动。&lt;/p&gt;
&lt;p&gt;基于大学时代玩过 Ubuntu 和 Fedora，对 GNOME 和 KDE 有所了解，所以主要还是从这两个中选择，虽然 Ubuntu 已经不用 GNOME 改用 Unity，但 GNOME 3 看起来还是比较现代化，就它吧！&lt;/p&gt;
&lt;p&gt;不过在安装 GNOME 之前，我们先了解一下X11，即 X Window 系统。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="x11"&gt;
&lt;h2&gt;X11&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/X_Window_System"&gt;X 窗口系统&lt;/a&gt; 还是很 NB 的，出生比我早。GNOME 和 KDE 都是基于 X11 系统为基础实现的。&lt;a class="reference external" href="https://zh.wikipedia.org/wiki/XQuartz"&gt;XQuartz&lt;/a&gt; 是苹果公司的 OS X 的实现，Apple X11。&lt;/p&gt;
&lt;p&gt;Gentoo Linux 上的 X11 实现是 &lt;a class="reference external" href="https://en.wikipedia.org/wiki/X.Org_Server"&gt;XOrg&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Wayland_(display_server_protocol)"&gt;Wayland&lt;/a&gt; 是一个比较新的显示服务器与客户端通信方式的协议，而 GNOME 从 3.10 开始支持 Wayland。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="init-system"&gt;
&lt;h2&gt;Init System&lt;/h2&gt;
&lt;p&gt;在 Gentoo，可以用以下命令查看当前系统运行的 Init 系统是什么：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# ps u -p 1&lt;/span&gt;
USER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND
root         &lt;span class="m"&gt;1&lt;/span&gt;  &lt;span class="m"&gt;0&lt;/span&gt;.0  &lt;span class="m"&gt;0&lt;/span&gt;.0   &lt;span class="m"&gt;4164&lt;/span&gt;  &lt;span class="m"&gt;1420&lt;/span&gt; ?        Ss   Sep08   &lt;span class="m"&gt;0&lt;/span&gt;:01 init &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果是显示的是 init，那么 init 系统是 OpenRC，如果显示 systemd，则是 init system 是 systemd (via from &lt;a class="reference external" href="http://unix.stackexchange.com/a/114619"&gt;Detect init system using the shell&lt;/a&gt;)。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="gnome-3"&gt;
&lt;h2&gt;GNOME 3&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.gnome.org/gnome-3/"&gt;GNOME 3&lt;/a&gt; 的目标是简单易用，与 Python 的 Zen 核心思想很接近。&lt;/p&gt;
&lt;img alt="GNOME 3 overview" src="https://www.gnome.org/wp-content/uploads/2015/03/activities-overview-3.16-940x529.png" /&gt;
&lt;p&gt;准备安装的时候，在网上找到这个`贴子 &amp;lt;&lt;a class="reference external" href="https://forums.gentoo.org/viewtopic-p-7696198.html"&gt;https://forums.gentoo.org/viewtopic-p-7696198.html&lt;/a&gt;&amp;gt;`_：&lt;/p&gt;
&lt;blockquote&gt;
systemd is now a mandatory dependency of Gnome3. Normally, if you want to use Gnome3,  systemd must be installed.&lt;/blockquote&gt;
&lt;p&gt;有没有桌面环境可以不更换现在的 Init System 呢，继续查找资料，然后在 &lt;a class="reference external" href="https://wiki.gentoo.org/wiki/Recommended_applications#Desktop_environment"&gt;Desktop environment&lt;/a&gt; 发现了 &lt;a class="reference external" href="https://wiki.gentoo.org/wiki/Xfce"&gt;Xfce&lt;/a&gt;。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h2&gt;Xfce&lt;/h2&gt;
&lt;p&gt;Xfce 是个轻量级的类 Unix 桌面环境，It aims to be fast and low on system resources。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="x-window"&gt;
&lt;h2&gt;安装 X Window&lt;/h2&gt;
&lt;p&gt;主要参考：&lt;a class="reference external" href="https://wiki.gentoo.org/wiki/Xorg/Guide"&gt;https://wiki.gentoo.org/wiki/Xorg/Guide&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;查看显卡信息，可以得到：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# emerge --ask sys-apps/pciutils&lt;/span&gt;
&lt;span class="c1"&gt;# lspci | grep VGA&lt;/span&gt;
&lt;span class="c1"&gt;# lspci | grep VGA&lt;/span&gt;
&lt;span class="m"&gt;01&lt;/span&gt;:00.0 VGA compatible controller: Advanced Micro Devices, Inc. &lt;span class="o"&gt;[&lt;/span&gt;AMD/ATI&lt;span class="o"&gt;]&lt;/span&gt; Oland &lt;span class="o"&gt;[&lt;/span&gt;Radeon HD &lt;span class="m"&gt;8570&lt;/span&gt; / R7 &lt;span class="m"&gt;240&lt;/span&gt; OEM&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="c1"&gt;# emerge --sync&lt;/span&gt;
&lt;span class="c1"&gt;# emerge --ask x11-drivers/radeon-ucode&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;配置 Linux 内核，输入以下命令：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# cd /usr/src/linux&lt;/span&gt;
&lt;span class="c1"&gt;# make menuconfig&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;修改 make.config 配置， /etc/portage/make.conf：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# (For mouse, keyboard, and Synaptics touchpad support)&lt;/span&gt;
&lt;span class="nv"&gt;INPUT_DEVICES&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;evdev synaptics&amp;quot;&lt;/span&gt;
&lt;span class="c1"&gt;# (For AMD/ATI cards)&lt;/span&gt;
&lt;span class="nv"&gt;VIDEO_CARDS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;radeon&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后执行：emerge --ask --verbose x11-base/xorg-drivers&lt;/p&gt;
&lt;p&gt;安装 Xorg：emerge --ask x11-base/xorg-server
安装完成后，更新环境：env-update &amp;amp;&amp;amp; source /etc/profile
然后重启系统。
登入，启动 startx，成功了：&lt;/p&gt;
&lt;img alt="" src="images/Gentoo_Xfce_Desktop.jpg" /&gt;
&lt;/div&gt;
&lt;div class="section" id="portage-sync"&gt;
&lt;h2&gt;Portage/Sync 配置&lt;/h2&gt;
&lt;p&gt;在日常更新维护的时候遇到这样的警告：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;!!! SYNC setting found in make.conf.
This setting is Deprecated and no longer used.  Please ensure your &lt;span class="s1"&gt;&amp;#39;sync-type&amp;#39;&lt;/span&gt; and &lt;span class="s1"&gt;&amp;#39;sync-uri&amp;#39;&lt;/span&gt; are &lt;span class="nb"&gt;set&lt;/span&gt; correctly in /etc/portage/repos.conf/gentoo.conf
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;解决方法主要参考 &lt;a class="reference external" href="https://wiki.gentoo.org/wiki/Project:Portage/Sync"&gt;Portage/Sync&lt;/a&gt;：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mkdir /etc/portage/repos.conf
cp /usr/share/portage/config/repos.conf /etc/portage/repos.conf/gentoo.conf
mirrorselect -i -r -o &amp;gt;&amp;gt; /etc/portage/repos.conf/gentoo.conf &lt;span class="c1"&gt;# 选择一个国内镜像&lt;/span&gt;
vi /etc/portage/make.conf &lt;span class="c1"&gt;# 将 SYNC 设置删除&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
</content><category term="Linux"></category><category term="Gentoo"></category></entry><entry><title>Gentoo 本地化配置</title><link href="https://magicalboy.com/note/gentoo-locale.html" rel="alternate"></link><published>2016-01-14T13:55:11+08:00</published><updated>2016-01-14T13:55:11+08:00</updated><author><name>Don</name></author><id>tag:magicalboy.com,2016-01-14:/note/gentoo-locale.html</id><summary type="html">&lt;p&gt;未配置之前会有类似这样的提示：&lt;em&gt;man: can't set the locale; make sure $LC_&lt;/em&gt; and $LANG are correct*。&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;查看当前本地化配置：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# locale -a&lt;/span&gt;
locale: Cannot &lt;span class="nb"&gt;set&lt;/span&gt; LC_CTYPE to default locale: No such file or directory
locale: Cannot &lt;span class="nb"&gt;set&lt;/span&gt; LC_MESSAGES to default locale: No such file or directory
locale: Cannot &lt;span class="nb"&gt;set&lt;/span&gt; LC_COLLATE to default locale: No such file …&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;未配置之前会有类似这样的提示：&lt;em&gt;man: can't set the locale; make sure $LC_&lt;/em&gt; and $LANG are correct*。&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;查看当前本地化配置：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# locale -a&lt;/span&gt;
locale: Cannot &lt;span class="nb"&gt;set&lt;/span&gt; LC_CTYPE to default locale: No such file or directory
locale: Cannot &lt;span class="nb"&gt;set&lt;/span&gt; LC_MESSAGES to default locale: No such file or directory
locale: Cannot &lt;span class="nb"&gt;set&lt;/span&gt; LC_COLLATE to default locale: No such file or directory
C
POSIX
&lt;/pre&gt;&lt;/div&gt;
&lt;ol class="arabic simple" start="2"&gt;
&lt;li&gt;修改 &lt;em&gt;/etc/locale.gen&lt;/em&gt;，去掉 &lt;em&gt;#en_US.UTF-8 UTF-8&lt;/em&gt; 前面的 &lt;em&gt;#&lt;/em&gt;。&lt;/li&gt;
&lt;li&gt;执行 &lt;em&gt;locale-gen&lt;/em&gt;。&lt;/li&gt;
&lt;li&gt;查看当前系统可用的本地化设置：&lt;em&gt;eselect locale list&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;设置本地化：&lt;em&gt;eselect locale set 3&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;执行更新：&lt;em&gt;env-update &amp;amp;&amp;amp; source /etc/profile&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;最后的环境：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# eselect locale list&lt;/span&gt;
Available targets &lt;span class="k"&gt;for&lt;/span&gt; the LANG variable:
  &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;   C
  &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;   en_US.utf8 *
  &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;   POSIX
  &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;   &lt;span class="o"&gt;(&lt;/span&gt;free form&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;参考连接：&lt;a class="reference external" href="https://wiki.gentoo.org/wiki/Localization/Guide"&gt;https://wiki.gentoo.org/wiki/Localization/Guide&lt;/a&gt;&lt;/p&gt;
</content><category term="Linux"></category><category term="Gentoo"></category></entry><entry><title>Gentoo 分区</title><link href="https://magicalboy.com/note/gentoo-partition.html" rel="alternate"></link><published>2016-01-14T13:55:11+08:00</published><updated>2016-01-14T13:55:11+08:00</updated><author><name>Don</name></author><id>tag:magicalboy.com,2016-01-14:/note/gentoo-partition.html</id><summary type="html">&lt;p&gt;由于系统是现成的，即直接 flash 安装，里面的分区表已经分好。为了充分利用卡上的剩余空间，于是新建一个分区来挂载使用。&lt;/p&gt;
&lt;p&gt;使用环境：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;系统：Gentoo 3.4.103&lt;/li&gt;
&lt;li&gt;存储盘：高速 MicroSDXC-TF 存储卡 64G-Class10&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;第一步：查看与新建分区&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;分区前系统盘分区：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# df -h&lt;/span&gt;
Filesystem      Size  Used Avail Use% Mounted on
/dev/root       &lt;span class="m"&gt;3&lt;/span&gt;.4G  &lt;span class="m"&gt;1&lt;/span&gt;.7G  &lt;span class="m"&gt;1&lt;/span&gt;.6G  &lt;span class="m"&gt;52&lt;/span&gt;% /
devtmpfs        438M     &lt;span class="m"&gt;0&lt;/span&gt;  438M   &lt;span class="m"&gt;0&lt;/span&gt;% /dev
tmpfs            88M  244K   88M   &lt;span class="m"&gt;1 …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;由于系统是现成的，即直接 flash 安装，里面的分区表已经分好。为了充分利用卡上的剩余空间，于是新建一个分区来挂载使用。&lt;/p&gt;
&lt;p&gt;使用环境：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;系统：Gentoo 3.4.103&lt;/li&gt;
&lt;li&gt;存储盘：高速 MicroSDXC-TF 存储卡 64G-Class10&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;第一步：查看与新建分区&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;分区前系统盘分区：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# df -h&lt;/span&gt;
Filesystem      Size  Used Avail Use% Mounted on
/dev/root       &lt;span class="m"&gt;3&lt;/span&gt;.4G  &lt;span class="m"&gt;1&lt;/span&gt;.7G  &lt;span class="m"&gt;1&lt;/span&gt;.6G  &lt;span class="m"&gt;52&lt;/span&gt;% /
devtmpfs        438M     &lt;span class="m"&gt;0&lt;/span&gt;  438M   &lt;span class="m"&gt;0&lt;/span&gt;% /dev
tmpfs            88M  244K   88M   &lt;span class="m"&gt;1&lt;/span&gt;% /run
shm             438M     &lt;span class="m"&gt;0&lt;/span&gt;  438M   &lt;span class="m"&gt;0&lt;/span&gt;% /dev/shm
cgroup_root      10M     &lt;span class="m"&gt;0&lt;/span&gt;   10M   &lt;span class="m"&gt;0&lt;/span&gt;% /sys/fs/cgroup
&lt;/pre&gt;&lt;/div&gt;
&lt;ol class="arabic simple" start="2"&gt;
&lt;li&gt;当前盘信息：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# fdisk -l&lt;/span&gt;

Disk /dev/mmcblk0: &lt;span class="m"&gt;59&lt;/span&gt;.5 GiB, &lt;span class="m"&gt;63879249920&lt;/span&gt; bytes, &lt;span class="m"&gt;124764160&lt;/span&gt; sectors
Units: sectors of &lt;span class="m"&gt;1&lt;/span&gt; * &lt;span class="nv"&gt;512&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;512&lt;/span&gt; bytes
Sector size &lt;span class="o"&gt;(&lt;/span&gt;logical/physical&lt;span class="o"&gt;)&lt;/span&gt;: &lt;span class="m"&gt;512&lt;/span&gt; bytes / &lt;span class="m"&gt;512&lt;/span&gt; bytes
I/O size &lt;span class="o"&gt;(&lt;/span&gt;minimum/optimal&lt;span class="o"&gt;)&lt;/span&gt;: &lt;span class="m"&gt;512&lt;/span&gt; bytes / &lt;span class="m"&gt;512&lt;/span&gt; bytes
Disklabel type: dos
Disk identifier: 0x7dea4524

Device         Boot     Start       End   Blocks  Id System
/dev/mmcblk0p1           &lt;span class="m"&gt;2048&lt;/span&gt;     &lt;span class="m"&gt;43007&lt;/span&gt;    &lt;span class="m"&gt;20480&lt;/span&gt;  &lt;span class="m"&gt;83&lt;/span&gt; Linux
/dev/mmcblk0p2          &lt;span class="m"&gt;43008&lt;/span&gt;   &lt;span class="m"&gt;7167999&lt;/span&gt;  &lt;span class="m"&gt;3562496&lt;/span&gt;  &lt;span class="m"&gt;83&lt;/span&gt; Linux
&lt;/pre&gt;&lt;/div&gt;
&lt;ol class="arabic simple" start="3"&gt;
&lt;li&gt;使用 &lt;em&gt;cfdisk /dev/mmcblk0&lt;/em&gt; 将未使用的空间 &lt;em&gt;New&lt;/em&gt; 一个分区出来&lt;/li&gt;
&lt;li&gt;分区成功后 &lt;em&gt;Write&lt;/em&gt; 保存，然后 &lt;em&gt;Quit&lt;/em&gt; 退出。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;注：cfdisk 最多只能分 4 个主分区，fdisk 支持硬盘最大尺寸为 2TB，更详情说明请参考 man 手册。&lt;/p&gt;
&lt;p&gt;第二步：格式化分区&lt;/p&gt;
&lt;p&gt;对新建分区 mmcblk0p3 进行格式化：&lt;em&gt;mkfs.ext4 /dev/mmcblk0p3&lt;/em&gt;。&lt;/p&gt;
&lt;p&gt;第三步：加载分区&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;创建分区挂接目录：&lt;em&gt;mkdir /user&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;编辑 &lt;em&gt;/etc/fstab&lt;/em&gt;，将分区信息写进去。&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;/dev/mmcblk0p3          /user           ext4            defaults        &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ol class="arabic simple" start="3"&gt;
&lt;li&gt;加载新建的分区：&lt;em&gt;mount -a&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;最终系统分区：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;df -h
Filesystem      Size  Used Avail Use% Mounted on
/dev/root       &lt;span class="m"&gt;3&lt;/span&gt;.4G  &lt;span class="m"&gt;1&lt;/span&gt;.7G  &lt;span class="m"&gt;1&lt;/span&gt;.6G  &lt;span class="m"&gt;52&lt;/span&gt;% /
devtmpfs        438M     &lt;span class="m"&gt;0&lt;/span&gt;  438M   &lt;span class="m"&gt;0&lt;/span&gt;% /dev
tmpfs            88M  244K   88M   &lt;span class="m"&gt;1&lt;/span&gt;% /run
shm             438M     &lt;span class="m"&gt;0&lt;/span&gt;  438M   &lt;span class="m"&gt;0&lt;/span&gt;% /dev/shm
cgroup_root      10M     &lt;span class="m"&gt;0&lt;/span&gt;   10M   &lt;span class="m"&gt;0&lt;/span&gt;% /sys/fs/cgroup
/dev/mmcblk0p3   56G  180M   53G   &lt;span class="m"&gt;1&lt;/span&gt;% /user
&lt;/pre&gt;&lt;/div&gt;
</content><category term="Linux"></category><category term="Gentoo"></category></entry><entry><title>Gentoo Portage</title><link href="https://magicalboy.com/note/gentoo-portage.html" rel="alternate"></link><published>2016-01-14T13:55:11+08:00</published><updated>2016-01-14T13:55:11+08:00</updated><author><name>Don</name></author><id>tag:magicalboy.com,2016-01-14:/note/gentoo-portage.html</id><summary type="html">&lt;div class="section" id="id1"&gt;
&lt;h2&gt;修改更新源地址&lt;/h2&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;em&gt;2.2.16&lt;/em&gt; 版本之前的配置：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;SYNC&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;rsync://rsync.cn.gentoo.org/gentoo-portage/&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ol class="arabic simple" start="2"&gt;
&lt;li&gt;新版本若没有配置会提示：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;!!! SYNC setting found in make.conf.
    This setting is Deprecated and no longer used.  Please ensure your &lt;span class="s1"&gt;&amp;#39;sync-type&amp;#39;&lt;/span&gt; and &lt;span class="s1"&gt;&amp;#39;sync-uri&amp;#39;&lt;/span&gt; are &lt;span class="nb"&gt;set&lt;/span&gt; correctly in /etc/portage/repos.conf/gentoo.conf
&lt;/pre&gt;&lt;/div&gt;
&lt;ol class="arabic simple" start="3"&gt;
&lt;li&gt;新版本配置，编辑 &lt;em&gt;/etc/portage/make.conf&lt;/em&gt; 删除原来的 …&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="section" id="id1"&gt;
&lt;h2&gt;修改更新源地址&lt;/h2&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;em&gt;2.2.16&lt;/em&gt; 版本之前的配置：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;SYNC&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;rsync://rsync.cn.gentoo.org/gentoo-portage/&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ol class="arabic simple" start="2"&gt;
&lt;li&gt;新版本若没有配置会提示：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;!!! SYNC setting found in make.conf.
    This setting is Deprecated and no longer used.  Please ensure your &lt;span class="s1"&gt;&amp;#39;sync-type&amp;#39;&lt;/span&gt; and &lt;span class="s1"&gt;&amp;#39;sync-uri&amp;#39;&lt;/span&gt; are &lt;span class="nb"&gt;set&lt;/span&gt; correctly in /etc/portage/repos.conf/gentoo.conf
&lt;/pre&gt;&lt;/div&gt;
&lt;ol class="arabic simple" start="3"&gt;
&lt;li&gt;新版本配置，编辑 &lt;em&gt;/etc/portage/make.conf&lt;/em&gt; 删除原来的 &lt;em&gt;SYNC=&amp;quot;....&amp;quot;&lt;/em&gt; 这行，然后执行以下命令：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mkdir /etc/portage/repos.conf
cp /usr/share/portage/config/repos.conf /etc/portage/repos.conf/gentoo.conf
vi /etc/portage/repos.conf/gentoo.conf
&lt;span class="c1"&gt;# 增加上面的镜像地址&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;参考链接：&lt;a class="reference external" href="https://wiki.gentoo.org/wiki/Project:Portage/Sync"&gt;https://wiki.gentoo.org/wiki/Project:Portage/Sync&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="portdir"&gt;
&lt;h2&gt;修改 PORTDIR&lt;/h2&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;修改 &lt;em&gt;/etc/portage/make.conf&lt;/em&gt;：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;PORTDIR&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/user/portage&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ol class="arabic simple" start="2"&gt;
&lt;li&gt;创建新位置目录：&lt;em&gt;mkdir /user/portage&lt;/em&gt;。&lt;/li&gt;
&lt;li&gt;修改用户和用户组属性：&lt;em&gt;chown portage:portage /user/portage&lt;/em&gt;。&lt;/li&gt;
&lt;li&gt;迁移数据：&lt;em&gt;mv -p /usr/portage/* /user/portage/&lt;/em&gt;。&lt;/li&gt;
&lt;li&gt;更新：&lt;em&gt;emerge --sync&lt;/em&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;：如果 &lt;em&gt;make.conf&lt;/em&gt; 丢失，查看 &lt;em&gt;eselect profile list&lt;/em&gt;，并选择 &lt;em&gt;[28]  default/linux/arm/13.0/armv7a&lt;/em&gt;：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;eselect profile &lt;span class="nb"&gt;set&lt;/span&gt; &lt;span class="m"&gt;28&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="portage"&gt;
&lt;h2&gt;更新 Portage&lt;/h2&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;查看当前版本：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# emerge -V&lt;/span&gt;
Portage &lt;span class="m"&gt;2&lt;/span&gt;.2.8-r2 &lt;span class="o"&gt;(&lt;/span&gt;default/linux/arm/13.0/armv7a, gcc-4.8.3, glibc-2.19-r1, &lt;span class="m"&gt;3&lt;/span&gt;.4.103 armv7l&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ol class="arabic simple" start="2"&gt;
&lt;li&gt;更新版本使用：&lt;em&gt;emerge --oneshot portage&lt;/em&gt;。&lt;/li&gt;
&lt;li&gt;更新后版本：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# emerge -V&lt;/span&gt;
Portage &lt;span class="m"&gt;2&lt;/span&gt;.2.20.1 &lt;span class="o"&gt;(&lt;/span&gt;python &lt;span class="m"&gt;2&lt;/span&gt;.7.7-final-0, default/linux/arm/13.0/armv7a, gcc-4.8.3, glibc-2.19-r1, &lt;span class="m"&gt;3&lt;/span&gt;.4.103 armv7l&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
</content><category term="Linux"></category><category term="Gentoo"></category></entry><entry><title>Samba 配置</title><link href="https://magicalboy.com/note/gentoo-samba.html" rel="alternate"></link><published>2016-01-14T13:55:11+08:00</published><updated>2016-01-14T13:55:11+08:00</updated><author><name>Don</name></author><id>tag:magicalboy.com,2016-01-14:/note/gentoo-samba.html</id><summary type="html">&lt;p&gt;Samba 是 1992 年，一个叫 Andrew Tridgell 用 C/C++ 和 Python 写的跨平台软件。&lt;/p&gt;
&lt;p&gt;其名字来于 Server Message Block，其中 SMB/CIFS 是由微软开发的一种应用层网络传输协议。&lt;/p&gt;
&lt;p&gt;Samba 就是许多服务和协议的实现，是 Windows 和类 Unix 系统之间的桥梁。&lt;/p&gt;
&lt;p&gt;Samba 现在最新版本是 4.x，但在我的树莓派上面 &lt;em&gt;emerge --ask net-fs/samba&lt;/em&gt; 出来的还是 3.6.2。&lt;/p&gt;
&lt;p&gt;官网上的 &lt;a class="reference external" href="https://packages.gentoo.org/packages/net-fs/samba"&gt;net-fs/samba&lt;/a&gt; package 4.x 以上的版本不支持 arm 或被 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Samba 是 1992 年，一个叫 Andrew Tridgell 用 C/C++ 和 Python 写的跨平台软件。&lt;/p&gt;
&lt;p&gt;其名字来于 Server Message Block，其中 SMB/CIFS 是由微软开发的一种应用层网络传输协议。&lt;/p&gt;
&lt;p&gt;Samba 就是许多服务和协议的实现，是 Windows 和类 Unix 系统之间的桥梁。&lt;/p&gt;
&lt;p&gt;Samba 现在最新版本是 4.x，但在我的树莓派上面 &lt;em&gt;emerge --ask net-fs/samba&lt;/em&gt; 出来的还是 3.6.2。&lt;/p&gt;
&lt;p&gt;官网上的 &lt;a class="reference external" href="https://packages.gentoo.org/packages/net-fs/samba"&gt;net-fs/samba&lt;/a&gt; package 4.x 以上的版本不支持 arm 或被 mask。&lt;/p&gt;
&lt;p&gt;开始安装 ；)&lt;/p&gt;
&lt;p&gt;emerge --ask net-fs/sambar&lt;/p&gt;
&lt;p&gt;# qlop -Hgvt samba
samba-3.6.25: Tue Oct 27 23:56:50 2015: 43 minutes, 41 seconds
samba: 1 times&lt;/p&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;配置&lt;/h2&gt;
&lt;/div&gt;
</content><category term="Linux"></category><category term="Gentoo"></category></entry><entry><title>Git使用</title><link href="https://magicalboy.com/note/git.html" rel="alternate"></link><published>2016-01-14T13:55:11+08:00</published><updated>2016-01-14T13:55:11+08:00</updated><author><name>Don</name></author><id>tag:magicalboy.com,2016-01-14:/note/git.html</id><summary type="html">&lt;p&gt;&lt;a class="reference external" href="https://openshift.redhat.com/community/kb/kb-e1035-git-push-throws-error-rpc-failed-result22-http-code-411"&gt;error: RPC failed; result=22, HTTP code = 411&lt;/a&gt;&lt;/p&gt;
</summary><content type="html">&lt;p&gt;&lt;a class="reference external" href="https://openshift.redhat.com/community/kb/kb-e1035-git-push-throws-error-rpc-failed-result22-http-code-411"&gt;error: RPC failed; result=22, HTTP code = 411&lt;/a&gt;&lt;/p&gt;
</content></entry><entry><title>GTD学习</title><link href="https://magicalboy.com/note/gtd.html" rel="alternate"></link><published>2016-01-14T13:55:11+08:00</published><updated>2016-01-14T13:55:11+08:00</updated><author><name>Don</name></author><id>tag:magicalboy.com,2016-01-14:/note/gtd.html</id><summary type="html">&lt;div class="section" id="id1"&gt;
&lt;h2&gt;GTD 流程图&lt;/h2&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;img alt="Getting Things Done - Workflow diagram" src="images/gtd1.jpg" /&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary><content type="html">&lt;div class="section" id="id1"&gt;
&lt;h2&gt;GTD 流程图&lt;/h2&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;img alt="Getting Things Done - Workflow diagram" src="images/gtd1.jpg" /&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="GTD"></category></entry><entry><title>iOS 设计模式: Model View Controller</title><link href="https://magicalboy.com/note/ios-design-patterns-model-view-controller.html" rel="alternate"></link><published>2016-01-14T13:55:11+08:00</published><updated>2016-01-14T13:55:11+08:00</updated><author><name>Don</name></author><id>tag:magicalboy.com,2016-01-14:/note/ios-design-patterns-model-view-controller.html</id><summary type="html">&lt;p&gt;MVC 设计模式的主要目的是可重用性，能够在不同的视图中使用重用同一个模型。&lt;/p&gt;
&lt;img alt="Model View Controller (MVC) Design Pattern" src="static/images/mvc.jpg" /&gt;
&lt;div class="section" id="model"&gt;
&lt;h2&gt;模型 Model&lt;/h2&gt;
&lt;p&gt;模型包含了数据。例如，一个 Book 对象包含有关书的信息：标题和作者。此外，Book 对象能够被其它对象关联，建立一对一或一对多的关系。例如 Category 对象可包含多个 Book 对象。模型中的数据可以来源于本地数据库或文件，也可以从网络请求回来。&lt;/p&gt;
&lt;p&gt;模型不应该直接和视图打交道，应该在需要的时候访问通过控制器来访问。&lt;/p&gt;
&lt;p&gt;在 iOS 中，模型通常是 NSObject 或 NSManagedObject的子类。任何模型对象包括一些实例变量和对应的 getter/setter 方法。大多数面向对象编程语言都有提供封装的机制。在 iOS 中使用 &amp;#64;property 封装，和可选的 &amp;#64;synthesize 自动生成 getter/setter 方法。以 Book 模型为例 …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;MVC 设计模式的主要目的是可重用性，能够在不同的视图中使用重用同一个模型。&lt;/p&gt;
&lt;img alt="Model View Controller (MVC) Design Pattern" src="static/images/mvc.jpg" /&gt;
&lt;div class="section" id="model"&gt;
&lt;h2&gt;模型 Model&lt;/h2&gt;
&lt;p&gt;模型包含了数据。例如，一个 Book 对象包含有关书的信息：标题和作者。此外，Book 对象能够被其它对象关联，建立一对一或一对多的关系。例如 Category 对象可包含多个 Book 对象。模型中的数据可以来源于本地数据库或文件，也可以从网络请求回来。&lt;/p&gt;
&lt;p&gt;模型不应该直接和视图打交道，应该在需要的时候访问通过控制器来访问。&lt;/p&gt;
&lt;p&gt;在 iOS 中，模型通常是 NSObject 或 NSManagedObject的子类。任何模型对象包括一些实例变量和对应的 getter/setter 方法。大多数面向对象编程语言都有提供封装的机制。在 iOS 中使用 &amp;#64;property 封装，和可选的 &amp;#64;synthesize 自动生成 getter/setter 方法。以 Book 模型为例：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#import &amp;lt;Foundation/Foundation.h&amp;gt;&lt;/span&gt;

&lt;span class="k"&gt;@interface&lt;/span&gt; &lt;span class="nc"&gt;Book&lt;/span&gt; : &lt;span class="bp"&gt;NSObject&lt;/span&gt;

&lt;span class="k"&gt;@property&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;nonatomic&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;copy&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="bp"&gt;NSString&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;    &lt;span class="c1"&gt;// 会自动生成 _title 实例变量&lt;/span&gt;
&lt;span class="k"&gt;@property&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;nonatomic&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;copy&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="bp"&gt;NSString&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;author&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;   &lt;span class="c1"&gt;// 会自动生成 _author 实例变量&lt;/span&gt;

&lt;span class="k"&gt;@end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="view"&gt;
&lt;h2&gt;视图 View&lt;/h2&gt;
&lt;p&gt;视图显示模型的一些信息。例如，视图能够显示书本列表。尽管视图不会直接从模型中获取信息，而是使用控制器来协调什么时候该显示什么。&lt;/p&gt;
&lt;p&gt;在 iOS 中，大多数视图继承自 UIView，UIView 能够捕捉触摸事件和绘图显示。UIKit 框架包括各种绘制系统标准界面元素的类，如表格，按钮，输入框，滑动条等。以下是一个书的列表：&lt;/p&gt;
&lt;img alt="a list of books" src="static/images/book_list_table.jpg" /&gt;
&lt;/div&gt;
&lt;div class="section" id="controller"&gt;
&lt;h2&gt;控制器 Controller&lt;/h2&gt;
&lt;p&gt;控制器能够访问模型的数据，然后将它们显示到视图。同一个控制器可以作为几个视图和模型之间的中间体。控制器监控着视图上的用户交互，并将产生的变化与模型通信。反过来，也可将由控制器观察到模型中的更改，呈现到视图上。&lt;/p&gt;
&lt;p&gt;控制器是多数应用所依赖的。在 iOS 中，控制器作为 UIViewController 的子类管理着视图。它也负责 委托（delegate） 消息和 目标－动作（target-action）消息的响应。以下是 UITableViewController （ UIViewController 的子类）如何管理 UITableView 的图解：&lt;/p&gt;
&lt;img alt="UITableViewController manages a UITableView" src="static/images/tableviewcontroller_using_mvc.jpg" /&gt;
&lt;p&gt;参考链接：&lt;a class="reference external" href="http://blog.teamtreehouse.com/ios-design-patterns-model-view-controller-part-3"&gt;iOS Design Patterns: Model View Controller&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</content><category term="iOS"></category><category term="design pattern"></category></entry><entry><title>iOS Frameworks</title><link href="https://magicalboy.com/note/ios-frameworks.html" rel="alternate"></link><published>2016-01-14T13:55:11+08:00</published><updated>2016-01-14T13:55:11+08:00</updated><author><name>Don</name></author><id>tag:magicalboy.com,2016-01-14:/note/ios-frameworks.html</id><summary type="html">&lt;div class="section" id="ios"&gt;
&lt;h2&gt;iOS 的架构是分层的&lt;/h2&gt;
&lt;img alt="Layers of iOS" class="align-left" src="http://developer.apple.com/library/ios/documentation/miscellaneous/conceptual/iphoneostechoverview/Art/SystemLayers_2x.png" style="width: 366px; height: 202px;" /&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="frameworks"&gt;
&lt;h2&gt;Frameworks&lt;/h2&gt;
&lt;p&gt;iOS 提供了一套框架，将 iOS 应用程序的技术，服务和功能结合了起来。&lt;/p&gt;
&lt;/div&gt;
</summary><content type="html">&lt;div class="section" id="ios"&gt;
&lt;h2&gt;iOS 的架构是分层的&lt;/h2&gt;
&lt;img alt="Layers of iOS" class="align-left" src="http://developer.apple.com/library/ios/documentation/miscellaneous/conceptual/iphoneostechoverview/Art/SystemLayers_2x.png" style="width: 366px; height: 202px;" /&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="frameworks"&gt;
&lt;h2&gt;Frameworks&lt;/h2&gt;
&lt;p&gt;iOS 提供了一套框架，将 iOS 应用程序的技术，服务和功能结合了起来。&lt;/p&gt;
&lt;/div&gt;
</content><category term="iOS"></category></entry><entry><title>iOS 国际化/本地化</title><link href="https://magicalboy.com/note/ios-i18n.html" rel="alternate"></link><published>2016-01-14T13:55:11+08:00</published><updated>2016-01-14T13:55:11+08:00</updated><author><name>Don</name></author><id>tag:magicalboy.com,2016-01-14:/note/ios-i18n.html</id><summary type="html">&lt;div class="section" id="id1"&gt;
&lt;h2&gt;获取首选语言&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// 获取首选语言&lt;/span&gt;
&lt;span class="n"&gt;NSLog&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;@&amp;quot;preferredLanguages:%@&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="bp"&gt;NSLocale&lt;/span&gt; &lt;span class="n"&gt;preferredLanguages&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

&lt;span class="c1"&gt;// 另一种方式&lt;/span&gt;
&lt;span class="bp"&gt;NSArray&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;languages&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="bp"&gt;NSUserDefaults&lt;/span&gt; &lt;span class="n"&gt;standardUserDefaults&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="nl"&gt;objectForKey&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;@&amp;quot;AppleLanguages&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="n"&gt;NSLog&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;@&amp;quot;languages:%@&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;languages&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;输出结果是一样的，都是数组：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;zh-Hans&amp;quot;&lt;/span&gt;,
en,
fr,
de,
ja,
...
&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;数组中第一个就是当前选择的语言，名称符合 ISO 639-1 代码表。同时需要注意区域和语言是独立不同的。&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;两者有什么不同，请看这：&lt;a class="reference external" href="http://stackoverflow.com/questions/7872356/what-is-the-difference-between-nslocale-preferredlanguages-and-nsuserdefault"&gt;Stack Overflow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;苹果开发者官网专题：&lt;a class="reference external" href="http://developer.apple.com/library/mac/#documentation/MacOSX/Conceptual/BPInternational/Articles/ChoosingLocalizations.html"&gt;Internationalization Programming Topics&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;获取当前地区&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="bp"&gt;NSLocale&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;locale&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="bp"&gt;NSLocale&lt;/span&gt; &lt;span class="n"&gt;currentLocale&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="bp"&gt;NSString&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;localeName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;locale&lt;/span&gt; &lt;span class="nl"&gt;displayNameForKey&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;NSLocaleIdentifier&lt;/span&gt;
                                         &lt;span class="nl"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:[&lt;/span&gt;&lt;span class="n"&gt;locale&lt;/span&gt; &lt;span class="n"&gt;localeIdentifier …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="section" id="id1"&gt;
&lt;h2&gt;获取首选语言&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// 获取首选语言&lt;/span&gt;
&lt;span class="n"&gt;NSLog&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;@&amp;quot;preferredLanguages:%@&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="bp"&gt;NSLocale&lt;/span&gt; &lt;span class="n"&gt;preferredLanguages&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

&lt;span class="c1"&gt;// 另一种方式&lt;/span&gt;
&lt;span class="bp"&gt;NSArray&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;languages&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="bp"&gt;NSUserDefaults&lt;/span&gt; &lt;span class="n"&gt;standardUserDefaults&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="nl"&gt;objectForKey&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;@&amp;quot;AppleLanguages&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="n"&gt;NSLog&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;@&amp;quot;languages:%@&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;languages&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;输出结果是一样的，都是数组：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;zh-Hans&amp;quot;&lt;/span&gt;,
en,
fr,
de,
ja,
...
&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;数组中第一个就是当前选择的语言，名称符合 ISO 639-1 代码表。同时需要注意区域和语言是独立不同的。&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;两者有什么不同，请看这：&lt;a class="reference external" href="http://stackoverflow.com/questions/7872356/what-is-the-difference-between-nslocale-preferredlanguages-and-nsuserdefault"&gt;Stack Overflow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;苹果开发者官网专题：&lt;a class="reference external" href="http://developer.apple.com/library/mac/#documentation/MacOSX/Conceptual/BPInternational/Articles/ChoosingLocalizations.html"&gt;Internationalization Programming Topics&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;获取当前地区&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="bp"&gt;NSLocale&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;locale&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="bp"&gt;NSLocale&lt;/span&gt; &lt;span class="n"&gt;currentLocale&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="bp"&gt;NSString&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;localeName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;locale&lt;/span&gt; &lt;span class="nl"&gt;displayNameForKey&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;NSLocaleIdentifier&lt;/span&gt;
                                         &lt;span class="nl"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:[&lt;/span&gt;&lt;span class="n"&gt;locale&lt;/span&gt; &lt;span class="n"&gt;localeIdentifier&lt;/span&gt;&lt;span class="p"&gt;]];&lt;/span&gt;
&lt;span class="n"&gt;NSLog&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;@&amp;quot;localeName:%@&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;localeName&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;TODO&lt;/p&gt;
&lt;/div&gt;
</content><category term="iOS"></category><category term="i18n"></category></entry><entry><title>iOS 支持矩阵</title><link href="https://magicalboy.com/note/ios-support-matrix.html" rel="alternate"></link><published>2016-01-14T13:55:11+08:00</published><updated>2016-01-14T13:55:11+08:00</updated><author><name>Don</name></author><id>tag:magicalboy.com,2016-01-14:/note/ios-support-matrix.html</id><summary type="html">&lt;img alt="iOS Support Matrix" src="images/ios_support_matrix.png" /&gt;
</summary><content type="html">&lt;img alt="iOS Support Matrix" src="images/ios_support_matrix.png" /&gt;
</content><category term="iOS"></category><category term="support"></category></entry><entry><title>iOS 多线程学习</title><link href="https://magicalboy.com/note/ios-thread.html" rel="alternate"></link><published>2016-01-14T13:55:11+08:00</published><updated>2016-01-14T13:55:11+08:00</updated><author><name>Don</name></author><id>tag:magicalboy.com,2016-01-14:/note/ios-thread.html</id><summary type="html">&lt;div class="contents topic" id="id1"&gt;
&lt;p class="topic-title first"&gt;目录&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id2" id="id9"&gt;基础知识&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#nsthread" id="id10"&gt;NSThread&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id3" id="id11"&gt;创建和启动&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id4" id="id12"&gt;线程同步&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id5" id="id13"&gt;线程交互&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#nsoperation" id="id14"&gt;NSOperation&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id6" id="id15"&gt;并发执行&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id7" id="id16"&gt;非并发执行&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#gcd" id="id17"&gt;GCD&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id8" id="id18"&gt;线程概念&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="#run-loops" id="id19"&gt;Run Loops&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id9"&gt;基础知识&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;并发和并行。从技术角度来看，并发是程序的属性，而并行运作是机器的属性。并行和并发是两种分开的概念。作为程序员，你不能保证你的代码会在能并行执行你的代码的机器上运行。然而，你可以设计你的代码，让它使用并发操作。&lt;/p&gt;
&lt;p&gt;主要术语：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;任务&lt;/strong&gt;：一项需要完成的，简单，单一的任务。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;线程&lt;/strong&gt;：一种由操作系统提供的机制，允许多条指令在一个单独的程序中同时执行。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;进程&lt;/strong&gt;：一段可执行的代码，它可以由几个线程组成。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;进程，线程和任务之间的关系：&lt;/p&gt;
&lt;img alt="进程，线程和任务" src="images/Process_Thread_Task.png" /&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;注意：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在iPhone和Mac中，线程功能是由POSIX Threads API（或者pthreads）提供的，它是操作系统的一部分。这是相当底层的东西，你会发现很容易犯错；也许线程最坏的地方就是那些极难被发现的错误吧！&lt;/p&gt;
&lt;p&gt;Foundation 框架包含了一个叫做NSThread的类 …&lt;/p&gt;&lt;/blockquote&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="contents topic" id="id1"&gt;
&lt;p class="topic-title first"&gt;目录&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id2" id="id9"&gt;基础知识&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#nsthread" id="id10"&gt;NSThread&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id3" id="id11"&gt;创建和启动&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id4" id="id12"&gt;线程同步&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id5" id="id13"&gt;线程交互&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#nsoperation" id="id14"&gt;NSOperation&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id6" id="id15"&gt;并发执行&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id7" id="id16"&gt;非并发执行&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#gcd" id="id17"&gt;GCD&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id8" id="id18"&gt;线程概念&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="#run-loops" id="id19"&gt;Run Loops&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id9"&gt;基础知识&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;并发和并行。从技术角度来看，并发是程序的属性，而并行运作是机器的属性。并行和并发是两种分开的概念。作为程序员，你不能保证你的代码会在能并行执行你的代码的机器上运行。然而，你可以设计你的代码，让它使用并发操作。&lt;/p&gt;
&lt;p&gt;主要术语：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;任务&lt;/strong&gt;：一项需要完成的，简单，单一的任务。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;线程&lt;/strong&gt;：一种由操作系统提供的机制，允许多条指令在一个单独的程序中同时执行。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;进程&lt;/strong&gt;：一段可执行的代码，它可以由几个线程组成。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;进程，线程和任务之间的关系：&lt;/p&gt;
&lt;img alt="进程，线程和任务" src="images/Process_Thread_Task.png" /&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;注意：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在iPhone和Mac中，线程功能是由POSIX Threads API（或者pthreads）提供的，它是操作系统的一部分。这是相当底层的东西，你会发现很容易犯错；也许线程最坏的地方就是那些极难被发现的错误吧！&lt;/p&gt;
&lt;p&gt;Foundation 框架包含了一个叫做NSThread的类，他更容易处理，但是使用NSThread管理多个线程仍然是件令人头疼的事情。NSOperation和NSOperationQueue是更高级别的类，他们大大简化了处理多个线程的过程。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class="section" id="nsthread"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id10"&gt;NSThread&lt;/a&gt;&lt;/h2&gt;
&lt;div class="section" id="id3"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id11"&gt;创建和启动&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;看文档可以了解到，创建一个线程主要有两个方法：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;init&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// designated initializer&lt;/span&gt;
&lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;initWithTarget:&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;target&lt;/span&gt; &lt;span class="nf"&gt;selector:&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;SEL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;selector&lt;/span&gt; &lt;span class="nf"&gt;object:&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;argument&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;使用以上两种方法创建的线程需要手动启动：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;start&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;另外还有一种比较特殊，就是使用所谓的 convenient method，这个方法可以直接生成一个线程并启动它，而且无需为线程的清理负责。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;detachNewThreadSelector:&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;SEL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;selector&lt;/span&gt; &lt;span class="nf"&gt;toTarget:&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;target&lt;/span&gt; &lt;span class="nf"&gt;withObject:&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;argument&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id12"&gt;线程同步&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;想一下多个窗口同时售票的售票系统。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;//&lt;/span&gt;
&lt;span class="c1"&gt;//  AppDelegate.h&lt;/span&gt;
&lt;span class="c1"&gt;//  SellTicket&lt;/span&gt;
&lt;span class="c1"&gt;//&lt;/span&gt;
&lt;span class="c1"&gt;//  Created by Chan Donly on 13-1-6.&lt;/span&gt;
&lt;span class="c1"&gt;//  Copyright (c) 2013年 Diaoser. All rights reserved.&lt;/span&gt;
&lt;span class="c1"&gt;//&lt;/span&gt;

&lt;span class="cp"&gt;#import &amp;lt;UIKit/UIKit.h&amp;gt;&lt;/span&gt;


&lt;span class="k"&gt;@interface&lt;/span&gt; &lt;span class="nc"&gt;AppDelegate&lt;/span&gt; : &lt;span class="bp"&gt;UIResponder&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="bp"&gt;UIApplicationDelegate&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;tickets&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="bp"&gt;NSThread&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;ticketsThreadone&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="bp"&gt;NSThread&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;ticketsThreadtwo&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="bp"&gt;NSCondition&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;ticketsCondition&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;@property&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;strong&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;nonatomic&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="bp"&gt;UIWindow&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;window&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;@end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;类的实现：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;//&lt;/span&gt;
&lt;span class="c1"&gt;//  AppDelegate.m&lt;/span&gt;
&lt;span class="c1"&gt;//  SellTicket&lt;/span&gt;
&lt;span class="c1"&gt;//&lt;/span&gt;
&lt;span class="c1"&gt;//  Created by Chan Donly on 13-1-6.&lt;/span&gt;
&lt;span class="c1"&gt;//  Copyright (c) 2013年 Diaoser. All rights reserved.&lt;/span&gt;
&lt;span class="c1"&gt;//&lt;/span&gt;

&lt;span class="cp"&gt;#import &amp;quot;AppDelegate.h&amp;quot;&lt;/span&gt;

&lt;span class="k"&gt;@implementation&lt;/span&gt; &lt;span class="nc"&gt;AppDelegate&lt;/span&gt;

&lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;dealloc&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;ticketsThreadone&lt;/span&gt; &lt;span class="k"&gt;release&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;ticketsThreadtwo&lt;/span&gt; &lt;span class="k"&gt;release&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;ticketsCondition&lt;/span&gt; &lt;span class="k"&gt;release&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;_window&lt;/span&gt; &lt;span class="k"&gt;release&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;super&lt;/span&gt; &lt;span class="n"&gt;dealloc&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;BOOL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;application:&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;UIApplication&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;application&lt;/span&gt; &lt;span class="nf"&gt;didFinishLaunchingWithOptions:&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;NSDictionary&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;launchOptions&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;window&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[[[&lt;/span&gt;&lt;span class="bp"&gt;UIWindow&lt;/span&gt; &lt;span class="n"&gt;alloc&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="nl"&gt;initWithFrame&lt;/span&gt;&lt;span class="p"&gt;:[[&lt;/span&gt;&lt;span class="bp"&gt;UIScreen&lt;/span&gt; &lt;span class="n"&gt;mainScreen&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;bounds&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt; &lt;span class="n"&gt;autorelease&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="c1"&gt;// Override point for customization after application launch.&lt;/span&gt;

    &lt;span class="n"&gt;tickets&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;// 锁对象&lt;/span&gt;
    &lt;span class="n"&gt;ticketsCondition&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="bp"&gt;NSCondition&lt;/span&gt; &lt;span class="n"&gt;alloc&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

    &lt;span class="n"&gt;ticketsThreadone&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="bp"&gt;NSThread&lt;/span&gt; &lt;span class="n"&gt;alloc&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="nl"&gt;initWithTarget&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;self&lt;/span&gt; &lt;span class="nl"&gt;selector&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="k"&gt;@selector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nl"&gt;object&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;ticketsThreadone&lt;/span&gt; &lt;span class="nl"&gt;setName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;@&amp;quot;Thread-1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;ticketsThreadone&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

    &lt;span class="n"&gt;ticketsThreadtwo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="bp"&gt;NSThread&lt;/span&gt; &lt;span class="n"&gt;alloc&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="nl"&gt;initWithTarget&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;self&lt;/span&gt; &lt;span class="nl"&gt;selector&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="k"&gt;@selector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nl"&gt;object&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;ticketsThreadtwo&lt;/span&gt; &lt;span class="nl"&gt;setName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;@&amp;quot;Thread-2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;ticketsThreadtwo&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

    &lt;span class="c1"&gt;//[NSThread detachNewThreadSelector:@selector(run) toTarget:self withObject:nil];&lt;/span&gt;

    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;window&lt;/span&gt; &lt;span class="n"&gt;makeKeyAndVisible&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;YES&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;run&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;TRUE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// 上锁&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;ticketsCondition&lt;/span&gt; &lt;span class="n"&gt;lock&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tickets&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="bp"&gt;NSThread&lt;/span&gt; &lt;span class="nl"&gt;sleepForTimeInterval&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;0.2&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
            &lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;tickets&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;NSLog&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;@&amp;quot;当前票数是:%d,售出:%d,线程名:%@&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tickets&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="bp"&gt;NSThread&lt;/span&gt; &lt;span class="n"&gt;currentThread&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
            &lt;span class="n"&gt;tickets&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="c1"&gt;// [ticketsCondition signal];&lt;/span&gt;
        &lt;span class="c1"&gt;// 解除锁&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;ticketsCondition&lt;/span&gt; &lt;span class="n"&gt;unlock&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;@end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;运行结果：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;当前票数是:100,售出:0,线程名:Thread-1
当前票数是:99,售出:1,线程名:Thread-2
当前票数是:98,售出:2,线程名:Thread-1
当前票数是:97,售出:3,线程名:Thread-2
...
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id5"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id13"&gt;线程交互&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;如在主线程中修改界面。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;performSelectorOnMainThread:&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;SEL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;aSelector&lt;/span&gt; &lt;span class="nf"&gt;withObject:&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;arg&lt;/span&gt; &lt;span class="nf"&gt;waitUntilDone:&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;BOOL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;wait&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在本过程中，可能需要释放一些资源，则需要使用NSAutoreleasePool来进行管理。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;startTheBackgroundJob&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="bp"&gt;NSAutoreleasePool&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;pool&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="bp"&gt;NSAutoreleasePool&lt;/span&gt; &lt;span class="n"&gt;alloc&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

    &lt;span class="c1"&gt;// to do something in your thread job&lt;/span&gt;

    &lt;span class="p"&gt;...&lt;/span&gt;

    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;self&lt;/span&gt; &lt;span class="nl"&gt;performSelectorOnMainThread&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="k"&gt;@selector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;makeMyProgressBarMoving&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nl"&gt;withObject&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;nil&lt;/span&gt; &lt;span class="nl"&gt;waitUntilDone&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;NO&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;pool&lt;/span&gt; &lt;span class="k"&gt;release&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;如果某个ViewController里运行了一个Thread，Thread还没结束的时候，这个ViewController被Release了，结果会如何？&lt;/strong&gt;&lt;/p&gt;
&lt;p style="color:red;"&gt;经过的的测试，Thread 不结束，ViewController 一直保留，不会执行 dealloc 方法。&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="nsoperation"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id14"&gt;NSOperation&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;NSoperation也是多线程的一种，NSopertaion有2种形式&lt;/p&gt;
&lt;div class="section" id="id6"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id15"&gt;并发执行&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;并发执行你需要重载如下4个方法&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;//执行任务主函数，线程运行的入口函数&lt;/span&gt;
&lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;start&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

&lt;span class="c1"&gt;//是否允许并发，返回YES，允许并发，返回NO不允许。默认返回NO&lt;/span&gt;
&lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;BOOL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;isConcurrent&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

&lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;BOOL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;isExecuting&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

&lt;span class="c1"&gt;//是否已经完成，这个必须要重载，不然放在放在NSOperationQueue里的NSOpertaion不能正常释放。&lt;/span&gt;
&lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;BOOL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;isFinished&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;比如一个 TestNSOperation:NSoperaion 对象 testOperation 重载上述的4个方法，&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="bp"&gt;NSOperationQueue&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;queue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[[[&lt;/span&gt;&lt;span class="bp"&gt;NSOperationQueue&lt;/span&gt; &lt;span class="n"&gt;alloc&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;autorelease&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;queue&lt;/span&gt; &lt;span class="nl"&gt;addOperation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;testOperation&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;会自动调用 testOperation 里的 start 函数，如果需要多个 NSOperation, 你需要设置 queue 的一些属性，如果多个 NSOperation 之间又依赖关系，也可以设置，具体可以参考 &lt;a class="reference external" href="https://developer.apple.com/library/mac/#documentation/Cocoa/Reference/NSOperation_class/Reference/Reference.html"&gt;API&lt;/a&gt; 文档。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id7"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id16"&gt;非并发执行&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;只需要重载这个 main 方法就可以了。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;-(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;main&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="gcd"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id17"&gt;GCD&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;iOS 4.0+ 才支持。&lt;/p&gt;
&lt;p&gt;TODO&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id8"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id18"&gt;线程概念&lt;/a&gt;&lt;/h2&gt;
&lt;div class="section" id="run-loops"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id19"&gt;Run Loops&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;一个 run loop 就是一个事件处理的循环，用来不停的调度工作以及处理输入事件。使用 run loop 的目的是让你的线程在有工作的时候忙于工作，而没工作的时候处于休眠状态。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="iOS"></category><category term="thread"></category></entry><entry><title>解决 OpenWrt Bad Address 问题</title><link href="https://magicalboy.com/note/openwrt-bad-address.html" rel="alternate"></link><published>2016-01-14T13:55:11+08:00</published><updated>2016-01-14T13:55:11+08:00</updated><author><name>Don</name></author><id>tag:magicalboy.com,2016-01-14:/note/openwrt-bad-address.html</id><summary type="html">&lt;p&gt;自升级 CC 后，一切都正常。&lt;/p&gt;
&lt;p&gt;突然有一天发现 DDNS 出了问题，LuCI 的服务界面都刷不完整。&lt;/p&gt;
&lt;p&gt;opkg update 失败。&lt;/p&gt;
&lt;p&gt;ping 所有网址都是 bad address，ping ip 地址正常。&lt;/p&gt;
&lt;p&gt;nslookup 只到 localhost 卡住。&lt;/p&gt;
&lt;p&gt;检查 DNS 配置 &lt;em&gt;vi /etc/config/dhcp&lt;/em&gt; 正常，网络配置 &lt;em&gt;/etc/config/network&lt;/em&gt; 正常。&lt;/p&gt;
&lt;p&gt;找了Ｎ久才发现 &lt;em&gt;/etc/resolv.conf&lt;/em&gt; 文件被修改，解决方法：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# 删除 /etc/resolv.conf&lt;/span&gt;
vi /etc/resolv.conf …&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;自升级 CC 后，一切都正常。&lt;/p&gt;
&lt;p&gt;突然有一天发现 DDNS 出了问题，LuCI 的服务界面都刷不完整。&lt;/p&gt;
&lt;p&gt;opkg update 失败。&lt;/p&gt;
&lt;p&gt;ping 所有网址都是 bad address，ping ip 地址正常。&lt;/p&gt;
&lt;p&gt;nslookup 只到 localhost 卡住。&lt;/p&gt;
&lt;p&gt;检查 DNS 配置 &lt;em&gt;vi /etc/config/dhcp&lt;/em&gt; 正常，网络配置 &lt;em&gt;/etc/config/network&lt;/em&gt; 正常。&lt;/p&gt;
&lt;p&gt;找了Ｎ久才发现 &lt;em&gt;/etc/resolv.conf&lt;/em&gt; 文件被修改，解决方法：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# 删除 /etc/resolv.conf&lt;/span&gt;
vi /etc/resolv.conf
&lt;span class="c1"&gt;# 加入以下&lt;/span&gt;

nameserver &lt;span class="m"&gt;114&lt;/span&gt;.114.114.114
nameserver &lt;span class="m"&gt;114&lt;/span&gt;.114.114.115
nameserver &lt;span class="m"&gt;8&lt;/span&gt;.8.8.8
nameserver &lt;span class="m"&gt;8&lt;/span&gt;.8.4.4

&lt;span class="c1"&gt;# reboot&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;问题解决&lt;/p&gt;
</content><category term="Linux"></category><category term="OpenWrt"></category></entry><entry><title>OpenWrt DDNS 配置</title><link href="https://magicalboy.com/note/openwrt-ddns.html" rel="alternate"></link><published>2016-01-14T13:55:11+08:00</published><updated>2016-01-14T13:55:11+08:00</updated><author><name>Don</name></author><id>tag:magicalboy.com,2016-01-14:/note/openwrt-ddns.html</id><summary type="html">&lt;div class="section" id="id1"&gt;
&lt;h2&gt;环境&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;OpenWrt CC (LuCI)&lt;/li&gt;
&lt;li&gt;电信光纤 100M&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="luci-app-ddns"&gt;
&lt;h2&gt;一、安装 luci-app-ddns&lt;/h2&gt;
&lt;p&gt;登录路由器，进入 System -&amp;gt; Software，点击 Update lists 更新软件库。&lt;/p&gt;
&lt;p&gt;在 Filter 中输入关键字 ddns, 点击 Find package，然后在 Available packages 列表中找到 luci-i18n-ddns-en，OpenWrt 会自动分析依赖关系安装好 DDNS。&lt;/p&gt;
&lt;p&gt;安装完成后，在 System 和 Network 中间会多出一项 Services（假设之前没有安装过其他服务），里面有 Dynamic DNS 一项，点击进入配置界面。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="ddns"&gt;
&lt;h2&gt;二、配置 DDNS&lt;/h2&gt;
&lt;p&gt;DDNS 服务提供商选择列表中没有花生壳服务 …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="section" id="id1"&gt;
&lt;h2&gt;环境&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;OpenWrt CC (LuCI)&lt;/li&gt;
&lt;li&gt;电信光纤 100M&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="luci-app-ddns"&gt;
&lt;h2&gt;一、安装 luci-app-ddns&lt;/h2&gt;
&lt;p&gt;登录路由器，进入 System -&amp;gt; Software，点击 Update lists 更新软件库。&lt;/p&gt;
&lt;p&gt;在 Filter 中输入关键字 ddns, 点击 Find package，然后在 Available packages 列表中找到 luci-i18n-ddns-en，OpenWrt 会自动分析依赖关系安装好 DDNS。&lt;/p&gt;
&lt;p&gt;安装完成后，在 System 和 Network 中间会多出一项 Services（假设之前没有安装过其他服务），里面有 Dynamic DNS 一项，点击进入配置界面。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="ddns"&gt;
&lt;h2&gt;二、配置 DDNS&lt;/h2&gt;
&lt;p&gt;DDNS 服务提供商选择列表中没有花生壳服务，使用 SSH 登录路由器修改：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;＃ vi /usr/lib/ddns/services
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;按 G 跳到最后一行，加入&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;oray.com&amp;quot;&lt;/span&gt;      &lt;span class="s2"&gt;&amp;quot;http://[USERNAME]:[PASSWORD]@ddns.oray.com/ph/update?hostname=[DOMAIN]&amp;amp;myip=[IP]&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后再刷新页面，选择 Oray.com 服务，填写相关信息提交后马上就可以看到绑定的 IP 了。&lt;/p&gt;
&lt;/div&gt;
</content><category term="Linux"></category><category term="OpenWrt"></category><category term="ddns"></category></entry><entry><title>OpenWrt Luci</title><link href="https://magicalboy.com/note/openwrt-luci.html" rel="alternate"></link><published>2016-01-14T13:55:11+08:00</published><updated>2016-01-14T13:55:11+08:00</updated><author><name>Don</name></author><id>tag:magicalboy.com,2016-01-14:/note/openwrt-luci.html</id><summary type="html">&lt;ol class="arabic simple"&gt;
&lt;li&gt;路由 Luci Web 界面访问不了问题&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
解决方法：重启 Luci&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;/etc/init.d/uhttpd restart
&lt;/pre&gt;&lt;/div&gt;
</summary><content type="html">&lt;ol class="arabic simple"&gt;
&lt;li&gt;路由 Luci Web 界面访问不了问题&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
解决方法：重启 Luci&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;/etc/init.d/uhttpd restart
&lt;/pre&gt;&lt;/div&gt;
</content><category term="Linux"></category><category term="OpenWrt"></category></entry><entry><title>OpenWrt WDS 连接设置</title><link href="https://magicalboy.com/note/openwrt-wds.html" rel="alternate"></link><published>2016-01-14T13:55:11+08:00</published><updated>2016-01-14T13:55:11+08:00</updated><author><name>Don</name></author><id>tag:magicalboy.com,2016-01-14:/note/openwrt-wds.html</id><summary type="html">&lt;div class="section" id="id1"&gt;
&lt;h2&gt;介绍&lt;/h2&gt;
&lt;blockquote&gt;
算了不想写了&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class="section" id="whr-g300n-v2"&gt;
&lt;h2&gt;WHR-G300N V2&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;产品名称： BUFFALO 巴法络 WHR-G300N V2，硬件配置同 Buffalo WHR-G301N。&lt;/li&gt;
&lt;li&gt;购买链接：&lt;a class="reference external" href="http://www.amazon.cn/BUFFALO"&gt;http://www.amazon.cn/BUFFALO&lt;/a&gt;-巴法络-WHR-G300N-V2-WHR-G300N-CH-高速无线路由器/dp/B005PKUNUC&lt;/li&gt;
&lt;li&gt;官网地址：&lt;a class="reference external" href="http://www.buffalotech.com/products/wireless/single-band-routers/airstation-n300-wireless-router"&gt;http://www.buffalotech.com/products/wireless/single-band-routers/airstation-n300-wireless-router&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;OpenWrt Wiki：&lt;a class="reference external" href="http://wiki.openwrt.org/toh/buffalo/whr-g300nv2"&gt;http://wiki.openwrt.org/toh/buffalo/whr-g300nv2&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;刷机教程参考：&lt;a class="reference external" href="http://www.dd-wrt.com/wiki/index.php/WHR-G300N_V2"&gt;http://www.dd-wrt.com/wiki/index.php/WHR-G300N_V2&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="tftp"&gt;
&lt;h2&gt;砖头复活记：tftp …&lt;/h2&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="section" id="id1"&gt;
&lt;h2&gt;介绍&lt;/h2&gt;
&lt;blockquote&gt;
算了不想写了&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class="section" id="whr-g300n-v2"&gt;
&lt;h2&gt;WHR-G300N V2&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;产品名称： BUFFALO 巴法络 WHR-G300N V2，硬件配置同 Buffalo WHR-G301N。&lt;/li&gt;
&lt;li&gt;购买链接：&lt;a class="reference external" href="http://www.amazon.cn/BUFFALO"&gt;http://www.amazon.cn/BUFFALO&lt;/a&gt;-巴法络-WHR-G300N-V2-WHR-G300N-CH-高速无线路由器/dp/B005PKUNUC&lt;/li&gt;
&lt;li&gt;官网地址：&lt;a class="reference external" href="http://www.buffalotech.com/products/wireless/single-band-routers/airstation-n300-wireless-router"&gt;http://www.buffalotech.com/products/wireless/single-band-routers/airstation-n300-wireless-router&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;OpenWrt Wiki：&lt;a class="reference external" href="http://wiki.openwrt.org/toh/buffalo/whr-g300nv2"&gt;http://wiki.openwrt.org/toh/buffalo/whr-g300nv2&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;刷机教程参考：&lt;a class="reference external" href="http://www.dd-wrt.com/wiki/index.php/WHR-G300N_V2"&gt;http://www.dd-wrt.com/wiki/index.php/WHR-G300N_V2&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="tftp"&gt;
&lt;h2&gt;砖头复活记：tftp 刷机教程&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;刷机环境：OS X El Capitan&lt;/li&gt;
&lt;li&gt;tftp 固件：&lt;a class="reference external" href="https://downloads.openwrt.org/chaos_calmer/15.05/ar71xx/generic/openwrt-15.05-ar71xx-generic-whr-g301n-squashfs-tftp.bin"&gt;https://downloads.openwrt.org/chaos_calmer/15.05/ar71xx/generic/openwrt-15.05-ar71xx-generic-whr-g301n-squashfs-tftp.bin&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;1. 用网线连接路由器，打开电源，用 ifconfig 查看网络接口，比如 en0；
修改本机 IP：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo ifconfig en0 &lt;span class="m"&gt;192&lt;/span&gt;.168.11.2
&lt;/pre&gt;&lt;/div&gt;
&lt;ol class="arabic simple" start="2"&gt;
&lt;li&gt;配置网络，将 192.168.11.1 跟路由器的 MAC 地址关联起来：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo arp -s &lt;span class="m"&gt;192&lt;/span&gt;.168.11.1 xx:xx:xx:xx:xx:xx
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;MAC 地址见背后标签上的 SSID。&lt;/p&gt;
&lt;ol class="arabic simple" start="3"&gt;
&lt;li&gt;这个时候可以断开路由器电源了，接着 cd 到固件所在目录，执行 tftp：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Set verbose mode on &lt;span class="o"&gt;(&lt;/span&gt;so we know what&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;s going on&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
tftp&amp;gt; verbose
Verbose mode on.
Binary mode on &lt;span class="o"&gt;(&lt;/span&gt;because we are uploading a binary file&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
tftp&amp;gt; binary
mode &lt;span class="nb"&gt;set&lt;/span&gt; to octet
Trace on &lt;span class="o"&gt;(&lt;/span&gt;so we get feedback on our commands&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
tftp&amp;gt; trace
Packet tracing on.
Rexmt &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;to retry the upload on failure every &lt;span class="m"&gt;1&lt;/span&gt; second&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
tftp&amp;gt; rexmt &lt;span class="m"&gt;1&lt;/span&gt;
And timeout to &lt;span class="m"&gt;60&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;repeatedly retry the upload &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="m"&gt;60&lt;/span&gt; seconds before giving up&lt;span class="o"&gt;)&lt;/span&gt;
tftp&amp;gt; timeout &lt;span class="m"&gt;60&lt;/span&gt;
tftp&amp;gt; connect &lt;span class="m"&gt;192&lt;/span&gt;.168.11.1
尽管路由器是关的
tftp&amp;gt; status
查看当前的配置状态
tftp&amp;gt; put tftp.bin
tftp.bin 就是下载回来的 openwrt-tftp版本的固件，已经被重命名。
&lt;/pre&gt;&lt;/div&gt;
&lt;ol class="arabic simple" start="4"&gt;
&lt;li&gt;将路由器的电源接上，同时重复执行以上的 put 指令，直到有以下反应：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;tftp&amp;gt; put tftp.bin
putting tftp.bin to &lt;span class="m"&gt;192&lt;/span&gt;.168.11.1:tftp.bin &lt;span class="o"&gt;[&lt;/span&gt;octet&lt;span class="o"&gt;]&lt;/span&gt;
sent WRQ &amp;lt;&lt;span class="nv"&gt;file&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;tftp.bin, &lt;span class="nv"&gt;mode&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;octet&amp;gt;
sent WRQ &amp;lt;&lt;span class="nv"&gt;file&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;tftp.bin, &lt;span class="nv"&gt;mode&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;octet&amp;gt;
received ACK &amp;lt;&lt;span class="nv"&gt;block&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&amp;gt;
sent DATA &amp;lt;&lt;span class="nv"&gt;block&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;, &lt;span class="m"&gt;512&lt;/span&gt; bytes&amp;gt;
...
sent DATA &amp;lt;&lt;span class="nv"&gt;block&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;6529&lt;/span&gt;, &lt;span class="m"&gt;36&lt;/span&gt; bytes&amp;gt;
received ACK &amp;lt;&lt;span class="nv"&gt;block&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;6529&lt;/span&gt;&amp;gt;
Sent &lt;span class="m"&gt;3342372&lt;/span&gt; bytes in &lt;span class="m"&gt;2&lt;/span&gt;.7 seconds &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;9903324&lt;/span&gt; bits/sec&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;此时上传完毕，可以输入 quit 退出。&lt;/p&gt;
&lt;ol class="arabic simple" start="5"&gt;
&lt;li&gt;路由器红色的灯会有不同的反应，几分钟后会自动重启。此致，成功复活！&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content><category term="Linux"></category><category term="OpenWrt"></category></entry><entry><title>Pelican</title><link href="https://magicalboy.com/note/pelican.html" rel="alternate"></link><published>2016-01-14T13:55:11+08:00</published><updated>2016-01-14T13:55:11+08:00</updated><author><name>Don</name></author><id>tag:magicalboy.com,2016-01-14:/note/pelican.html</id><summary type="html">&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;img alt="pelican logo" src="http://docs.getpelican.com/en/3.2/_static/pelican.png" /&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;a class="reference external" href="http://docs.getpelican.com/en/3.2/"&gt;Pelican&lt;/a&gt; is a static site generator, written in &lt;a class="reference external" href="http://www.python.org/"&gt;Python&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;目前最新版本为 &lt;a class="reference external" href="http://docs.getpelican.com/en/3.2/changelog.html#id1"&gt;3.2 (2013-04-24)&lt;/a&gt;&lt;/p&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;写作流程&lt;/h2&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;开启 virtualenv&lt;/li&gt;
&lt;li&gt;进入工作目录&lt;/li&gt;
&lt;li&gt;$ make devserver&lt;/li&gt;
&lt;li&gt;./develop_server.sh stop&lt;/li&gt;
&lt;li&gt;发布直接使用配置好的 &lt;tt class="docutils literal"&gt;git comit &amp;amp; push&lt;/tt&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;更多详细流程见 &lt;a class="reference external" href="http://docs.getpelican.com/en/3.2/getting_started.html"&gt;Getting started — Pelican 3 documentation&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</summary><content type="html">&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;img alt="pelican logo" src="http://docs.getpelican.com/en/3.2/_static/pelican.png" /&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;a class="reference external" href="http://docs.getpelican.com/en/3.2/"&gt;Pelican&lt;/a&gt; is a static site generator, written in &lt;a class="reference external" href="http://www.python.org/"&gt;Python&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;目前最新版本为 &lt;a class="reference external" href="http://docs.getpelican.com/en/3.2/changelog.html#id1"&gt;3.2 (2013-04-24)&lt;/a&gt;&lt;/p&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;写作流程&lt;/h2&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;开启 virtualenv&lt;/li&gt;
&lt;li&gt;进入工作目录&lt;/li&gt;
&lt;li&gt;$ make devserver&lt;/li&gt;
&lt;li&gt;./develop_server.sh stop&lt;/li&gt;
&lt;li&gt;发布直接使用配置好的 &lt;tt class="docutils literal"&gt;git comit &amp;amp; push&lt;/tt&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;更多详细流程见 &lt;a class="reference external" href="http://docs.getpelican.com/en/3.2/getting_started.html"&gt;Getting started — Pelican 3 documentation&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</content></entry><entry><title>Photoshop 学习笔记</title><link href="https://magicalboy.com/note/photoshop.html" rel="alternate"></link><published>2016-01-14T13:55:11+08:00</published><updated>2016-01-14T13:55:11+08:00</updated><author><name>Don</name></author><id>tag:magicalboy.com,2016-01-14:/note/photoshop.html</id><summary type="html">&lt;p&gt;Photoshop 是设计作图的必备工具，如果码农也会使用Photoshop来设计UI的话。。。唉，无论结果怎么样，求人不如求己。&lt;/p&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;Photoshop 简介&lt;/h2&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;img alt="photoshop icon" src="static/images/Adobe_Photoshop_CS6_icon.svg.png" /&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;img alt="Photoshop CS 5.1" class="align-left" src="static/images/photoshop.jpg" style="width: 800px;" /&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Adobe Photoshop，简称“PS”（其程序图标便是“PS”）是一个由Adobe Systems开发和发行的图像处理软件。
目前稳定版本 为 &lt;a class="reference external" href="http://www.adobe.com/support/downloads/product.jsp?product=39&amp;amp;platform=Windows%7Caccessdate=2012-04-23}"&gt;CS6 (13.0)&lt;/a&gt; 2012年4月23日。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;Photoshop 基础&lt;/h2&gt;
&lt;div class="section" id="id3"&gt;
&lt;h3&gt;图层、蒙板、模式和样式&lt;/h3&gt;
&lt;p&gt;经常看到美工MM设计好的PS文件都是由很多 &lt;strong&gt;图层（Layer）&lt;/strong&gt; 组成的，就像一个平铺好的三文治。图层面板实际上就是一幅动态的堆栈图表。屏幕中显示的图像就是它们的俯视图。&lt;/p&gt;
&lt;p&gt;堆栈由几种不同类型的图层组成：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;背景（Background）图层，在堆栈的最下方，完全由像素填充而成。&lt;/li&gt;
&lt;li&gt;一般图层，也由像素组成。不同的是可以包含完全透明或半透明的区域，可以透过透明区域看到下层图层。&lt;/li&gt;
&lt;li&gt;调整图层（Adjustment Layer），不包含任何像素，它所包含的指令可以调整其下方图层的颜色与色调。&lt;/li&gt;
&lt;li&gt;文本图层 …&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Photoshop 是设计作图的必备工具，如果码农也会使用Photoshop来设计UI的话。。。唉，无论结果怎么样，求人不如求己。&lt;/p&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;Photoshop 简介&lt;/h2&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;img alt="photoshop icon" src="static/images/Adobe_Photoshop_CS6_icon.svg.png" /&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;img alt="Photoshop CS 5.1" class="align-left" src="static/images/photoshop.jpg" style="width: 800px;" /&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Adobe Photoshop，简称“PS”（其程序图标便是“PS”）是一个由Adobe Systems开发和发行的图像处理软件。
目前稳定版本 为 &lt;a class="reference external" href="http://www.adobe.com/support/downloads/product.jsp?product=39&amp;amp;platform=Windows%7Caccessdate=2012-04-23}"&gt;CS6 (13.0)&lt;/a&gt; 2012年4月23日。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;Photoshop 基础&lt;/h2&gt;
&lt;div class="section" id="id3"&gt;
&lt;h3&gt;图层、蒙板、模式和样式&lt;/h3&gt;
&lt;p&gt;经常看到美工MM设计好的PS文件都是由很多 &lt;strong&gt;图层（Layer）&lt;/strong&gt; 组成的，就像一个平铺好的三文治。图层面板实际上就是一幅动态的堆栈图表。屏幕中显示的图像就是它们的俯视图。&lt;/p&gt;
&lt;p&gt;堆栈由几种不同类型的图层组成：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;背景（Background）图层，在堆栈的最下方，完全由像素填充而成。&lt;/li&gt;
&lt;li&gt;一般图层，也由像素组成。不同的是可以包含完全透明或半透明的区域，可以透过透明区域看到下层图层。&lt;/li&gt;
&lt;li&gt;调整图层（Adjustment Layer），不包含任何像素，它所包含的指令可以调整其下方图层的颜色与色调。&lt;/li&gt;
&lt;li&gt;文本图层（Type Layer），存放文字的图层，可以编辑调整颜色等。&lt;/li&gt;
&lt;li&gt;填充图层和形状图层，颜色像素及对应的指令，如渐变或图案等。&lt;/li&gt;
&lt;li&gt;智能对象（Smart Object），是元素的集合体。先理解为很牛Ｘ的东西就了。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;蒙板&lt;/strong&gt;，除背景图层外其它图层都可以包含两种蒙板：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;图层蒙板，基于像素。&lt;/li&gt;
&lt;li&gt;失量蒙板，基于指令。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;它们的作用是遮盖其下方的部分图层来显示。其它显示模式有 &lt;strong&gt;不透明度&lt;/strong&gt;、&lt;strong&gt;混合模式&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;图层样式&lt;/strong&gt;，除背景图层外，其它图层都可以包含图层样式。样式是一种指令集，可以创建投影、发光和斜面等特效，或者模拟带有半透明、光照、色彩和图案的材质。双击某一普通图层可以打开选项。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h3&gt;像素与指令&lt;/h3&gt;
&lt;p&gt;像素与指令的区别：简单说，基于像素的图像是位图，基于指令的图像为矢量图。&lt;/p&gt;
&lt;p&gt;基于指令的素材都可以还原到初始状态。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;栅格化&lt;/strong&gt; 指的是将指令转换为像素。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id5"&gt;
&lt;h3&gt;Photoshop 界面&lt;/h3&gt;
&lt;p&gt;什么工作区、导航就不写了，自己熟悉一下。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id6"&gt;
&lt;h3&gt;高效工作&lt;/h3&gt;
&lt;p&gt;使用调整图层，保护像素，保存选区，使用图层样式，复制图层，合并复制等概念。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content></entry><entry><title>程序语言历史</title><link href="https://magicalboy.com/note/programming-history.html" rel="alternate"></link><published>2016-01-14T13:55:11+08:00</published><updated>2016-01-14T13:55:11+08:00</updated><author><name>Don</name></author><id>tag:magicalboy.com,2016-01-14:/note/programming-history.html</id><summary type="html">&lt;a class="reference external image-reference" href="http://staff.pausd.org/~cbly/1web_design/12b_final/daniel/history.html"&gt;&lt;img alt="programming history" src="http://staff.pausd.org/~cbly/1web_design/12b_final/daniel/images/programminghistory.jpg" style="width: 1024px;" /&gt;&lt;/a&gt;
</summary><content type="html">&lt;a class="reference external image-reference" href="http://staff.pausd.org/~cbly/1web_design/12b_final/daniel/history.html"&gt;&lt;img alt="programming history" src="http://staff.pausd.org/~cbly/1web_design/12b_final/daniel/images/programminghistory.jpg" style="width: 1024px;" /&gt;&lt;/a&gt;
</content><category term="programming"></category><category term="programming language"></category><category term="history"></category></entry><entry><title>反编译 APK</title><link href="https://magicalboy.com/note/reverse-engineering-apk.html" rel="alternate"></link><published>2016-01-14T13:55:11+08:00</published><updated>2016-01-14T13:55:11+08:00</updated><author><name>Don</name></author><id>tag:magicalboy.com,2016-01-14:/note/reverse-engineering-apk.html</id><summary type="html">&lt;div class="contents topic" id="id1"&gt;
&lt;p class="topic-title first"&gt;目录&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference internal" href="#apktool" id="id3"&gt;apktool&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#dex2jar" id="id4"&gt;dex2jar&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="apktool"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id3"&gt;apktool&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="http://ibotpeaches.github.io/Apktool/"&gt;apktool1.5.2&lt;/a&gt; 使用示范，直接运行：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Apktool v1.5.2 - a tool &lt;span class="k"&gt;for&lt;/span&gt; reengineering Android apk files
Copyright &lt;span class="m"&gt;2010&lt;/span&gt; Ryszard Wi?niewski &amp;lt;brut.alll@gmail.com&amp;gt;
with smali v1.4.1, and baksmali v1.4.1
Updated by @iBotPeaches &amp;lt;connor.tumbleson@gmail.com&amp;gt;
Apache License &lt;span class="m"&gt;2&lt;/span&gt;.0 …&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="contents topic" id="id1"&gt;
&lt;p class="topic-title first"&gt;目录&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference internal" href="#apktool" id="id3"&gt;apktool&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#dex2jar" id="id4"&gt;dex2jar&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="apktool"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id3"&gt;apktool&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="http://ibotpeaches.github.io/Apktool/"&gt;apktool1.5.2&lt;/a&gt; 使用示范，直接运行：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Apktool v1.5.2 - a tool &lt;span class="k"&gt;for&lt;/span&gt; reengineering Android apk files
Copyright &lt;span class="m"&gt;2010&lt;/span&gt; Ryszard Wi?niewski &amp;lt;brut.alll@gmail.com&amp;gt;
with smali v1.4.1, and baksmali v1.4.1
Updated by @iBotPeaches &amp;lt;connor.tumbleson@gmail.com&amp;gt;
Apache License &lt;span class="m"&gt;2&lt;/span&gt;.0 &lt;span class="o"&gt;(&lt;/span&gt;http://www.apache.org/licenses/LICENSE-2.0&lt;span class="o"&gt;)&lt;/span&gt;

Usage: apktool &lt;span class="o"&gt;[&lt;/span&gt;-q&lt;span class="p"&gt;|&lt;/span&gt;--quiet OR -v&lt;span class="p"&gt;|&lt;/span&gt;--verbose&lt;span class="o"&gt;]&lt;/span&gt; COMMAND &lt;span class="o"&gt;[&lt;/span&gt;...&lt;span class="o"&gt;]&lt;/span&gt;

COMMANDs are:

    d&lt;span class="o"&gt;[&lt;/span&gt;ecode&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;OPTS&lt;span class="o"&gt;]&lt;/span&gt; &amp;lt;file.apk&amp;gt; &lt;span class="o"&gt;[&lt;/span&gt;&amp;lt;dir&amp;gt;&lt;span class="o"&gt;]&lt;/span&gt;
        Decode &amp;lt;file.apk&amp;gt; to &amp;lt;dir&amp;gt;.

        OPTS:

        -s, --no-src
            Do not decode sources.
        -r, --no-res
            Do not decode resources.
        -d, --debug
            Decode in debug mode. Check project page &lt;span class="k"&gt;for&lt;/span&gt; more info.
        -b, --no-debug-info
            Baksmali -- don&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;t write out debug info &lt;span class="o"&gt;(&lt;/span&gt;.local, .param, .line, etc.&lt;span class="o"&gt;)&lt;/span&gt;
        -f, --force
            Force delete destination directory.
        -t &amp;lt;tag&amp;gt;, --frame-tag &amp;lt;tag&amp;gt;
            Try to use framework files tagged by &amp;lt;tag&amp;gt;.
        --frame-path &amp;lt;dir&amp;gt;
            Use the specified directory &lt;span class="k"&gt;for&lt;/span&gt; framework files
        --keep-broken-res
            Use &lt;span class="k"&gt;if&lt;/span&gt; there was an error and some resources were dropped, e.g.:
            &lt;span class="s2"&gt;&amp;quot;Invalid config flags detected. Dropping resources&amp;quot;&lt;/span&gt;, but you
            want to decode them anyway, even with errors. You will have to
            fix them manually before building.

    b&lt;span class="o"&gt;[&lt;/span&gt;uild&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;OPTS&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&amp;lt;app_path&amp;gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&amp;lt;out_file&amp;gt;&lt;span class="o"&gt;]&lt;/span&gt;
        Build an apk from already decoded application located in &amp;lt;app_path&amp;gt;.

        It will automatically detect, whether files was changed and perform
        needed steps only.

        If you omit &amp;lt;app_path&amp;gt; &lt;span class="k"&gt;then&lt;/span&gt; current directory will be used.
        If you omit &amp;lt;out_file&amp;gt; &lt;span class="k"&gt;then&lt;/span&gt; &amp;lt;app_path&amp;gt;/dist/&amp;lt;name_of_original.apk&amp;gt;
        will be used.

        OPTS:

        -f, --force-all
            Skip changes detection and build all files.
        -d, --debug
            Build in debug mode. Check project page &lt;span class="k"&gt;for&lt;/span&gt; more info.
        -a, --aapt
            Loads aapt from specified location.

    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;install-framework &amp;lt;framework.apk&amp;gt; &lt;span class="o"&gt;[&lt;/span&gt;&amp;lt;tag&amp;gt;&lt;span class="o"&gt;]&lt;/span&gt; --frame-path &lt;span class="o"&gt;[&lt;/span&gt;&amp;lt;location&amp;gt;&lt;span class="o"&gt;]&lt;/span&gt;
        Install framework file to your system.

For additional info, see: http://code.google.com/p/android-apktool/
For smali/baksmali info, see: http://code.google.com/p/smali/
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;使用示例：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ java -jar /Users/Don/Development/apktool1.5.2/apktool.jar d /Users/Don/Downloads/controls.apk

I: Baksmaling...
I: Loading resource table...
I: Loaded.
I: Decoding AndroidManifest.xml with resources...
I: Loading resource table from file: /Users/Don/Library/apktool/framework/1.apk
I: Loaded.
I: Regular manifest package...
I: Decoding file-resources...
I: Decoding values */* XMLs...
I: Done.
I: Copying assets and libs...
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;成功后会在当前目录找到反编译好的目录，目录与apk文件同名。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="dex2jar"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id4"&gt;dex2jar&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="http://code.google.com/p/dex2jar/"&gt;dex2jar&lt;/a&gt; - Tools to work with android .dex and java .class files&lt;/p&gt;
&lt;p&gt;将 apk 转换为 jar 的方法：将 apk 文件命名解压出来，然后复制解压到的 classes.dex 文件到 dex2jar 目录，执行 dex2jar 命令（以 OS X 为例）：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ./dex2jar.sh classes.dex

this cmd is deprecated, use the d2j-dex2jar &lt;span class="k"&gt;if&lt;/span&gt; possible
dex2jar version: translator-0.0.9.15
dex2jar classes.dex -&amp;gt; classes_dex2jar.jar
Done.
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;成功后会得到相应的 jar 文件，接着可以拖到 &lt;a class="reference external" href="http://jd.benow.ca/"&gt;http://jd.benow.ca/&lt;/a&gt; 上面直接看结果，或者下载相应平台的客户端等。&lt;/p&gt;
&lt;/div&gt;
</content><category term="Android"></category></entry><entry><title>码农必备</title><link href="https://magicalboy.com/note/skill-framework.html" rel="alternate"></link><published>2016-01-14T13:55:11+08:00</published><updated>2016-01-14T13:55:11+08:00</updated><author><name>Don</name></author><id>tag:magicalboy.com,2016-01-14:/note/skill-framework.html</id><summary type="html">&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;img alt="码农的求生技能" src="images/skills.png" /&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
</summary><content type="html">&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;img alt="码农的求生技能" src="images/skills.png" /&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
</content></entry><entry><title>SVN 使用</title><link href="https://magicalboy.com/note/svn.html" rel="alternate"></link><published>2016-01-14T13:55:11+08:00</published><updated>2015-05-28T11:50:00+08:00</updated><author><name>Don</name></author><id>tag:magicalboy.com,2016-01-14:/note/svn.html</id><summary type="html">&lt;div class="section" id="id1"&gt;
&lt;h2&gt;创建分支&lt;/h2&gt;
&lt;p&gt;建立分支非常的简单—使用svn copy命令给你的工程做个拷贝。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ svn copy http://svn.example.com/repos/calc/trunk &lt;span class="se"&gt;\&lt;/span&gt;
           http://svn.example.com/repos/calc/branches/my-calc-branch &lt;span class="se"&gt;\&lt;/span&gt;
      -m &lt;span class="s2"&gt;&amp;quot;Creating a private branch of /calc/trunk.&amp;quot;&lt;/span&gt;

Committed revision &lt;span class="m"&gt;341&lt;/span&gt;.
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;在分支上工作&lt;/h2&gt;
&lt;p&gt;现在你已经在项目里建立分支了，你可以取出一个新的工作拷贝来开始使用：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ svn checkout http://svn.example.com/repos/calc/branches/my-calc-branch
A  my-calc-branch/Makefile
A  my-calc-branch …&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="section" id="id1"&gt;
&lt;h2&gt;创建分支&lt;/h2&gt;
&lt;p&gt;建立分支非常的简单—使用svn copy命令给你的工程做个拷贝。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ svn copy http://svn.example.com/repos/calc/trunk &lt;span class="se"&gt;\&lt;/span&gt;
           http://svn.example.com/repos/calc/branches/my-calc-branch &lt;span class="se"&gt;\&lt;/span&gt;
      -m &lt;span class="s2"&gt;&amp;quot;Creating a private branch of /calc/trunk.&amp;quot;&lt;/span&gt;

Committed revision &lt;span class="m"&gt;341&lt;/span&gt;.
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;在分支上工作&lt;/h2&gt;
&lt;p&gt;现在你已经在项目里建立分支了，你可以取出一个新的工作拷贝来开始使用：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ svn checkout http://svn.example.com/repos/calc/branches/my-calc-branch
A  my-calc-branch/Makefile
A  my-calc-branch/integer.c
A  my-calc-branch/button.c
Checked out revision &lt;span class="m"&gt;341&lt;/span&gt;.
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="xcode-svnignore"&gt;
&lt;h2&gt;为 Xcode 项目增加 .svnignore&lt;/h2&gt;
&lt;p&gt;在 SVN 中没有类似于 git 的 ignore 那样，只要添加就能自动过滤，而是需要手动设定，下面经常使用的 .svnignore template：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;.DS_Store
xcuserdata
build
*.mode1v3
*.pbxuser
*.xcworkspace
*.moved-aside
DerivedData

&lt;span class="c1"&gt;# If you are using CocoaPods&lt;/span&gt;
Pods
Podfile.lock
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;使用方法：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ svn propset svn:ignore -R -F .svnignore .
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;参考连接&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="http://www.subversion.org.cn/svnbook/nightly/svn.branchmerge.using.html"&gt;http://www.subversion.org.cn/svnbook/nightly/svn.branchmerge.using.html&lt;/a&gt;
&lt;a class="reference external" href="http://blog.kumaya.co/2014/09/25/using-svn-ignore-with-xcode/"&gt;http://blog.kumaya.co/2014/09/25/using-svn-ignore-with-xcode/&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</content></entry><entry><title>纯文本编辑器</title><link href="https://magicalboy.com/note/text_editor.html" rel="alternate"></link><published>2016-01-14T13:55:11+08:00</published><updated>2016-01-14T13:55:11+08:00</updated><author><name>Don</name></author><id>tag:magicalboy.com,2016-01-14:/note/text_editor.html</id><summary type="html">&lt;div class="section" id="retext"&gt;
&lt;h2&gt;ReText&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="http://sourceforge.net/projects/retext/"&gt;ReText&lt;/a&gt; is a simple editor that reads your text with MarkDown or HTML markup and saves it as plain text, HTML or PDF.&lt;/p&gt;
&lt;p&gt;It is written in Python using Qt libraries.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;It's a cross platform program.&lt;/strong&gt;&lt;/p&gt;
&lt;div class="section" id="mac-os-x-yosemite"&gt;
&lt;h3&gt;Mac OS X Yosemite 上安装&lt;/h3&gt;
&lt;p&gt;使用 brew 安装：&lt;a class="reference external" href="http://sourceforge.net/p/retext/wiki/Home/"&gt;http://sourceforge.net/p/retext …&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="section" id="retext"&gt;
&lt;h2&gt;ReText&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="http://sourceforge.net/projects/retext/"&gt;ReText&lt;/a&gt; is a simple editor that reads your text with MarkDown or HTML markup and saves it as plain text, HTML or PDF.&lt;/p&gt;
&lt;p&gt;It is written in Python using Qt libraries.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;It's a cross platform program.&lt;/strong&gt;&lt;/p&gt;
&lt;div class="section" id="mac-os-x-yosemite"&gt;
&lt;h3&gt;Mac OS X Yosemite 上安装&lt;/h3&gt;
&lt;p&gt;使用 brew 安装：&lt;a class="reference external" href="http://sourceforge.net/p/retext/wiki/Home/"&gt;http://sourceforge.net/p/retext/wiki/Home/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;以下是部分安装日志：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ brew tap homebrew/python
&lt;span class="o"&gt;==&lt;/span&gt;&amp;gt; Tapping Homebrew/python
Cloning into &lt;span class="s1"&gt;&amp;#39;/usr/local/Library/Taps/homebrew/homebrew-python&amp;#39;&lt;/span&gt;...
remote: Counting objects: &lt;span class="m"&gt;16&lt;/span&gt;, &lt;span class="k"&gt;done&lt;/span&gt;.
remote: Compressing objects: &lt;span class="m"&gt;100&lt;/span&gt;% &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;16&lt;/span&gt;/16&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="k"&gt;done&lt;/span&gt;.
remote: Total &lt;span class="m"&gt;16&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;delta &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;, reused &lt;span class="m"&gt;7&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;delta &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;, pack-reused &lt;span class="m"&gt;0&lt;/span&gt;
Unpacking objects: &lt;span class="m"&gt;100&lt;/span&gt;% &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;16&lt;/span&gt;/16&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="k"&gt;done&lt;/span&gt;.
Checking connectivity... &lt;span class="k"&gt;done&lt;/span&gt;.
Tapped &lt;span class="m"&gt;13&lt;/span&gt; formulae &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;51&lt;/span&gt; files, 216K&lt;span class="o"&gt;)&lt;/span&gt;

$ brew install &lt;span class="nv"&gt;retext&lt;/span&gt;
&lt;span class="o"&gt;==&lt;/span&gt;&amp;gt; Installing retext from homebrew/homebrew-python
&lt;span class="o"&gt;==&lt;/span&gt;&amp;gt; Installing dependencies &lt;span class="k"&gt;for&lt;/span&gt; retext: xz, pkg-config, readline, sqlite,
&lt;span class="o"&gt;==&lt;/span&gt;&amp;gt; Installing retext dependency: &lt;span class="nv"&gt;xz&lt;/span&gt;
&lt;span class="o"&gt;==&lt;/span&gt;&amp;gt; Downloading https://homebrew.bintray.com/bottles/xz-5.2.1.yosemite.bottle.ta
&lt;span class="c1"&gt;######################################################################## 100.0%&lt;/span&gt;
...
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;安装编译完成后，直接调用 &lt;em&gt;retext&lt;/em&gt; 命令即可打开带图形界面的编辑器。That's all，就这么简单。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="mac-os-x-10-9-2"&gt;
&lt;h3&gt;Mac OS X（10.9.2） 上安装&lt;/h3&gt;
&lt;p&gt;使用 brew 安装：&lt;a class="reference external" href="http://sourceforge.net/p/retext/wiki/Home/"&gt;http://sourceforge.net/p/retext/wiki/Home/&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;brew tap samueljohn/python
brew install enchant
pip install pyenchant
pip install markups
pip install markdown
pip install docutils

$ brew install retext
Warning: It appears you have MacPorts or Fink installed.
Software installed with other package managers causes known problems &lt;span class="k"&gt;for&lt;/span&gt;
Homebrew. If a formula fails to build, uninstall MacPorts/Fink and try again.
&lt;span class="o"&gt;==&lt;/span&gt;&amp;gt; Installing dependencies &lt;span class="k"&gt;for&lt;/span&gt; retext: qt, sip, &lt;span class="nv"&gt;pyqt&lt;/span&gt;
&lt;span class="o"&gt;==&lt;/span&gt;&amp;gt; Installing retext dependency: &lt;span class="nv"&gt;qt&lt;/span&gt;
&lt;span class="o"&gt;==&lt;/span&gt;&amp;gt; Downloading https://downloads.sf.net/project/machomebrew/Bottles/qt-4.8.5.mavericks.bottle.4.tar.gz
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;安装时遇到的问题：&lt;/p&gt;
&lt;p&gt;Q1: Could not link glib&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ brew link glib
Linking /usr/local/Cellar/glib/2.38.2... Warning: Could not link glib. Unlinking...

Error: Could not symlink file: /usr/local/Cellar/glib/2.38.2/share/locale/hr/LC_MESSAGES/glib20.mo
/usr/local/share/locale/hr/LC_MESSAGES is not writable. You should change its permissions.
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;解决方法：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo chown -R &lt;span class="k"&gt;$(&lt;/span&gt;whoami&lt;span class="k"&gt;)&lt;/span&gt;:admin /usr/local
$ brew link glib
Linking /usr/local/Cellar/glib/2.38.2... &lt;span class="m"&gt;136&lt;/span&gt; symlinks created
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Q2: install enchant error&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ brew install enchant
Warning: It appears you have MacPorts or Fink installed.
Software installed with other package managers causes known problems &lt;span class="k"&gt;for&lt;/span&gt;
Homebrew. If a formula fails to build, uninstall MacPorts/Fink and try again.
&lt;span class="o"&gt;==&lt;/span&gt;&amp;gt; Installing enchant dependency: &lt;span class="nv"&gt;aspell&lt;/span&gt;
&lt;span class="o"&gt;==&lt;/span&gt;&amp;gt; Downloading http://ftpmirror.gnu.org/aspell/aspell-0.60.6.1.tar.gz
Already downloaded: /Library/Caches/Homebrew/aspell-0.60.6.1.tar.gz
&lt;span class="o"&gt;==&lt;/span&gt;&amp;gt; ./configure --prefix&lt;span class="o"&gt;=&lt;/span&gt;/usr/local/Cellar/aspell/0.60.6.1
&lt;span class="o"&gt;==&lt;/span&gt;&amp;gt; make install
&lt;span class="m"&gt;20&lt;/span&gt; errors generated.
make&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;: *** &lt;span class="o"&gt;[&lt;/span&gt;prog/checker_string.o&lt;span class="o"&gt;]&lt;/span&gt; Error &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="m"&gt;20&lt;/span&gt; errors generated.
make&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;: *** &lt;span class="o"&gt;[&lt;/span&gt;prog/aspell.o&lt;span class="o"&gt;]&lt;/span&gt; Error &lt;span class="m"&gt;1&lt;/span&gt;
make: *** &lt;span class="o"&gt;[&lt;/span&gt;install-recursive&lt;span class="o"&gt;]&lt;/span&gt; Error &lt;span class="m"&gt;1&lt;/span&gt;

READ THIS: https://github.com/Homebrew/homebrew/wiki/troubleshooting
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;解决方法：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ brew update
$ brew doctor
$ brew install enchant
Warning: It appears you have MacPorts or Fink installed.
Software installed with other package managers causes known problems &lt;span class="k"&gt;for&lt;/span&gt;
Homebrew. If a formula fails to build, uninstall MacPorts/Fink and try again.
&lt;span class="o"&gt;==&lt;/span&gt;&amp;gt; Installing dependencies &lt;span class="k"&gt;for&lt;/span&gt; enchant: glib, &lt;span class="nv"&gt;aspell&lt;/span&gt;
&lt;span class="o"&gt;==&lt;/span&gt;&amp;gt; Installing enchant dependency: &lt;span class="nv"&gt;glib&lt;/span&gt;
&lt;span class="o"&gt;==&lt;/span&gt;&amp;gt; Downloading https://downloads.sf.net/project/machomebrew/Bottles/glib-2.40.0.mavericks.bottle.tar.gz
&lt;span class="c1"&gt;######################################################################## 100.0%&lt;/span&gt;
&lt;span class="o"&gt;==&lt;/span&gt;&amp;gt; Pouring glib-2.40.0.mavericks.bottle.tar.gz
  /usr/local/Cellar/glib/2.40.0: &lt;span class="m"&gt;410&lt;/span&gt; files, &lt;span class="nv"&gt;18M&lt;/span&gt;
&lt;span class="o"&gt;==&lt;/span&gt;&amp;gt; Installing enchant dependency: &lt;span class="nv"&gt;aspell&lt;/span&gt;
&lt;span class="o"&gt;==&lt;/span&gt;&amp;gt; Downloading http://ftpmirror.gnu.org/aspell/aspell-0.60.6.1.tar.gz
Already downloaded: /Library/Caches/Homebrew/aspell-0.60.6.1.tar.gz
&lt;span class="o"&gt;==&lt;/span&gt;&amp;gt; Patching
patching file interfaces/cc/aspell.h
&lt;span class="o"&gt;==&lt;/span&gt;&amp;gt; ./configure --prefix&lt;span class="o"&gt;=&lt;/span&gt;/usr/local/Cellar/aspell/0.60.6.1
&lt;span class="o"&gt;==&lt;/span&gt;&amp;gt; make &lt;span class="nv"&gt;install&lt;/span&gt;
&lt;span class="o"&gt;==&lt;/span&gt;&amp;gt; Downloading http://ftpmirror.gnu.org/aspell/dict/en/aspell6-en-7.1-0.tar.bz2
&lt;span class="c1"&gt;######################################################################## 100.0%&lt;/span&gt;
&lt;span class="o"&gt;==&lt;/span&gt;&amp;gt; ./configure --vars &lt;span class="nv"&gt;ASPELL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/usr/local/Cellar/aspell/0.60.6.1/bin/aspell &lt;span class="nv"&gt;PREZIP&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/usr/local/Cellar/aspell/0.60.6.1/bin/prezip
&lt;span class="o"&gt;==&lt;/span&gt;&amp;gt; make install
  /usr/local/Cellar/aspell/0.60.6.1: &lt;span class="m"&gt;181&lt;/span&gt; files, &lt;span class="m"&gt;6&lt;/span&gt;.5M, built in &lt;span class="m"&gt;26&lt;/span&gt; &lt;span class="nv"&gt;seconds&lt;/span&gt;
&lt;span class="o"&gt;==&lt;/span&gt;&amp;gt; Installing &lt;span class="nv"&gt;enchant&lt;/span&gt;
&lt;span class="o"&gt;==&lt;/span&gt;&amp;gt; Downloading http://www.abisource.com/downloads/enchant/1.6.0/enchant-1.6.0.tar.gz
&lt;span class="c1"&gt;######################################################################## 100.0%&lt;/span&gt;
&lt;span class="o"&gt;==&lt;/span&gt;&amp;gt; ./configure --prefix&lt;span class="o"&gt;=&lt;/span&gt;/usr/local/Cellar/enchant/1.6.0 --disable-ispell --disable-myspell
&lt;span class="o"&gt;==&lt;/span&gt;&amp;gt; make &lt;span class="nv"&gt;install&lt;/span&gt;
&lt;span class="o"&gt;==&lt;/span&gt;&amp;gt; Downloading https://pypi.python.org/packages/source/p/pyenchant/pyenchant-1.6.5.tar.gz
&lt;span class="c1"&gt;######################################################################## 100.0%&lt;/span&gt;
&lt;span class="o"&gt;==&lt;/span&gt;&amp;gt; python setup.py install --prefix&lt;span class="o"&gt;=&lt;/span&gt;/usr/local/Cellar/enchant/1.6.0 --single-version-externally-managed --record&lt;span class="o"&gt;=&lt;/span&gt;installed.txt
&lt;span class="o"&gt;==&lt;/span&gt;&amp;gt; Caveats
If you need Python to find the installed site-packages:
  mkdir -p ~/Library/Python/2.7/lib/python/site-packages
  &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/usr/local/lib/python2.7/site-packages&amp;#39;&lt;/span&gt; &amp;gt; ~/Library/Python/2.7/lib/python/site-packages/homebrew.pth
&lt;span class="o"&gt;==&lt;/span&gt;&amp;gt; Summary
  /usr/local/Cellar/enchant/1.6.0: &lt;span class="m"&gt;55&lt;/span&gt; files, 676K, built in &lt;span class="m"&gt;28&lt;/span&gt; seconds
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Q3: pip install pyenchant failed.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pip install pyenchant
Traceback &lt;span class="o"&gt;(&lt;/span&gt;most recent call last&lt;span class="o"&gt;)&lt;/span&gt;:
  File &lt;span class="s2"&gt;&amp;quot;/usr/local/bin/pip&amp;quot;&lt;/span&gt;, line &lt;span class="m"&gt;5&lt;/span&gt;, in &amp;lt;module&amp;gt;
    from pkg_resources import load_entry_point
  File &lt;span class="s2"&gt;&amp;quot;/System/Library/Frameworks/Python.framework/Versions/2.7/Extras/lib/python/pkg_resources.py&amp;quot;&lt;/span&gt;, line &lt;span class="m"&gt;2603&lt;/span&gt;, in &amp;lt;module&amp;gt;
    working_set.require&lt;span class="o"&gt;(&lt;/span&gt;__requires__&lt;span class="o"&gt;)&lt;/span&gt;
  File &lt;span class="s2"&gt;&amp;quot;/System/Library/Frameworks/Python.framework/Versions/2.7/Extras/lib/python/pkg_resources.py&amp;quot;&lt;/span&gt;, line &lt;span class="m"&gt;666&lt;/span&gt;, in require
    &lt;span class="nv"&gt;needed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; self.resolve&lt;span class="o"&gt;(&lt;/span&gt;parse_requirements&lt;span class="o"&gt;(&lt;/span&gt;requirements&lt;span class="o"&gt;))&lt;/span&gt;
  File &lt;span class="s2"&gt;&amp;quot;/System/Library/Frameworks/Python.framework/Versions/2.7/Extras/lib/python/pkg_resources.py&amp;quot;&lt;/span&gt;, line &lt;span class="m"&gt;565&lt;/span&gt;, in resolve
    raise DistributionNotFound&lt;span class="o"&gt;(&lt;/span&gt;req&lt;span class="o"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# XXX put more info here&lt;/span&gt;
pkg_resources.DistributionNotFound: &lt;span class="nv"&gt;pip&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;.4.1
donlydeMacBook-Pro:Vizrt Sun-cam$ pip install markups
Traceback &lt;span class="o"&gt;(&lt;/span&gt;most recent call last&lt;span class="o"&gt;)&lt;/span&gt;:
  File &lt;span class="s2"&gt;&amp;quot;/usr/local/bin/pip&amp;quot;&lt;/span&gt;, line &lt;span class="m"&gt;5&lt;/span&gt;, in &amp;lt;module&amp;gt;
    from pkg_resources import load_entry_point
  File &lt;span class="s2"&gt;&amp;quot;/System/Library/Frameworks/Python.framework/Versions/2.7/Extras/lib/python/pkg_resources.py&amp;quot;&lt;/span&gt;, line &lt;span class="m"&gt;2603&lt;/span&gt;, in &amp;lt;module&amp;gt;
    working_set.require&lt;span class="o"&gt;(&lt;/span&gt;__requires__&lt;span class="o"&gt;)&lt;/span&gt;
  File &lt;span class="s2"&gt;&amp;quot;/System/Library/Frameworks/Python.framework/Versions/2.7/Extras/lib/python/pkg_resources.py&amp;quot;&lt;/span&gt;, line &lt;span class="m"&gt;666&lt;/span&gt;, in require
    &lt;span class="nv"&gt;needed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; self.resolve&lt;span class="o"&gt;(&lt;/span&gt;parse_requirements&lt;span class="o"&gt;(&lt;/span&gt;requirements&lt;span class="o"&gt;))&lt;/span&gt;
  File &lt;span class="s2"&gt;&amp;quot;/System/Library/Frameworks/Python.framework/Versions/2.7/Extras/lib/python/pkg_resources.py&amp;quot;&lt;/span&gt;, line &lt;span class="m"&gt;565&lt;/span&gt;, in resolve
    raise DistributionNotFound&lt;span class="o"&gt;(&lt;/span&gt;req&lt;span class="o"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# XXX put more info here&lt;/span&gt;
pkg_resources.DistributionNotFound: &lt;span class="nv"&gt;pip&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;.4.1
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;解决办法：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo easy_install --upgrade pip
Password:
Searching &lt;span class="k"&gt;for&lt;/span&gt; pip
Reading http://pypi.python.org/simple/pip/
Best match: pip &lt;span class="m"&gt;1&lt;/span&gt;.5.4
Downloading https://pypi.python.org/packages/source/p/pip/pip-1.5.4.tar.gz#md5&lt;span class="o"&gt;=&lt;/span&gt;834b2904f92d46aaa333267fb1c922bb
Processing pip-1.5.4.tar.gz
Running pip-1.5.4/setup.py -q bdist_egg --dist-dir /tmp/easy_install-hsbdrM/pip-1.5.4/egg-dist-tmp-c3ITXY
warning: no files found matching &lt;span class="s1"&gt;&amp;#39;pip/cacert.pem&amp;#39;&lt;/span&gt;
warning: no files found matching &lt;span class="s1"&gt;&amp;#39;*.html&amp;#39;&lt;/span&gt; under directory &lt;span class="s1"&gt;&amp;#39;docs&amp;#39;&lt;/span&gt;
warning: no previously-included files matching &lt;span class="s1"&gt;&amp;#39;*.rst&amp;#39;&lt;/span&gt; found under directory &lt;span class="s1"&gt;&amp;#39;docs/_build&amp;#39;&lt;/span&gt;
no previously-included directories found matching &lt;span class="s1"&gt;&amp;#39;docs/_build/_sources&amp;#39;&lt;/span&gt;
Adding pip &lt;span class="m"&gt;1&lt;/span&gt;.5.4 to easy-install.pth file
Installing pip script to /usr/local/bin
Installing pip2.7 script to /usr/local/bin
Installing pip2 script to /usr/local/bin

Installed /Library/Python/2.7/site-packages/pip-1.5.4-py2.7.egg
Processing dependencies &lt;span class="k"&gt;for&lt;/span&gt; pip
Finished processing dependencies &lt;span class="k"&gt;for&lt;/span&gt; pip

$ sudo pip install pyenchant
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Q4: Install retext&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ brew install retext
Warning: It appears you have MacPorts or Fink installed.
Software installed with other package managers causes known problems &lt;span class="k"&gt;for&lt;/span&gt;
Homebrew. If a formula fails to build, uninstall MacPorts/Fink and try again.
&lt;span class="o"&gt;==&lt;/span&gt;&amp;gt; Downloading https://downloads.sourceforge.net/project/retext/ReText-4.0/ReText-4.0.0.tar.gz
Already downloaded: /Library/Caches/Homebrew/retext-4.0.0.tar.gz
&lt;span class="o"&gt;==&lt;/span&gt;&amp;gt; python setup.py install --prefix&lt;span class="o"&gt;=&lt;/span&gt;/usr/local/Cellar/retext/4.0.0
Warning: Formula#python is deprecated and will go away shortly.
Error: undefined method &lt;span class="sb"&gt;`&lt;/span&gt;xy&lt;span class="s1"&gt;&amp;#39; for #&amp;lt;PythonDependency: &amp;quot;python&amp;quot; []&amp;gt;&lt;/span&gt;
&lt;span class="s1"&gt;Please report this bug:&lt;/span&gt;
&lt;span class="s1"&gt;    https://github.com/Homebrew/homebrew/wiki/troubleshooting&lt;/span&gt;
&lt;span class="s1"&gt;/usr/local/Library/Taps/samueljohn-python/retext.rb:26:in `install&amp;#39;&lt;/span&gt;
/usr/local/Library/Homebrew/build.rb:174:in &lt;span class="sb"&gt;`&lt;/span&gt;install&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;
&lt;span class="s1"&gt;/usr/local/Library/Homebrew/formula.rb:267:in `brew&amp;#39;&lt;/span&gt;
/usr/local/Library/Homebrew/formula.rb:592:in &lt;span class="sb"&gt;`&lt;/span&gt;stage&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;
&lt;span class="s1"&gt;/usr/local/Library/Homebrew/resource.rb:62:in `unpack&amp;#39;&lt;/span&gt;
/usr/local/Library/Homebrew/extend/fileutils.rb:21:in &lt;span class="sb"&gt;`&lt;/span&gt;mktemp&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;
&lt;span class="s1"&gt;/usr/local/Library/Homebrew/resource.rb:59:in `unpack&amp;#39;&lt;/span&gt;
/usr/local/Library/Homebrew/resource.rb:52:in &lt;span class="sb"&gt;`&lt;/span&gt;stage&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;
&lt;span class="s1"&gt;/usr/local/Library/Homebrew/formula.rb:590:in `stage&amp;#39;&lt;/span&gt;
/usr/local/Library/Homebrew/formula.rb:262:in &lt;span class="sb"&gt;`&lt;/span&gt;brew&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;
&lt;span class="s1"&gt;/usr/local/Library/Homebrew/build.rb:151:in `install&amp;#39;&lt;/span&gt;
/usr/local/Library/Homebrew/build.rb:45:in &lt;span class="sb"&gt;`&lt;/span&gt;main&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
/usr/local/Library/Homebrew/build.rb:12
/usr/local/Library/Taps/samueljohn-python/retext.rb:33
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;解决方法：&lt;/p&gt;
&lt;p&gt;直接下载ReText源码，使用brew安装Python3，重新安装PyQt4 --with-python3，进入ReText-4.1.2，输入：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python3 setup.py install

running install
running build
running build_py
running build_scripts
copying and adjusting retext.py -&amp;gt; build/scripts-3.4
running install_lib
copying build/lib/.DS_Store -&amp;gt; /usr/local/lib/python3.4/site-packages
running install_scripts
copying build/scripts-3.4/retext.py -&amp;gt; /usr/local/bin
copying build/scripts-3.4/wpgen.py -&amp;gt; /usr/local/bin
changing mode of /usr/local/bin/retext.py to &lt;span class="m"&gt;755&lt;/span&gt;
changing mode of /usr/local/bin/wpgen.py to &lt;span class="m"&gt;755&lt;/span&gt;
renaming /usr/local/bin/retext.py to /usr/local/bin/retext
renaming /usr/local/bin/wpgen.py to /usr/local/bin/wpgen
running install_data
running install_egg_info
Removing /usr/local/lib/python3.4/site-packages/ReText-4.1.2-py3.4.egg-info
Writing /usr/local/lib/python3.4/site-packages/ReText-4.1.2-py3.4.egg-info
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;下载资源文件：&lt;a class="reference external" href="https://downloads.sourceforge.net/project/retext/Icons/ReTextIcons_r3.tar.gz"&gt;https://downloads.sourceforge.net/project/retext/Icons/ReTextIcons_r3.tar.gz&lt;/a&gt;'
复制到 /usr/local/lib/python3.4/site-packages/ReText/icons，修改 /usr/local/lib/python3.4/site-packages/ReText/__init__.py 中的 icon_path = &amp;quot;/usr/local/lib/python3.4/site-packages/ReText/icons/&amp;quot;&lt;/p&gt;
&lt;p&gt;最终运行效果图：&lt;/p&gt;
&lt;img alt="ReText 4.1.2" src="images/ReText4.1.2.jpg" /&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h3&gt;参考资料&lt;/h3&gt;
&lt;p&gt;&lt;a class="reference external" href="http://sourceforge.net/p/retext/wiki/Home/"&gt;Wiki&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h3&gt;更新日志&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;2015-05-17：增加 Mac OS X Yosemite 上安装&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
</content></entry><entry><title>UIImage 使用</title><link href="https://magicalboy.com/note/uiimage.html" rel="alternate"></link><published>2016-01-14T13:55:11+08:00</published><updated>2016-01-14T13:55:11+08:00</updated><author><name>Don</name></author><id>tag:magicalboy.com,2016-01-14:/note/uiimage.html</id><summary type="html">&lt;p&gt;&lt;a class="reference external" href="http://developer.apple.com/library/ios/#documentation/uikit/reference/UIImage_Class/Reference/Reference.html"&gt;UIImage Class Reference&lt;/a&gt;&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="25%" /&gt;
&lt;col width="75%" /&gt;
&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;Inherits from&lt;/td&gt;
&lt;td&gt;NSObject&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Framework&lt;/td&gt;
&lt;td&gt;/System/Library/Frameworks/UIKit.framework&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Availability&lt;/td&gt;
&lt;td&gt;Available in iOS 2.0 and later.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class="section" id="stretch"&gt;
&lt;h2&gt;Stretch&lt;/h2&gt;
&lt;p&gt;将&lt;/p&gt;
&lt;img alt="" src="http://i.stack.imgur.com/IPNUm.png" /&gt;
&lt;p&gt;拉伸为&lt;/p&gt;
&lt;img alt="" src="http://i.stack.imgur.com/1skMj.png" /&gt;
&lt;p&gt;代码：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="bp"&gt;UIImage&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;originalImage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="bp"&gt;UIImage&lt;/span&gt; &lt;span class="nl"&gt;imageNamed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;@&amp;quot;myImage.png&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="bp"&gt;UIImage&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;newImage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;originalImage&lt;/span&gt; &lt;span class="nl"&gt;respondsToSelector&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="k"&gt;@selector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;resizableImageWithCapInsets&lt;/span&gt;&lt;span class="p"&gt;:)])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// iOS 5 and obove.&lt;/span&gt;
    &lt;span class="n"&gt;newImage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;originalImage&lt;/span&gt; &lt;span class="nl"&gt;resizableImageWithCapInsets&lt;/span&gt;&lt;span class="p"&gt;:(&lt;/span&gt;&lt;span class="bp"&gt;UIEdgeInsets&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5 …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;&lt;a class="reference external" href="http://developer.apple.com/library/ios/#documentation/uikit/reference/UIImage_Class/Reference/Reference.html"&gt;UIImage Class Reference&lt;/a&gt;&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="25%" /&gt;
&lt;col width="75%" /&gt;
&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;Inherits from&lt;/td&gt;
&lt;td&gt;NSObject&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Framework&lt;/td&gt;
&lt;td&gt;/System/Library/Frameworks/UIKit.framework&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Availability&lt;/td&gt;
&lt;td&gt;Available in iOS 2.0 and later.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class="section" id="stretch"&gt;
&lt;h2&gt;Stretch&lt;/h2&gt;
&lt;p&gt;将&lt;/p&gt;
&lt;img alt="" src="http://i.stack.imgur.com/IPNUm.png" /&gt;
&lt;p&gt;拉伸为&lt;/p&gt;
&lt;img alt="" src="http://i.stack.imgur.com/1skMj.png" /&gt;
&lt;p&gt;代码：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="bp"&gt;UIImage&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;originalImage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="bp"&gt;UIImage&lt;/span&gt; &lt;span class="nl"&gt;imageNamed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;@&amp;quot;myImage.png&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="bp"&gt;UIImage&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;newImage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;originalImage&lt;/span&gt; &lt;span class="nl"&gt;respondsToSelector&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="k"&gt;@selector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;resizableImageWithCapInsets&lt;/span&gt;&lt;span class="p"&gt;:)])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// iOS 5 and obove.&lt;/span&gt;
    &lt;span class="n"&gt;newImage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;originalImage&lt;/span&gt; &lt;span class="nl"&gt;resizableImageWithCapInsets&lt;/span&gt;&lt;span class="p"&gt;:(&lt;/span&gt;&lt;span class="bp"&gt;UIEdgeInsets&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;}]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;newImage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;originalImage&lt;/span&gt; &lt;span class="nl"&gt;stretchableImageWithLeftCapWidth&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="nl"&gt;topCapHeight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;A stretchable image is divided into 9 parts, if both leftCapWidth and topCapHeight are nonzero.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;leftCapWidth&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;-----&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;+--------------+&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;     &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;      &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;  &lt;span class="n"&gt;A&lt;/span&gt;  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;  &lt;span class="n"&gt;B&lt;/span&gt;   &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;topCapHeight&lt;/span&gt;
&lt;span class="o"&gt;|-----+&lt;/span&gt;&lt;span class="err"&gt;·&lt;/span&gt;&lt;span class="o"&gt;+------|&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;
&lt;span class="o"&gt;|-----+&lt;/span&gt;&lt;span class="err"&gt;·&lt;/span&gt;&lt;span class="o"&gt;+------|&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;  &lt;span class="n"&gt;C&lt;/span&gt;  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;  &lt;span class="n"&gt;D&lt;/span&gt;   &lt;span class="o"&gt;|&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;     &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;      &lt;span class="o"&gt;|&lt;/span&gt;
&lt;span class="o"&gt;+--------------+&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The central parts are always 1 px in size, and this is the part that is stretched, for example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;leftCapWidth&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;constant&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;-----&amp;gt;&lt;/span&gt;
  &lt;span class="o"&gt;+------------------+&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt;
  &lt;span class="o"&gt;|&lt;/span&gt;     &lt;span class="o"&gt;|&lt;/span&gt;     &lt;span class="o"&gt;|&lt;/span&gt;      &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="o"&gt;|&lt;/span&gt;  &lt;span class="n"&gt;A&lt;/span&gt;  &lt;span class="o"&gt;|&lt;/span&gt;     &lt;span class="o"&gt;|&lt;/span&gt;  &lt;span class="n"&gt;B&lt;/span&gt;   &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;topCapHeight&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;constant&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="o"&gt;|-----+&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;+------|&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;     &lt;span class="p"&gt;.&lt;/span&gt;     &lt;span class="p"&gt;.&lt;/span&gt;      &lt;span class="o"&gt;|&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;     &lt;span class="p"&gt;.&lt;/span&gt;     &lt;span class="p"&gt;.&lt;/span&gt;      &lt;span class="o"&gt;|&lt;/span&gt;
&lt;span class="o"&gt;^&lt;/span&gt; &lt;span class="o"&gt;|-----+&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;+------|&lt;/span&gt;
  &lt;span class="o"&gt;|&lt;/span&gt;  &lt;span class="n"&gt;C&lt;/span&gt;  &lt;span class="o"&gt;|&lt;/span&gt;     &lt;span class="o"&gt;|&lt;/span&gt;  &lt;span class="n"&gt;D&lt;/span&gt;   &lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="o"&gt;|&lt;/span&gt;     &lt;span class="o"&gt;|&lt;/span&gt;     &lt;span class="o"&gt;|&lt;/span&gt;      &lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="o"&gt;+------------------+&lt;/span&gt;
        &lt;span class="o"&gt;&amp;gt;-----&amp;lt;&lt;/span&gt;
    &lt;span class="n"&gt;stretched&lt;/span&gt; &lt;span class="n"&gt;region&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To create a &amp;quot;glass pill button&amp;quot;, you should fill the rounded border into the regions A, B, C and D above, and supply the radius of that pill into both the leftCapWidth and topCapHeight.&lt;/p&gt;
&lt;p&gt;Also, a stretchable image is not shrinkable. If you try to use stretchable images bigger than the buttons (or whatever else) you want to apply it to, they may be rendered incorrectly (especially on older iOSes).&lt;/p&gt;
&lt;p&gt;引用 &lt;a class="reference external" href="http://stackoverflow.com/questions/2924408/iphone-stretchableimagewithleftcapwidth-only-makes-ds"&gt;Stackoverflow&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</content><category term="UIImage"></category><category term="iOS"></category></entry><entry><title>单元测试</title><link href="https://magicalboy.com/note/unit_testing.html" rel="alternate"></link><published>2016-01-14T13:55:11+08:00</published><updated>2016-01-14T13:55:11+08:00</updated><author><name>Don</name></author><id>tag:magicalboy.com,2016-01-14:/note/unit_testing.html</id><summary type="html">&lt;div class="section" id="id2"&gt;
&lt;h2&gt;单元测试是什么&lt;/h2&gt;
&lt;p&gt;即分模块测试，针对程序模块进行正确性检验的测试工作。单元测试可以在软件开发过程的早期及时发现问题，同时也利于未来对代码的重构。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="ios"&gt;
&lt;h2&gt;iOS 中的单元测试&lt;/h2&gt;
&lt;p&gt;OCUnit，被官方集成进XCode 4.x版本中；GHUnit，被推荐最多的测试框架，带GUI界面。&lt;/p&gt;
&lt;/div&gt;
</summary><content type="html">&lt;div class="section" id="id2"&gt;
&lt;h2&gt;单元测试是什么&lt;/h2&gt;
&lt;p&gt;即分模块测试，针对程序模块进行正确性检验的测试工作。单元测试可以在软件开发过程的早期及时发现问题，同时也利于未来对代码的重构。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="ios"&gt;
&lt;h2&gt;iOS 中的单元测试&lt;/h2&gt;
&lt;p&gt;OCUnit，被官方集成进XCode 4.x版本中；GHUnit，被推荐最多的测试框架，带GUI界面。&lt;/p&gt;
&lt;/div&gt;
</content></entry><entry><title>Xcode</title><link href="https://magicalboy.com/note/xcode.html" rel="alternate"></link><published>2016-01-14T13:55:11+08:00</published><updated>2016-01-14T13:55:11+08:00</updated><author><name>Don</name></author><id>tag:magicalboy.com,2016-01-14:/note/xcode.html</id><summary type="html">&lt;p&gt;Xcode 目前最新版本 &lt;a class="reference external" href="http://magicalboy.com/xcode-5-0/"&gt;Xcode 5.0&lt;/a&gt; ，支持 iPhone 5s, iOS 7 开发。&lt;/p&gt;
&lt;div class="section" id="what-s-new"&gt;
&lt;h2&gt;What's New&lt;/h2&gt;
&lt;p&gt;各个版本的 Xcode 新增功能说明。&lt;/p&gt;
&lt;div class="section" id="xcode-5-0-x"&gt;
&lt;h3&gt;Xcode 5.0.x&lt;/h3&gt;
&lt;p&gt;Help you design an app that looks gorgeous on iOS 7 or OS X Mavericks.&lt;/p&gt;
&lt;p&gt;WWDC地址：&lt;a class="reference external" href="https://developer.apple.com/wwdc/videos/?id=400"&gt;What’s New in Xcode 5&lt;/a&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;素材管理（Asset Management）：素材目录(Asset Catalogs)，后缀名为.xcassets …&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Xcode 目前最新版本 &lt;a class="reference external" href="http://magicalboy.com/xcode-5-0/"&gt;Xcode 5.0&lt;/a&gt; ，支持 iPhone 5s, iOS 7 开发。&lt;/p&gt;
&lt;div class="section" id="what-s-new"&gt;
&lt;h2&gt;What's New&lt;/h2&gt;
&lt;p&gt;各个版本的 Xcode 新增功能说明。&lt;/p&gt;
&lt;div class="section" id="xcode-5-0-x"&gt;
&lt;h3&gt;Xcode 5.0.x&lt;/h3&gt;
&lt;p&gt;Help you design an app that looks gorgeous on iOS 7 or OS X Mavericks.&lt;/p&gt;
&lt;p&gt;WWDC地址：&lt;a class="reference external" href="https://developer.apple.com/wwdc/videos/?id=400"&gt;What’s New in Xcode 5&lt;/a&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;素材管理（Asset Management）：素材目录(Asset Catalogs)，后缀名为.xcassets，只能在 Xcode 5 中打开使用。通过它可以创建和使用每个图片的所有版本，而不需管理单独的文件，或不需要单独的文件命名约定。素材目录还可以创建图片的切片，使得图片可以在用户界面上动态拉伸过程中保持文件大小。可惜这个功能是 iOS7 才支持。&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="ios"&gt;
&lt;h2&gt;支持 iOS 情况&lt;/h2&gt;
&lt;div class="section" id="id1"&gt;
&lt;h3&gt;Xcode 5.0.x&lt;/h3&gt;
&lt;p&gt;最低支持 iOS 4.3，但生成的 xib 在之前版本的 Xcode 中打不开。解决方法见：&lt;a class="reference external" href="http://stackoverflow.com/questions/17281073/cant-open-project-in-xcode-4-6-after-opening-in-5-0"&gt;Can't Open Project in Xcode 4.6 After Opening in 5.0&lt;/a&gt; 。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="xcode-4-4-x"&gt;
&lt;h3&gt;Xcode 4.4.x&lt;/h3&gt;
&lt;p&gt;虽然可以支持到iOS 3.0，但不支持 nib，只能用代码实现 UI 编写。只有 Xcode 4.2.x 版本及以下才支持 nib。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="xcode-4-5-x"&gt;
&lt;h3&gt;Xcode 4.5.x&lt;/h3&gt;
&lt;p&gt;不再支持 iOS 4.3 以下版本开发，即不再支持 armv 6。&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;相关连接：&lt;a class="reference external" href="http://stackoverflow.com/questions/9961631/build-universal-app-for-ios-3-0-using-xcode-4-3-x-nskeyedunarchiver-exception"&gt;Build universal app for iOS 3.0 using Xcode 4.3.x - NSKeyedUnarchiver Exception - Stack Overflow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="linker-flags"&gt;
&lt;h2&gt;Linker Flags&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;-all_load Loads all members of static archive libraries.&lt;/li&gt;
&lt;li&gt;-ObjC Loads all members of static archive libraries that implement an Objective-C class or category.&lt;/li&gt;
&lt;li&gt;-force_load (path_to_archive) Loads all members of the specified static archive library. Note: -all_load forces all members of all archives to be loaded. This option allows you to target a specific archive.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;具体请参考苹果Q&amp;amp;A文档：&lt;a class="reference external" href="https://developer.apple.com/library/mac/#qa/qa2006/qa1490.html"&gt;Building Objective-C static libraries with categories&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;StackOverflow：&lt;a class="reference external" href="http://stackoverflow.com/a/8179905"&gt;Objective-C categories in static library&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;启用 Xcode 编译版本自增功能&lt;/h2&gt;
&lt;p&gt;使用苹果自带的 agvtool 工具，方法见 &lt;a class="reference external" href="https://developer.apple.com/library/ios/qa/qa1827/_index.html"&gt;Automating Version and Build Numbers Using agvtool&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;在 Xcode 项目中选中 Target，在Build Phases中新增一个 Run Script：&lt;/p&gt;
&lt;pre class="code shell literal-block"&gt;
agvtool next-version -all
&lt;/pre&gt;
&lt;p&gt;之后每 Build 一次 Bundle version 的号码就会自增一次。&lt;/p&gt;
&lt;/div&gt;
</content><category term="iOS"></category><category term="Xcode"></category></entry><entry><title>Xcode 7 清除多余的 Woking copies</title><link href="https://magicalboy.com/note/xcode-remove-working-copies.html" rel="alternate"></link><published>2016-01-14T13:55:11+08:00</published><updated>2016-01-14T13:55:11+08:00</updated><author><name>Don</name></author><id>tag:magicalboy.com,2016-01-14:/note/xcode-remove-working-copies.html</id><summary type="html">&lt;p&gt;Xcode 版本：Version 7.1 (7B91b)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;问题描述：&lt;/strong&gt;
由于项目从 SVN 切到 Git，所以在项目的 Source Control 里面的 Woking copies 里面有旧项目残留的 SVN。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;解决方法：&lt;/strong&gt;
删除 &lt;em&gt;ProjectName.xcworkspace &amp;gt; xcshareddata &amp;gt; ProjectName.xcscmblueprint&lt;/em&gt;，重启 Xcode。&lt;/p&gt;
&lt;p&gt;参考链接：&lt;a class="reference external" href="http://stackoverflow.com/a/27535601"&gt;http://stackoverflow.com/a/27535601&lt;/a&gt;&lt;/p&gt;
</summary><content type="html">&lt;p&gt;Xcode 版本：Version 7.1 (7B91b)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;问题描述：&lt;/strong&gt;
由于项目从 SVN 切到 Git，所以在项目的 Source Control 里面的 Woking copies 里面有旧项目残留的 SVN。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;解决方法：&lt;/strong&gt;
删除 &lt;em&gt;ProjectName.xcworkspace &amp;gt; xcshareddata &amp;gt; ProjectName.xcscmblueprint&lt;/em&gt;，重启 Xcode。&lt;/p&gt;
&lt;p&gt;参考链接：&lt;a class="reference external" href="http://stackoverflow.com/a/27535601"&gt;http://stackoverflow.com/a/27535601&lt;/a&gt;&lt;/p&gt;
</content><category term="iOS"></category><category term="Xcode"></category></entry><entry><title>OpenWrt CC SS 配置</title><link href="https://magicalboy.com/note/openwrt-cc-ss.html" rel="alternate"></link><published>2015-12-01T00:00:00+08:00</published><updated>2016-01-09T21:40:00+08:00</updated><author><name>Don</name></author><id>tag:magicalboy.com,2015-12-01:/note/openwrt-cc-ss.html</id><summary type="html">&lt;div class="section" id="id1"&gt;
&lt;h2&gt;介绍&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;OpenWRT 版本：Chaos Calmer 15.05&lt;/li&gt;
&lt;li&gt;OpenWRT 内核：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# opkg files kernel&lt;/span&gt;
Package kernel &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;.18.20-1-7bed08fa9c06eb8089e82c200340ec66&lt;span class="o"&gt;)&lt;/span&gt; is installed on root and has the following files:
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;安装&lt;/h2&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;使用 root 登录 ssh&lt;/li&gt;
&lt;li&gt;下载合适的预编译 &lt;a class="reference external" href="http://sourceforge.net/projects/openwrt-dist/files/shadowsocks-libev/2.4.1-6f44d53/ar71xx/"&gt;安装包&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;上传到 &lt;tt class="docutils literal"&gt;/tmp&lt;/tt&gt; 目录&lt;/li&gt;
&lt;li&gt;执行安装命令：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cks-libev-spec &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;.4.1-1&lt;span class="o"&gt;)&lt;/span&gt; to root...
Installing ipset &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;6&lt;/span&gt;.24-1&lt;span class="o"&gt;)&lt;/span&gt; to root...
Downloading …&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="section" id="id1"&gt;
&lt;h2&gt;介绍&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;OpenWRT 版本：Chaos Calmer 15.05&lt;/li&gt;
&lt;li&gt;OpenWRT 内核：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# opkg files kernel&lt;/span&gt;
Package kernel &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;.18.20-1-7bed08fa9c06eb8089e82c200340ec66&lt;span class="o"&gt;)&lt;/span&gt; is installed on root and has the following files:
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;安装&lt;/h2&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;使用 root 登录 ssh&lt;/li&gt;
&lt;li&gt;下载合适的预编译 &lt;a class="reference external" href="http://sourceforge.net/projects/openwrt-dist/files/shadowsocks-libev/2.4.1-6f44d53/ar71xx/"&gt;安装包&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;上传到 &lt;tt class="docutils literal"&gt;/tmp&lt;/tt&gt; 目录&lt;/li&gt;
&lt;li&gt;执行安装命令：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cks-libev-spec &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;.4.1-1&lt;span class="o"&gt;)&lt;/span&gt; to root...
Installing ipset &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;6&lt;/span&gt;.24-1&lt;span class="o"&gt;)&lt;/span&gt; to root...
Downloading http://mirrors.ustc.edu.cn/openwrt/chaos_calmer/15.05/ar71xx/generic/packages/base/ipset_6.24-1_ar71xx.ipk.
Installing kmod-ipt-ipset &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;.18.20-1&lt;span class="o"&gt;)&lt;/span&gt; to root...
Downloading http://mirrors.ustc.edu.cn/openwrt/chaos_calmer/15.05/ar71xx/generic/packages/base/kmod-ipt-ipset_3.18.20-1_ar71xx.ipk.
Installing kmod-nfnetlink &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;.18.20-1&lt;span class="o"&gt;)&lt;/span&gt; to root...
Downloading http://mirrors.ustc.edu.cn/openwrt/chaos_calmer/15.05/ar71xx/generic/packages/base/kmod-nfnetlink_3.18.20-1_ar71xx.ipk.
Installing libmnl &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;.0.3-2&lt;span class="o"&gt;)&lt;/span&gt; to root...
Downloading http://mirrors.ustc.edu.cn/openwrt/chaos_calmer/15.05/ar71xx/generic/packages/base/libmnl_1.0.3-2_ar71xx.ipk.
Installing iptables-mod-tproxy &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;.4.21-1&lt;span class="o"&gt;)&lt;/span&gt; to root...
Downloading http://mirrors.ustc.edu.cn/openwrt/chaos_calmer/15.05/ar71xx/generic/packages/base/iptables-mod-tproxy_1.4.21-1_ar71xx.ipk.
Installing kmod-ipt-tproxy &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;.18.20-1&lt;span class="o"&gt;)&lt;/span&gt; to root...
Downloading http://mirrors.ustc.edu.cn/openwrt/chaos_calmer/15.05/ar71xx/generic/packages/base/kmod-ipt-tproxy_3.18.20-1_ar71xx.ipk.
Configuring kmod-nfnetlink.
Configuring kmod-ipt-ipset.
Configuring libmnl.
Configuring ipset.
Configuring kmod-ipt-tproxy.
failed to find a module named nf_tproxy_core
Configuring iptables-mod-tproxy.
Configuring shadowsocks-libev-spec.
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h2&gt;配置&lt;/h2&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;程序配置：/etc/init.d/shadowsocks&lt;/li&gt;
&lt;li&gt;服务配置：/var/etc/shadowsocks.json，格式如下&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="s2"&gt;&amp;quot;server&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;X.X.X.X&amp;quot;&lt;/span&gt;,
      &lt;span class="s2"&gt;&amp;quot;server_port&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;443&amp;quot;&lt;/span&gt;,
      &lt;span class="s2"&gt;&amp;quot;password&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;password&amp;quot;&lt;/span&gt;,
      &lt;span class="s2"&gt;&amp;quot;local_port&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;1080&amp;quot;&lt;/span&gt;,
      &lt;span class="s2"&gt;&amp;quot;method&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;rc4-md5&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
</content><category term="Linux"></category><category term="OpenWrt"></category></entry><entry><title>CocoaPods 使用</title><link href="https://magicalboy.com/note/cocoapods-usage.html" rel="alternate"></link><published>2015-05-30T10:02:00+08:00</published><updated>2015-05-30T10:02:00+08:00</updated><author><name>Don</name></author><id>tag:magicalboy.com,2015-05-30:/note/cocoapods-usage.html</id><summary type="html">&lt;div class="section" id="id1"&gt;
&lt;h2&gt;介绍&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="https://cocoapods.org/"&gt;CocoaPods&lt;/a&gt; 是 Objective-C 和 Swift 项目的依赖管理平台，而且已经拥有庞大的库，帮助我们优雅地扩大项目规模。&lt;/p&gt;
&lt;p&gt;后来又出了一个 &lt;a class="reference external" href="https://github.com/Carthage/Carthage"&gt;Carthage&lt;/a&gt;，使用 Swift 实现的一个更简单的 Cocoa 依赖管理工具。由于 Carthage 仅支持动态 framework，所以必须要求 iOS 8 以及以上才能够使用，所以，这个以后再了解。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="os-x-yosemite"&gt;
&lt;h2&gt;OS X Yosemite 上安装&lt;/h2&gt;
&lt;p&gt;使用 gem 安装：&lt;em&gt;$ sudo gem install cocoapods&lt;/em&gt;
前提是你已经安装好了 Gem — 一个 &lt;strong&gt;复杂&lt;/strong&gt; 的 Ruby 语言包管理器。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="xcode"&gt;
&lt;h2&gt;在 Xcode 项目中使用&lt;/h2&gt;
&lt;p&gt;很简单，在项目根目录新建一个 &lt;em&gt;Podfile …&lt;/em&gt;&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="section" id="id1"&gt;
&lt;h2&gt;介绍&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="https://cocoapods.org/"&gt;CocoaPods&lt;/a&gt; 是 Objective-C 和 Swift 项目的依赖管理平台，而且已经拥有庞大的库，帮助我们优雅地扩大项目规模。&lt;/p&gt;
&lt;p&gt;后来又出了一个 &lt;a class="reference external" href="https://github.com/Carthage/Carthage"&gt;Carthage&lt;/a&gt;，使用 Swift 实现的一个更简单的 Cocoa 依赖管理工具。由于 Carthage 仅支持动态 framework，所以必须要求 iOS 8 以及以上才能够使用，所以，这个以后再了解。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="os-x-yosemite"&gt;
&lt;h2&gt;OS X Yosemite 上安装&lt;/h2&gt;
&lt;p&gt;使用 gem 安装：&lt;em&gt;$ sudo gem install cocoapods&lt;/em&gt;
前提是你已经安装好了 Gem — 一个 &lt;strong&gt;复杂&lt;/strong&gt; 的 Ruby 语言包管理器。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="xcode"&gt;
&lt;h2&gt;在 Xcode 项目中使用&lt;/h2&gt;
&lt;p&gt;很简单，在项目根目录新建一个 &lt;em&gt;Podfile&lt;/em&gt; 的纯文本文件，加上自己需要的库（可以先查找，比如 &lt;em&gt;pod search AFNetworking&lt;/em&gt;）&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;platform :ios, &lt;span class="s1"&gt;&amp;#39;8.0&amp;#39;&lt;/span&gt;
use_frameworks!

target &lt;span class="s1"&gt;&amp;#39;MyApp&amp;#39;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  pod &lt;span class="s1"&gt;&amp;#39;AFNetworking&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;~&amp;gt; 2.5&amp;#39;&lt;/span&gt;
  pod &lt;span class="s1"&gt;&amp;#39;ORStackView&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;~&amp;gt; 2.0&amp;#39;&lt;/span&gt;
  pod &lt;span class="s1"&gt;&amp;#39;SwiftyJSON&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;~&amp;gt; 2.1&amp;#39;&lt;/span&gt;
end
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后执行 &lt;em&gt;$ pod install&lt;/em&gt;。
安装完成后，注意打开的是项目的 workspace 文件：&lt;em&gt;$ open App.xcworkspace&lt;/em&gt;。&lt;/p&gt;
&lt;p&gt;最后，直接在代码里使用：&lt;em&gt;#import &amp;lt;Reachability/Reachability.h&amp;gt;&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="pod"&gt;
&lt;h2&gt;创建自己的 Pod&lt;/h2&gt;
&lt;p&gt;在实际项目中，我们会经常修改第三方框架的代码。或者直接共享自己的作品。方法也很简单：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pod spec create Peanut
$ vi Peanut.podspec
$ pod spec lint Peanut.podspec
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;CocoaPods 是基于 Github 开发的，实践上，我们一般将 Github 上第三方的库 fork 过来，然后修改测试，创建并提交自己的 Podspec：&lt;em&gt;pod trunk push NAME.podspec&lt;/em&gt;。&lt;/p&gt;
&lt;p&gt;最后在引入的项目中的 Podfile 更新版本，使用 &lt;em&gt;$ pod update --verbose&lt;/em&gt; 更新。&lt;/p&gt;
&lt;p&gt;更详细的开发工作流请参考 &lt;a class="reference external" href="https://guides.cocoapods.org/contributing/contribute-to-cocoapods.html"&gt;The Development Workflow&lt;/a&gt;&lt;/p&gt;
&lt;div class="section" id="id3"&gt;
&lt;h3&gt;参考资料&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://guides.cocoapods.org/making/specs-and-specs-repo.html"&gt;Specs and the Specs Repo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
</content></entry><entry><title>Android 教程第一周</title><link href="https://magicalboy.com/note/android_coursera_part1_week1.html" rel="alternate"></link><published>2014-12-13T19:20:00+08:00</published><updated>2014-12-13T19:20:00+08:00</updated><author><name>Don</name></author><id>tag:magicalboy.com,2014-12-13:/note/android_coursera_part1_week1.html</id><summary type="html">&lt;div class="contents topic" id="id1"&gt;
&lt;p class="topic-title first"&gt;目录&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id2" id="id3"&gt;简介&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#overview" id="id4"&gt;OverView（概述）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id3"&gt;简介&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Coursera 的课程： &lt;a class="reference external" href="https://class.coursera.org/androidpart1-011/lecture"&gt;Programming Mobile Applications for Android Handheld Systems: Part 1&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;讲师： &lt;em&gt;Dr. Adam Porter&lt;/em&gt; 教授。&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="overview"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id4"&gt;OverView（概述）&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;课程主要内容：&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;手持系统介绍，未来发展趋势分析，以及这门课程的由来。&lt;/li&gt;
&lt;li&gt;自我介绍（很厉害的一个人物）。以及学习这门课程需要哪些准备。&lt;/li&gt;
&lt;li&gt;课程组织。&lt;/li&gt;
&lt;li&gt;课程主题。分两个部分，每部分为四周。&lt;/li&gt;
&lt;li&gt;Amazone 合作的福利。&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</summary><content type="html">&lt;div class="contents topic" id="id1"&gt;
&lt;p class="topic-title first"&gt;目录&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id2" id="id3"&gt;简介&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#overview" id="id4"&gt;OverView（概述）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id3"&gt;简介&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Coursera 的课程： &lt;a class="reference external" href="https://class.coursera.org/androidpart1-011/lecture"&gt;Programming Mobile Applications for Android Handheld Systems: Part 1&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;讲师： &lt;em&gt;Dr. Adam Porter&lt;/em&gt; 教授。&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="overview"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id4"&gt;OverView（概述）&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;课程主要内容：&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;手持系统介绍，未来发展趋势分析，以及这门课程的由来。&lt;/li&gt;
&lt;li&gt;自我介绍（很厉害的一个人物）。以及学习这门课程需要哪些准备。&lt;/li&gt;
&lt;li&gt;课程组织。&lt;/li&gt;
&lt;li&gt;课程主题。分两个部分，每部分为四周。&lt;/li&gt;
&lt;li&gt;Amazone 合作的福利。&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content><category term="Android"></category></entry><entry><title>ADB 使用</title><link href="https://magicalboy.com/note/adb.html" rel="alternate"></link><published>2014-01-08T00:00:00+08:00</published><updated>2016-09-20T00:00:00+08:00</updated><author><name>Don</name></author><id>tag:magicalboy.com,2014-01-08:/note/adb.html</id><summary type="html">&lt;div class="contents topic" id="id1"&gt;
&lt;p class="topic-title first"&gt;目录&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference internal" href="#adb-mac-os" id="id3"&gt;ADB 找不到设备（Mac OS）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#lg-vs450" id="id4"&gt;LG VS450&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id2" id="id5"&gt;参考&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="adb-mac-os"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id3"&gt;ADB 找不到设备（Mac OS）&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;主要针对国内一些小厂商（杂牌机），&lt;a class="reference external" href="https://developer.android.com/tools/device.html#VendorIds"&gt;Google USB Vendor IDs&lt;/a&gt; 列表上没有的设备。&lt;/p&gt;
&lt;p&gt;简单来说，就是将 Vendor ID 添加到 ~/.android/adb_usb.ini，然后重启 adb：&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;配置好 adb 环境，开启手机上的 USB Debug 模式。&lt;/li&gt;
&lt;li&gt;将手机通过USB连接到Mac。&lt;/li&gt;
&lt;li&gt;打开系统信息（点击左上的苹果，按住Option会显示），找到如图所示的手机设备，复制厂商ID。&lt;/li&gt;
&lt;li&gt;在终端输入 $ echo 0x1782 &amp;gt;&amp;gt; ~/.android/adb_usb.ini。&lt;/li&gt;
&lt;li&gt;重启 adb …&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="contents topic" id="id1"&gt;
&lt;p class="topic-title first"&gt;目录&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference internal" href="#adb-mac-os" id="id3"&gt;ADB 找不到设备（Mac OS）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#lg-vs450" id="id4"&gt;LG VS450&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id2" id="id5"&gt;参考&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="adb-mac-os"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id3"&gt;ADB 找不到设备（Mac OS）&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;主要针对国内一些小厂商（杂牌机），&lt;a class="reference external" href="https://developer.android.com/tools/device.html#VendorIds"&gt;Google USB Vendor IDs&lt;/a&gt; 列表上没有的设备。&lt;/p&gt;
&lt;p&gt;简单来说，就是将 Vendor ID 添加到 ~/.android/adb_usb.ini，然后重启 adb：&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;配置好 adb 环境，开启手机上的 USB Debug 模式。&lt;/li&gt;
&lt;li&gt;将手机通过USB连接到Mac。&lt;/li&gt;
&lt;li&gt;打开系统信息（点击左上的苹果，按住Option会显示），找到如图所示的手机设备，复制厂商ID。&lt;/li&gt;
&lt;li&gt;在终端输入 $ echo 0x1782 &amp;gt;&amp;gt; ~/.android/adb_usb.ini。&lt;/li&gt;
&lt;li&gt;重启 adb：$ ./adb kill-server ; ./adb devices。&lt;/li&gt;
&lt;/ol&gt;
&lt;img alt="厂商ID" src="images/usb_vender_id.png" /&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ./adb kill-server &lt;span class="p"&gt;;&lt;/span&gt; ./adb devices
* daemon not running. starting it now on port &lt;span class="m"&gt;5037&lt;/span&gt; *
* daemon started successfully *
List of devices attached
&lt;span class="m"&gt;19761202&lt;/span&gt;    device
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="lg-vs450"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id4"&gt;LG VS450&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;请选择 &lt;cite&gt;Internet connection via modeem&lt;/cite&gt;。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id5"&gt;参考&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://stackoverflow.com/questions/7135999/adb-not-finding-my-device-phone-macos-x/7136003#7136003"&gt;https://stackoverflow.com/questions/7135999/adb-not-finding-my-device-phone-macos-x/7136003#7136003&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://stackoverflow.com/a/24317563"&gt;http://stackoverflow.com/a/24317563&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="Android"></category></entry></feed>